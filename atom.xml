<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I code it]]></title>
  <link href="http://abruzzi.github.com/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2016-05-26T23:24:06+10:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[无他，但手熟尔]]></title>
    <link href="http://abruzzi.github.com/2016/05/practise-in-programming/"/>
    <updated>2016-05-26T22:56:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/05/practise-in-programming</id>
    <content type="html"><![CDATA[<h2>高效幻象</h2>

<p>通过对自己的行为观察，我发现在很多时候，我以为我掌握了的知识和技能其实并不牢靠。我引以为豪的<code>高效</code>其实犹如一个彩色的肥皂泡，轻轻一碰就会破碎，散落一地。</p>

<h3>你可能只是精通搜索</h3>

<p>我们现在所处的时代，信息爆炸，每个人每天都会接触，阅读很多的信息，快速消费，快速遗忘。那种每天早上起来如同皇帝批阅奏折的、虚假的误以为掌握知识的错觉，驱动我们进入一个恶性循环。</p>

<p>即使在我们真的打算解决问题，进行主动学习时，更多的也只是在熟练使用搜索引擎而已（在一个领域待久了，你所使用的关键字准确度自然要比新人高一些，仅此而已）。精通了高效率搜索之后，你会产生一种你<code>精通搜索到的知识本身</code>的<strong>错觉</strong>。</p>

<p><img src="http://abruzzi.github.com/images/2016/05/stackoverflow-oreilly.png" alt="stack overflow" /></p>

<h4>如何写一个Shell脚本</h4>

<p>在写博客的时候，我通常会在文章中配图。图片一般会放在一个有固定格式的目录中，比如现在是2016年5月，我本地就会有一个名为<code>$BLOG_HOME/images/2016/05</code>的目录。由于使用的是<code>markdown</code>，在插入图片时我就不得不输入完整的图片路径，如：<code>/images/2016/05/stack-overflow.png</code>。但是我又不太记得路径中的<code>images</code>是单数(<code>image</code>)还是复数(<code>images</code>)，而且图片格式又可能是<code>jpg</code>,<code>jpeg</code>,<code>gif</code>或者<code>png</code>，我也经常会搞错，这会导致图片无法正确显示。另外，放入该目录的原始文件尺寸有可能比较大，我通常需要将其缩放成800像素宽（长度无所谓，因为文章总是要从上往下阅读）。</p>

<p>为了自动化这个步骤，我写了一个小的Shell脚本。当你输入一个文件名如：<code>stack-overflow.png</code>后，它会缩放这个文件到800像素宽，结果是一个新的图片文件，命名为<code>stack-overflow-resized.png</code>，另外它将符合<code>markdown</code>语法的文件路径拷贝到剪贴板里：<code>/images/2016/05/stack-overflow-resized.png</code>，这样我在文章正文中只需要用<code>Command+V</code>粘贴就可以了。</p>

<p>有了思路，写起来就很容易了。缩放图片的命令我是知道的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>convert -resize 800 stack-overflow.png stack-overflow-resized.png
</span></code></pre></td></tr></table></div></figure>


<p>但是要在文件明上加入<code>-resized</code>，需要分割文件名和文件扩展名，在<code>Bash</code>里如何做到这一点呢？Google一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">FULLFILE</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILENAME</span><span class="o">=</span><span class="k">$(</span>basename <span class="s2">&quot;$FULLFILE&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">EXTENSION</span><span class="o">=</span><span class="s2">&quot;${FILENAME##*.}&quot;</span>
</span><span class='line'><span class="nv">FILENAME</span><span class="o">=</span><span class="s2">&quot;${FILENAME%.*}&quot;</span>
</span><span class='line'>
</span><span class='line'>convert -resize 800 <span class="nv">$FULLFILE</span> <span class="nv">$FILENAME</span>-resized.EXTENSION
</span></code></pre></td></tr></table></div></figure>


<p>难看是有点难看，不过还是可以工作的。接下来是按照当前日期生成完整路径，<code>date</code>命令我是知道的，而且我知道它的<code>format</code>格式很复杂，而且跟<code>JavaScript</code>里Date对象的<code>format</code>又不太一样（事实上，世界上有多少种日期工具，基本上就有多少种格式）。再Google一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>date +<span class="s2">&quot;/images/%Y/%m/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一步将路径拷贝到剪贴板也容易，Mac下的<code>pbcopy</code>我也会用：<code>echo</code>一下字符串变量，再管道到<code>pbcopy</code>即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">PREFIX</span><span class="o">=</span><span class="sb">`</span>date +<span class="s2">&quot;/images/%Y/%m/&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$PREFIX$FILENAME-resized.EXTENSION&quot;</span> | pbcopy
</span></code></pre></td></tr></table></div></figure>


<p>但是将内容粘贴到<code>markdown</code>里之后，我发现这个脚本多了一个换行。我想这个应该是<code>echo</code>自己的行为吧，会给字符串自动加上一个换行符。Google一下，发现加上<code>-n</code>参数就可以解决这个问题。</p>

<p>好了，完整的脚本写好了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">FULLFILE</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILENAME</span><span class="o">=</span><span class="k">$(</span>basename <span class="s2">&quot;$FULLFILE&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">EXTENSION</span><span class="o">=</span><span class="s2">&quot;${FILENAME##*.}&quot;</span>
</span><span class='line'><span class="nv">FILENAME</span><span class="o">=</span><span class="s2">&quot;${FILENAME%.*}&quot;</span>
</span><span class='line'>
</span><span class='line'>convert -resize 800 <span class="nv">$FULLFILE</span> <span class="nv">$FILENAME</span>-resized.EXTENSION
</span><span class='line'>
</span><span class='line'><span class="nv">PREFIX</span><span class="o">=</span><span class="sb">`</span>date +<span class="s2">&quot;/images/%Y/%m/&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s2">&quot;$PREFIX$FILENAME-resized.EXTENSION&quot;</span> | pbcopy
</span></code></pre></td></tr></table></div></figure>


<p>嗯，还不错，整个过程中就用了我十几分钟时间而已，以后我在写博客时插入图片就方便多了！</p>

<p>不过等等，好像有点不对劲儿，我回过头来看了看这段脚本：7行代码只有1行是我独立写的！没有<code>Google</code>的话，查看<code>man date</code>和<code>man echo</code>也可以解决其中一部分问题，不过文件扩展名部分估计又得花较长时间。</p>

<p>仔细分析一下，之前的成就感荡然无存。</p>

<h4>更多的例子</h4>

<p>我相信，过几周我再来写这样一个简单的脚本时，上面那一幕还是会出现。开发者的IDE的外延已经将<code>Google</code>和<code>Stack Overflow</code>集成了。很难想象没有这两个IDE的<code>插件</code>我要怎样工作。</p>

<p>其实除此之外，日常工作中这样的事情每时每刻都在发生：</p>

<ol>
<li>Ansible里如何创建一个给用户<code>robot</code>读写权限的目录？</li>
<li>Python 3中启动简单HTTPServer的命令是？</li>
<li>Spring Boot的Gradle String是？</li>
<li>Mongodb中如何为用户<code>robot</code>授权？</li>
<li>Gulp里一个Task依赖另一个Task怎么写？</li>
</ol>


<p>等等等等，这个列表可以根据你的技术栈，偏向前端/后端的不同而不同，但是相同的是在<code>Google</code>和<code>Stack Overflow</code>上搜索，阅读会浪费很多时间，而这些本来都是可以避免的。</p>

<h3>肌肉记忆</h3>

<p>大脑在对信息存储上有很高级的设计，如果某件事情不值得记忆，大脑会自动过滤掉（比如我们很容易获得的搜索结果）。而对于那些频繁发生，计算结果又不会变化的信息，大脑会将其下放到“更低级别”的神经去记忆。比如各种运动中的肌肉记忆，习武之人梦寐以求的“拳拳服膺”，“不期然而然，莫知之而至”。</p>

<p>这里也有两个小例子：</p>

<h4>一个C语言的小程序</h4>

<p>上周末我买了一个茶轴的机械键盘，打开包装之后我很兴奋，赶紧插在我的笔记本上，打开一个编辑器，心说敲一些代码体验一下。几秒钟后，我发现敲出来的是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp"># include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Usage: %s ip port</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;Connecting to %s %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在命令行里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gcc -o hello hello.c
</span><span class='line'><span class="nv">$ </span>./hello
</span><span class='line'>Usage: ./hello ip port
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>./hello 10.180.1.1 9999
</span><span class='line'>Connecting to 10.180.1.1 9999
</span></code></pre></td></tr></table></div></figure>


<p>整个过程极为流畅，上一次开发C代码已经是4年多前了。也就是说，我的手指已经记下了所有的这些命令：</p>

<ol>
<li>Linux下<code>main</code>函数的convention</li>
<li><code>fprintf</code>的签名</li>
<li><code>stderr/stdout</code>用法的区分</li>
<li><code>main</code>函数不同场景的返回值</li>
<li><code>gcc</code>命令的用法</li>
</ol>


<p>另外一个小例子是<code>vim</code>编辑器。我使用<code>vim</code>已经有很多年了，现在在任何一个Linux服务器上，编辑那些<code>/etc/nginx/nginx.conf</code>之类的配置文件时，手指就会<code>自动</code>的找到快捷键，<code>自动</code>的完成搜索，替换，跳转等等操作。</p>

<h3>刻意练习</h3>

<p>对比这两个例子，一方面我惊讶于自己目前对搜索引擎、<code>Stack Overflow</code>的依赖；一方面惊讶于<code>肌肉记忆力</code>的深远和神奇。结合一下两者，我发现自己的开发效率有望得到很大的提升。</p>

<p>比如上面列出的那些略显尴尬的问题，如果我的手指可以<code>自动</code>的敲出这些答案，那么节省下的搜索、等待、阅读的时间就可以用来干别的事情，比如跑步啊，骑车啊，去驾校学车被教练骂啊等等，总之，去过自己的生活。</p>

<p>这方面的书籍，博客都已经有很多，比如我们在ThoughtWorks University里实践的<code>Code Kata</code>，<code>JavaScript Dojo</code>，<code>TDD Dojo</code>之类，都已经证明其有效性。</p>

<p>如果你打算做一些相关的练习，从<code>Kata</code>开始是一个不错的选择。每个<code>Kata</code>都包含一个简单的编程问题，你需要不断的去练习它（同一个题目做20遍，50遍等）。前几次你是在解决问题本身，慢慢就会变成在审视自己的编程习惯，发现并改进（比如快捷键的使用，语法的熟悉程度等等），这样在实际工作中你会以外的发现自己的速度变快了，而且对于重构的信心会变大很多。其实道理也很简单：如果你总是赶着deadline来完成任务，怎么会有时间来做优化呢？</p>

<p>这里有一些参考资料和<code>Kata</code>的题目，可供参考：</p>

<ul>
<li><a href="https://sites.google.com/site/steveyegge2/practicing-programming">Practicing Programming</a></li>
<li><a href="https://blog.codinghorror.com/the-ultimate-code-kata/">The Ultimate Code Kata</a></li>
<li><a href="http://codekata.com/">一些Kata的题目</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为故障和失败做设计]]></title>
    <link href="http://abruzzi.github.com/2016/05/design-for-failure/"/>
    <updated>2016-05-17T22:34:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/05/design-for-failure</id>
    <content type="html"><![CDATA[<h2>为故障和失败做设计</h2>

<p>先来看一个笑话：</p>

<blockquote><p>QA工程师走进酒吧，要了一杯啤酒，要了0杯啤酒，要了999999999杯啤酒，要了一只蜥蜴，要了-1杯啤酒，要了一个sfdeljknesv，酒保从容应对，QA工程师 很满意。接下来，一名顾客来到了同一个酒吧，问厕所在哪，酒吧顿时起了大火，然后整个建筑坍塌了。</p></blockquote>

<p>事实上，无论我们事先做多么详尽的计划，我们还是会失败。而且大多数时候，失败、故障都会从一个我们无法预期的角度发生，令人猝不及防。</p>

<p>如果没有办法避免失败（事先要考虑到这么多的异常情况不太现实，而且会投入过多的精力），那么就需要设计某种机制，使得当发生这种失败时系统可以将损失降低到最小。</p>

<p>另一方面，系统需要具备从灾难中回复的能力。如果由于某种原因，服务进程意外终止了，那么一个<code>watchdog</code>机制就会非常有用，比如supervisord就可以用来保证进程意外终止之后的自动启动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[program:jigsaw]</span>
</span><span class='line'><span class="na">command</span><span class="o">=</span><span class="s">java -jar /app/jigsaw.jar</span>
</span><span class='line'><span class="na">startsecs</span><span class="o">=</span><span class="s">0</span>
</span><span class='line'><span class="na">stopwaitsecs</span><span class="o">=</span><span class="s">0</span>
</span><span class='line'><span class="na">autostart</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'><span class="na">autorestart</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'><span class="na">stdout_logfile</span><span class="o">=</span><span class="s">/var/log/jigsaw/app.log</span>
</span><span class='line'><span class="na">stderr_logfile</span><span class="o">=</span><span class="s">/var/log/jigsaw/app.err</span>
</span></code></pre></td></tr></table></div></figure>


<p>在现实世界中，设计一个无缺陷的系统显然是不可能的，但是通过努力，我们还是有可能设计出具有弹性，能够快速失败，从失败中恢复的系统来。</p>

<h3>错误无可避免</h3>

<h4>令人担心的错误处理</h4>

<p>我们先来看两个代码片段，两段代码都是在实现一个典型的Linux下的Socket服务器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">serversock</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">server</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">serversock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="n">IPPROTO_TCP</span><span class="p">)</span>
</span><span class='line'>  <span class="n">setup_sockaddr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bind</span><span class="p">(</span><span class="n">serversock</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">server</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">server</span><span class="p">));</span>
</span><span class='line'>  <span class="n">listen</span><span class="p">(</span><span class="n">serversock</span><span class="p">,</span> <span class="n">MAXPENDING</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果加上现实中可能出现的各种的处理，代码会变长一些：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">serversock</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">server</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;USAGE: server &lt;port&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">serversock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="n">IPPROTO_TCP</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Failed to create socket</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">setup_sockaddr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">serversock</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">server</span><span class="p">,</span>
</span><span class='line'>                               <span class="k">sizeof</span><span class="p">(</span><span class="n">server</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Failed to bind the server socket</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">serversock</span><span class="p">,</span> <span class="n">MAXPENDING</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Failed to listen on server socket</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>早在上学的时候，我在编写程序时就非常害怕处理错误情况。一方面加入错误处理会导致代码变长、变难看，另一方面是担心有遗漏掉的点，更多的则是对复杂多变的现实环境中不确定性的担忧。</p>

<p>每当写这样的代码时，我都会陷入深深的焦虑：如果真的出错了怎么办？事实上我也经常会遇到错误，比如命令行参数没有写对，绑定一个
已经被占用的端口，磁盘空间不足等等。工作之后，这些烦人的问题其实也并不经常出现。偶尔出现时我们也有很好的日志来帮助定位，最后问题总会解决，不过那种对不确定性的担心仍然深藏心底。</p>

<h4>UDP协议</h4>

<p>早在大学网络课上，我就已经对不靠谱的<code>UDP</code>协议非常不满了：作为一个网络协议，竟然不能保证数据可靠的传送到网络的另一端，如果数据没有丢失，也无法保证次序。这种有点不负责任的协议我从来不用，甚至在做练习时都会将其自动过滤，不管那种编程语言，我都会优先考虑<code>TCP</code>。</p>

<p>不过在学习网络视频传输的时候，我发现很多时候人们都会采用<code>UDP</code>。另外很多场景下，比如最早的<code>QQ</code>也都使用了<code>UDP</code>来作为内网穿透等设计者可能都没有考虑到的功能。</p>

<p>事实上，这种看似不靠谱的协议在很多IM软件中都在采用（混合模式），比如Skype：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>lsof -i -n | grep -i skype | awk <span class="s1">&#39;{print $1, $8, $9}&#39;</span>
</span><span class='line'>Skype TCP 192.168.0.101:52093-&gt;91.190.219.39:12350
</span><span class='line'>Skype UDP 127.0.0.1:50511
</span><span class='line'>Skype TCP 192.168.0.101:53090-&gt;40.113.87.220:https
</span><span class='line'>Skype UDP *:*
</span><span class='line'>Skype TCP 192.168.0.101:52240-&gt;64.4.61.220:https
</span><span class='line'>Skype TCP 192.168.0.101:14214
</span><span class='line'>Skype UDP *:63639
</span><span class='line'>Skype UDP 192.168.0.101:14214
</span><span class='line'>Skype TCP 192.168.0.101:52544-&gt;168.63.205.106:https
</span><span class='line'>Skype TCP 192.168.0.101:52094-&gt;157.55.56.145:40032
</span><span class='line'>Skype TCP 192.168.0.101:52938-&gt;40.113.87.220:https
</span><span class='line'>Skype TCP 192.168.0.101:53091-&gt;40.113.87.220:https
</span><span class='line'>Skype TCP 192.168.0.101:53092-&gt;40.113.87.220:https
</span></code></pre></td></tr></table></div></figure>


<p>这种简单，不保证可靠性的协议有强大的适应性，在大部分网络环境都是适用的。在工程中，人们会将它和TCP混合适用，在诸如视频，语音的传输中，小规模的丢包，失序都是可以接受的，毕竟还有人类大脑这样的高级处理器负责纠正那些网络错误。</p>

<h3>处理失败的模式</h3>

<h4>超时机制</h4>

<p>对于网络上的第三方依赖，你无法预料它的响应延迟是什么样子的，它可能每秒钟可以处理10000次请求而游刃有余，也可能在处理100个并发时就会无限期阻塞，你需要为这种情况有所准备。</p>

<p><code>nginx</code>通常被用作一个网关，它总是处于请求的最前端，因此其中有很多关于超时的设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location /api <span class="o">{</span>
</span><span class='line'>  proxy_pass http://api.backend;
</span><span class='line'>  proxy_connect_timeout 500s;
</span><span class='line'>  proxy_read_timeout 500s;
</span><span class='line'>  proxy_send_timeout 500s;
</span><span class='line'>
</span><span class='line'>  proxy_set_header        X-Real-IP <span class="nv">$remote_addr</span>;
</span><span class='line'>  proxy_set_header        X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span>;
</span><span class='line'>  proxy_set_header        Host <span class="nv">$http_host</span>;
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如上面<code>/api</code>这个虚拟host中就有连接超时，读超时，后端写超时等设置。在实际环境中，<code>Fail Fast</code>是对无法预料错误的<strong>最好</strong>处理方法。缓慢的处理会阻塞其他请求，并很快堆积，然后耗尽系统资源。</p>

<p>系统超时配置只是一部分，在你自己的代码中也应该为所有网络依赖加上合适的超时机制：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Staff</span><span class="o">&gt;</span> <span class="n">fetchUserByName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">JIGSAW_ENDPOINT</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Client</span> <span class="n">client</span> <span class="o">=</span> <span class="n">ClientBuilder</span><span class="o">.</span><span class="na">newClient</span><span class="o">(</span><span class="k">new</span> <span class="n">ClientConfig</span><span class="o">());</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="n">ClientProperties</span><span class="o">.</span><span class="na">CONNECT_TIMEOUT</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="n">ClientProperties</span><span class="o">.</span><span class="na">READ_TIMEOUT</span><span class="o">,</span>    <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Invocation</span><span class="o">.</span><span class="na">Builder</span> <span class="n">request</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">target</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">request</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Staff</span><span class="o">&gt;</span> <span class="n">staff</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">staff</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Staff</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">staff</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">staff</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>回退机制</h4>

<p>如果应用程序无法获得正常的响应，那么提供优雅的回退机制在大多数情况下是必须的，而且这样做通常也不会很复杂。以Netflix的<code>Hystrix</code>库为例，如果一个异步命令失败（比如网络异常，超时等），它提供<code>Fallback</code>机制来返回客户端一个默认实现（或者一份本地缓存中的数据）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">fallbackMethod</span> <span class="o">=</span> <span class="s">&quot;getDefaultStaffInfo&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Staff</span> <span class="nf">getStaffInfo</span><span class="o">(</span><span class="n">String</span> <span class="n">loginName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//fetch from remote server</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Staff</span> <span class="nf">getDefaultStaffInfo</span><span class="o">(</span><span class="n">String</span> <span class="n">loginName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Staff</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>熔断器</h4>

<p><img src="http://abruzzi.github.com/images/2016/05/circuit_breaker.jpg" alt="Circuit Breaker" /></p>

<p>熔断器模式指当应用在依赖方响应过慢或者出现很多超时时，调用方主动熔断，这样可以防止对依赖方造成更严重的伤害。过一段时间之后，调用方会以较慢的速度开始重试，如果依赖方已经恢复，则逐步加大负载，直到恢复正常调用。如果依赖方还是没有就绪，那就延长等待时间，然后重试。这种模式使得系统在某种程度上显现出动态性和智能。</p>

<p>Netflix的Hystrix库已经提供了这种能力，事实上，如果你使用Spring Cloud Netfilx，这个功能是内置在系统中的，你只需要一些注解就可以让系统具备这样的能力：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@SpringBootApplication</span>
</span><span class='line'><span class="nd">@EnableCircuitBreaker</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果5秒内连续失败了20次，Hystrix会进入<code>熔断</code>模式，后续的请求不会再发送。过一段时间之后，Hystrix又会逐步尝试恢复负载。</p>

<h3>后记</h3>

<p>扩展阅读：</p>

<ul>
<li><a href="https://book.douban.com/subject/26304417/">《发布！软件的设计与部署》</a></li>
<li><a href="https://book.douban.com/subject/24838618/">《反脆弱》</a></li>
</ul>


<p>技术文章：</p>

<ul>
<li><a href="http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html">Spring Cloud &amp; Docker</a></li>
<li><a href="http://ryanjbaxter.com/2015/10/12/building-cloud-native-apps-with-spring-part-5/">Build Cloud Native Apps</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[保护你的API（下）]]></title>
    <link href="http://abruzzi.github.com/2016/05/about-session-and-security-api-2/"/>
    <updated>2016-05-12T22:50:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/05/about-session-and-security-api-2</id>
    <content type="html"><![CDATA[<h2>前后端分离之后</h2>

<p>前后端分离之后，在部署上通过一个反向代理就可以实现动静态分离，跨域问题的解决等。但是一旦引入鉴权，则又会产生新的问题。通常来说，鉴权是对于后台API/API背后的资源的保护，即<strong>未经授权的用户不能访问受保护资源</strong>。</p>

<p>要实现这个功能有很多种方式，在应用程序之外设置完善的安全拦截器是最常见的方式。不过有点不够优雅的是，一些不太纯粹的、非功能性的代码和业务代码混在同一个代码库中。</p>

<p>另一方面，各个业务系统都可能需要某种机制的鉴权，所以很多企业都会搭建SSO机制，即<a href="https://en.wikipedia.org/wiki/Single_sign-on">Single Sign-On</a>。这样可以避免人们在多个系统创建不同账号，设置不同密码，不同的超时时间等等。如果SSO系统已经先于系统存在了很久，那么新开发的系统完全不需要自己再配置一套用户管理机制了（一般SSO只会完成<strong>鉴权</strong>中<strong>鉴别</strong>的部分，<strong>授权</strong>还是需要各个业务系统自行处理）。</p>

<p>本文中，我们使用基础设施（反向代理）的一些配置，来完成<strong>保护未授权资源</strong>的目的。在这个例子中，我们假设系统由这样几个服务器组成：</p>

<h3>系统组成</h3>

<p>这个实例中，我们的系统分为三部分</p>

<ol>
<li><code>kanban.com:8000</code>（业务系统前端）</li>
<li><code>api.kanban.com:9000</code>（业务系统后端API）</li>
<li><code>sso.kanban.com:8100</code> （单点登录系统，登陆界面）</li>
</ol>


<p>前端包含了HTML/JS/CSS等资源，是一个纯静态资源，所以本地磁盘即可。后端API则是一组需要被保护的API（比如查询工资详情，查询工作经历等）。最后，单点登录系统是一个简单的表单，用户填入用户名和密码后，如果登录成功，单点登录会将用户重定向到登录前的位置。</p>

<p>我们举一个具体场景的例子：</p>

<ol>
<li>未登录用户访问<code>http://kanba.com:8000/index.html</code></li>
<li>系统会重定向用户到<code>http://sso.kanban.com:8100/sso?return=http://kanba.com:8000/index.html</code></li>
<li>用户看到登录页面，输入用户名、密码登录</li>
<li>用户被重定向回<code>http://kanba.com:8000/index.html</code></li>
<li>此外，<code>index.htm</code>l页面上的<code>app.js</code>对<code>api.kanban.com:9000</code>的访问也得到了授权</li>
</ol>


<h4>环境设置</h4>

<p>简单起见，可以通过修改/etc/hosts文件来设置服务器环境：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1 sso.kanban.com
</span><span class='line'>127.0.0.1 api.kanban.com
</span><span class='line'>127.0.0.1 kanban.com</span></code></pre></td></tr></table></div></figure>


<h3>nginx及auth_request</h3>

<p>反向代理nginx有一个auth_request的模块。在一个虚拟host中，每个请求会先发往一个内部<code>location</code>，这个内部的<code>location</code>可以指向一个可以做鉴权的Endpoint。如果这个请求得到的结果是200，那么nginx会返回用户本来请求的内容，如果返回401，则将用户重定向到一个预定义的地址：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen 8000;
</span><span class='line'>    server_name kanban.com;
</span><span class='line'>
</span><span class='line'>    root /usr/local/var/www/kanban/;
</span><span class='line'>
</span><span class='line'>    error_page 401 = @error401;
</span><span class='line'>
</span><span class='line'>    location @error401 {
</span><span class='line'>        return 302 http://sso.kanban.com:8100/sso?return=$scheme://$http_host$request_uri;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    auth_request /api/auth;
</span><span class='line'>
</span><span class='line'>    location = /api/auth {
</span><span class='line'>        internal;
</span><span class='line'>
</span><span class='line'>        proxy_pass http://api.kanban.com:9000;
</span><span class='line'>
</span><span class='line'>        proxy_pass_request_body     off;
</span><span class='line'>
</span><span class='line'>        proxy_set_header Content-Length "";
</span><span class='line'>        proxy_set_header X-Original-URI $request_uri;
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>
</span><span class='line'>        if ($http_cookie ~* "w3=(\w+)") {
</span><span class='line'>            set $token "$1";
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        proxy_set_header X-KANBAN-TOKEN $token;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>比如上面这个例子中，<code>auth_request</code>的URL为<code>/api/auth</code>，它是一个内部的location，外部无法访问。在这个<code>locaiton</code>中，请求会被转发到<code>http://api.kanban.com:9000</code>，根据nginx的正则语法，请求将会被转发到<code>http://api.kanban.com:9000/api/auth</code>（我们随后可以看到这个Endpoint的定义）。</p>

<p>我们设置了请求的原始头信息，并禁用了request_body，如果cookie中包含了<code>w3=(\w+)</code>字样，则将这个w3的值抽取出来，并赋值给一个<code>X-KANBAN-TOKEN</code>的HTTP头。</p>

<h4>权限Endpoint</h4>

<p>对应的<code>/api/auth</code>的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/auth&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">simpleAuth</span><span class="o">(</span><span class="nd">@RequestHeader</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&quot;X-KANBAN-TOKEN&quot;</span><span class="o">,</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">token</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="s">&quot;Unauthorized&quot;</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNAUTHORIZED</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="s">&quot;Authorized&quot;</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果HTTP头上有<code>X-KANBAN-TOKEN</code>且值不为空，则返回200，否则返回401。</p>

<p>当这个请求得到401之后，用户被重定向到<code>http://sso.kanban.com:8100/sso</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">error_page</span> <span class="mi">401</span> <span class="o">=</span> <span class="nd">@error401</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">location</span> <span class="nd">@error401</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">302</span> <span class="nl">http:</span><span class="c1">//sso.kanban.com:8100/sso?return=$scheme://$http_host$request_uri;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SSO组件（简化版）</h3>

<p>这里用<code>sinatra</code>定义了一个简单的SSO服务器（去除了实际的校验部分）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:return_url</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:bind</span><span class="p">,</span> <span class="s1">&#39;0.0.0.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/sso&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">settings</span><span class="o">.</span><span class="n">return_url</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:return</span><span class="o">]</span>
</span><span class='line'>    <span class="n">send_file</span> <span class="s1">&#39;public/index.html&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;/login&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">credential</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:credential</span><span class="o">]</span>
</span><span class='line'>  <span class="c1"># check credential against database</span>
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">return_url</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">set_cookie</span><span class="p">(</span><span class="s2">&quot;w3&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:domain</span> <span class="o">=&gt;</span> <span class="s2">&quot;.</span><span class="si">#{</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:expires</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="mi">2400</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:value</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">credential</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="n">redirect</span> <span class="n">settings</span><span class="o">.</span><span class="n">return_url</span><span class="p">,</span> <span class="mi">302</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/sso</code>对应的Login Form是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/login&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;credential[name]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;credential[password]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当用户提交表单之后，我们只是简单的设置了<code>cookie</code>，并重定向用户到跳转前的URL。</p>

<h3>前端页面</h3>

<p>这个应用的前端应用非常简单，我们只需要将这些静态文件放到<code>/usr/local/var/www/kanban</code>目录下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ tree /usr/local/var/www/kanban
</span><span class='line'>
</span><span class='line'>├── index.html
</span><span class='line'>└── scripts
</span><span class='line'>    ├── app.js
</span><span class='line'>    └── jquery.min.js
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>index.html</code>中引用的<code>app.js</code>会请求一个受保护的资源：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/protected/1&#39;</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>从下图中的网络请求可以看到重定向的流程：</p>

<p><img src="http://abruzzi.github.com/images/2016/05/redirection-resized.png" alt="redirection" /></p>

<h3>总结</h3>

<p>本文我们通过配置反向代理，将多个Endpoint组织起来。这个过程可以在应用程序中通过代码实现，也可以在基础设施中通过配置实现，通常来讲，如果可以通过配置来实现的，就尽量将其与负责业务逻辑的代码隔离出来。这样可以保证各个组件的独立性，也可以使得优化和定位问题更加容易。</p>

<p>完整的代码可以在这里下载：</p>

<ul>
<li><a href="https://github.com/abruzzi/fake-sso">Fake SSO</a></li>
<li><a href="https://github.com/abruzzi/spring-security-demo">Spring Security Demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[保护你的API（上）]]></title>
    <link href="http://abruzzi.github.com/2016/05/about-session-and-security-api-1/"/>
    <updated>2016-05-10T19:12:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/05/about-session-and-security-api-1</id>
    <content type="html"><![CDATA[<h2>保护你的API</h2>

<p>在大部分时候，我们讨论API的设计时，会从功能的角度出发定义出完善的，易用的API。而很多时候，非功能需求如安全需求则会在很晚才加入考虑。而往往这部分会涉及很多额外的工作量，比如与外部的SSO集成，Token机制等等。</p>

<p>这篇文章会以一个简单的例子，从应用程序和部署架构上分别讨论几种常见的模型。这篇文章是这个系列的第一篇，会讨论两个简单的主题：</p>

<ul>
<li>基于Session的用户认证</li>
<li>基于Token的RESTful API（使用Spring Security）</li>
</ul>


<h3>使用Session</h3>

<p>由于HTTP协议本身是无状态的，服务器需要某种机制来区分每个请求。比如在返回给客户的响应中加入一些ID，客户端再次请求时带上这个ID，这样服务器就可以区分出来每个请求，并完成事务性的操作（完成订单的创建，更新，商品派送等等）。</p>

<p>在多数Web容器中，这种机制通过Session来实现。Web容器会为每个首次请求创建一个Session，并将Session的ID以浏览器Cookie的方式返回给客户端。客户端（常常是浏览器）在后续的请求中带上这个Session的ID来表明自己的身份。这种机制同样被用在了鉴权方面，用户登录系统之后，系统分配一个Session ID给他。</p>

<p>除非Session过期，或者用户从客户端的Cookie中主动删了Session ID，否则在服务器端来看，用户的信息会和这个Session绑定起来。后台系统也可以随时知道请求某个资源的真实用户是谁，并以此来判断该用户时候真的有权限这么做。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Session的问题</h4>

<p>这种做法在小规模应用中工作良好，随着用户的增多，企业往往需要部署多台服务器形成集群来对外提供服务。在集群模式下，当某个节点挂掉之后，由于Session默认是保存在部署Web容器中的，用户会被误判为未登录，后续的请求会被重定向到登陆页面，影响用户体验。</p>

<p>这种将应用程序状态内置的方法已经完全无法满足应用的扩展，因此在工程实践中，我们会采用将Session外置的方式来解决这个问题。即集群中的所有节点都将Session保存在一个公用的键值数据库中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableRedisHttpSession</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpSessionConfig</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这个例子是在Spring Boot中使用Redis来外置Session。Spring会拦截所有对HTTPSession对象的操作，后续的对Session的操作，Spring都会自动转换为与后台的Redis服务器的交互，从而避免节点挂掉之后Session丢失的问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">spring</span><span class="o">.</span><span class="na">redis</span><span class="o">.</span><span class="na">host</span><span class="o">=</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">99.100</span>
</span><span class='line'><span class="n">spring</span><span class="o">.</span><span class="na">redis</span><span class="o">.</span><span class="na">password</span><span class="o">=</span>
</span><span class='line'><span class="n">spring</span><span class="o">.</span><span class="na">redis</span><span class="o">.</span><span class="na">port</span><span class="o">=</span><span class="mi">6379</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你跟我一样懒的话，直接启动一个redis的docker container就可以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run --name redis-server -d redis
</span></code></pre></td></tr></table></div></figure>


<p>这样，多个应用共享这一个实例，任何一个节点的终止、异常都不会产生Session的问题。</p>

<h3>基于Token的安全机制</h3>

<p>上面说到的场景中，使用Session需要额外部署一个组件（或者引入更加复杂的Session同步机制），这会带来另外的问题，比如如何保证这个节点的高可用，除了Production环境之外，Staging和QA环境也需要这个组件的配置、测试和维护。</p>

<p>很多项目现在会采用另外一种更加简单的方式：基于Token的安全机制。即不使用Session，用户在登陆之后，会获得一个Token，这个Token会以HTTP Header的方式发送给客户，同样，客户再后续的资源请求中也需要带着这个Token。通常这个Token还会有过期时间的限制（比如只能使用1周，一周之后需要重新获取）。</p>

<p>基于Token的机制更加简单，和RESTful风格的API一起使用更加自然，相较于传统的Web应用，RESTful的消费者可能是人，也可能是Mobile App，也可能是系统中另外的Service。也就是说，并不是所有的消费者都可以处理一个登陆表单！</p>

<h4>Restful API</h4>

<p>我们通过一个实例来看使用Spring Security保护受限制访问资源的场景。</p>

<p>对于Controller：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/protected&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProtectedResourceController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/{id}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Message</span> <span class="nf">getOne</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Message</span><span class="o">(</span><span class="s">&quot;Protected resource &quot;</span><span class="o">+</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要所有请求上都带有一个<code>X-Auth-Token</code>的Header，简单起见，如果这个Header有值，我们就认为这个请求已经被授权了。我们在Spring Security中定义这样的一个配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">http</span><span class="o">.</span>
</span><span class='line'>            <span class="nf">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">().</span>
</span><span class='line'>            <span class="n">sessionManagement</span><span class="o">().</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">).</span>
</span><span class='line'>            <span class="n">and</span><span class="o">().</span>
</span><span class='line'>            <span class="n">authorizeRequests</span><span class="o">().</span>
</span><span class='line'>            <span class="n">anyRequest</span><span class="o">().</span>
</span><span class='line'>            <span class="n">authenticated</span><span class="o">().</span>
</span><span class='line'>            <span class="n">and</span><span class="o">().</span>
</span><span class='line'>            <span class="n">exceptionHandling</span><span class="o">().</span>
</span><span class='line'>            <span class="n">authenticationEntryPoint</span><span class="o">(</span><span class="k">new</span> <span class="n">RestAuthenticationEntryPoint</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用<code>SessionCreationPolicy.STATELESS</code>无状态的Session机制（即Spring不使用HTTPSession），对于所有的请求都做权限校验，这样Spring Security的拦截器会判断所有请求的Header上有没有&#8221;X-Auth-Token&#8221;。对于异常情况（即当Spring Security发现没有），Spring会启用一个认证入口：<code>new RestAuthenticationEntryPoint</code>。在我们这个场景下，这个入口只是简单的返回一个401即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RestAuthenticationEntryPoint</span> <span class="kd">implements</span> <span class="n">AuthenticationEntryPoint</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">commence</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span><span class='line'>                         <span class="n">AuthenticationException</span> <span class="n">authException</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span> <span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_UNAUTHORIZED</span><span class="o">,</span> <span class="s">&quot;Unauthorized&quot;</span> <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候，如果我们请求这个受限制的资源：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl http://api.kanban.com:9000/api/protected/1 -s | jq .
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;timestamp&quot;</span>: 1462621552738,
</span><span class='line'>  <span class="s2">&quot;status&quot;</span>: 401,
</span><span class='line'>  <span class="s2">&quot;error&quot;</span>: <span class="s2">&quot;Unauthorized&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;Unauthorized&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;path&quot;</span>: <span class="s2">&quot;/api/protected/1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>过滤器（Filter）及预认证（PreAuthentication）</h4>

<p>为了让Spring Security可以处理用户登录的case，我们需要提供一个<code>Filter</code>。当然，Spring Security提供了丰富的<code>Filter</code>机制，我们这里使用一个预认证的<code>Filter</code>（即假设用户已经在别的外部系统如SSO中登录了）:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KanBanPreAuthenticationFilter</span> <span class="kd">extends</span> <span class="n">AbstractPreAuthenticatedProcessingFilter</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SSO_TOKEN</span> <span class="o">=</span> <span class="s">&quot;X-Auth-Token&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SSO_CREDENTIALS</span> <span class="o">=</span> <span class="s">&quot;N/A&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KanBanPreAuthenticationFilter</span><span class="o">(</span><span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setAuthenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">getPreAuthenticatedPrincipal</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="n">SSO_TOKEN</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">getPreAuthenticatedCredentials</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SSO_CREDENTIALS</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>过滤器在获得Header中的Token后，Spring Security会尝试去认证用户：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">builder</span><span class="o">.</span><span class="na">authenticationProvider</span><span class="o">(</span><span class="n">preAuthenticationProvider</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">AuthenticationProvider</span> <span class="nf">preAuthenticationProvider</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PreAuthenticatedAuthenticationProvider</span> <span class="n">provider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PreAuthenticatedAuthenticationProvider</span><span class="o">();</span>
</span><span class='line'>    <span class="n">provider</span><span class="o">.</span><span class="na">setPreAuthenticatedUserDetailsService</span><span class="o">(</span><span class="k">new</span> <span class="n">KanBanAuthenticationUserDetailsService</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">provider</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>KanBanAuthenticationUserDetailsService</code>是一个实现了Spring Security的UserDetailsService的类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KanBanAuthenticationUserDetailsService</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">AuthenticationUserDetailsService</span><span class="o">&lt;</span><span class="n">PreAuthenticatedAuthenticationToken</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">UserDetails</span> <span class="nf">loadUserDetails</span><span class="o">(</span><span class="n">PreAuthenticatedAuthenticationToken</span> <span class="n">token</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">principal</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">token</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(!</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">principal</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">KanBanUserDetails</span><span class="o">(</span><span class="k">new</span> <span class="n">KanBanUser</span><span class="o">(</span><span class="n">principal</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类的职责是，查看从<code>KanBanPreAuthenticationFilter</code>返回的<code>PreAuthenticatedAuthenticationToken</code>，如果不为空，则表示该用户在系统中存在，并正常加载用户。如果返回null，则表示该认证失败，这时根据配置，Spring Security会重定向到认证入口<code>RestAuthenticationEntryPoint</code>。</p>

<p>加上这个过滤器的配置之后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="n">http</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="n">headerAuthenticationFilter</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Bean</span>
</span><span class='line'><span class="kd">public</span> <span class="n">KanBanPreAuthenticationFilter</span> <span class="nf">headerAuthenticationFilter</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">KanBanPreAuthenticationFilter</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，当我们在Header上加上<code>X-Auth-Token</code>之后，就会访问到受限的资源了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -H <span class="s2">&quot;X-Auth-Token: juntao&quot;</span> http://api.kanban.com:9000/api/protected/1 -s | jq .
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;content&quot;</span>: <span class="s2">&quot;Protected resource for 1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>下一篇文章会以另外一个方式来完成鉴权机制和系统的集成问题。我们会在反向代理中做一些配置，将多个Endpoint组织起来。要完成这样的功能，使用Spring Security也可以做到，不过可能会为应用程序本身引入额外的复杂性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CI上的Web前端性能测试]]></title>
    <link href="http://abruzzi.github.com/2016/02/performance-testing-in-ci/"/>
    <updated>2016-02-20T18:18:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/02/performance-testing-in-ci</id>
    <content type="html"><![CDATA[<h2>Web站点的响应速度</h2>

<p>雅虎在2006年就发布了一份提升Web站点响应速度的<a href="https://developer.yahoo.com/performance/rules.html">最佳实践指南</a>。该指南包含了35条规则，分为7个类别。这些规则已经被广泛使用，并指导人们在新的站点设计时更有针对性的考虑问题。这份指南已经成了Web前端性能度量的一个事实标准了。</p>

<p><a href="http://yslow.org/">YSlow</a>是一个基于这份指南的测试工具，它可以测试一个站点是否“慢”，以及为什么“慢”？你可以通过很多方式来使用<a href="http://yslow.org/">YSlow</a>，比如Firefox，Chrome的插件，命令行工具，甚至PhantomJS这样的无头（Headless）浏览器。YSlow会检测你的站点中的资源是否没有压缩，是否缺失了超时设置，更进一步，它还会检测你的JS/CSS是否已经压缩/精简化，图片的尺寸，是否使用了CDN等等很多的维度。它还可以生成很多格式的报告，比如打分信息，TAP协议的输出，以及junit测试报告的格式。</p>

<p>我们这里讨论如何在持续集成服务器上设置一个<code>YSlow</code>任务，这个任务会在每次构建之后，测试你应用的性能指标，以帮助你更快的发现和定位问题。当然，我推荐你在<code>staging</code>环境，很多开发者在测试环境，本地开发环境都会启动很多对<code>Debug</code>友好的设置，比如未压缩的JS/CSS，没有超时设置的响应等，这会导致该构建任务的<code>打分</code>不够准确。</p>

<p><img src="http://abruzzi.github.com/images/2016/02/jenkins-report-resized.png" alt="jenkins failure" /></p>

<h3>搭建CI环境</h3>

<p>按照传统方式，如果要搭建一个这样的CI任务，我们需要至少做这样一些事情：</p>

<ul>
<li>安装JDK</li>
<li>安装Jenkins</li>
<li>安装<a href="http://phantomjs.org/">PhantomJS</a></li>
<li>安装<a href="http://yslow.org/phantomjs/">YSlow.js脚本</a></li>
</ul>


<p>然后设置环境变量，在Jenkins上创建任务，并运行YSlow.js脚本。这个任务很简单，只需要设置好参数，然后将结果输出为Jenkins上的报告即可。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>phantomjs /var/share/yslow.js -i grade -threshold <span class="s2">&quot;B&quot;</span> -f junit <span class="se">\</span>
</span><span class='line'>http://bookmarks-frontend.s3-website-us-west-2.amazonaws.com/ &gt; yslow.xml
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-i grade</code> 展示打分（grade）信息（还可以是basic/stats/all）等</li>
<li><code>-threshold "B"</code> 指定失败的阈值为B</li>
<li><code>-f junit</code> 输出为<code>junit</code>识别的XML格式</li>
</ul>


<p>这里的阈值可以是数字（0-100分），字母（A-F级别）或者一个JSON字符串（混合使用）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>-threshold <span class="s1">&#39;{&quot;overall&quot;: &quot;B&quot;, &quot;ycdn&quot;: &quot;F&quot;, &quot;yexpires&quot;: 85}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令会测试站点<code>http://bookmarks-frontend.s3-website-us-west-2.amazonaws.com/</code>的各项指标，并应用雅虎的那35条规则，并最终生成一个<code>junit</code>测试报告格式的文件：<code>yslow.xml</code>。</p>

<p>但是维护CI环境是一个比较麻烦的事情，而且既然每个项目都可能会用到这样的<code>基础设施</code>，一种好的做法就是将其做成一个<code>镜像</code>保存起来，以方便其他项目的复用！这里我们使用<code>docker</code>来安装和配置我们的CI环境，配置完成之后，我们可以将<code>docker</code>的镜像分享给其他团队，也可以供我们在下一个项目中使用。</p>

<h3>基于docker/docker-compose的环境搭建</h3>

<p>在<a href="https://www.docker.com/">docker</a>出现之前，我们要搭建一个<code>测试</code>或者<code>staging</code>环境，往往需要很多个不同角色的机器：有专门的数据库服务器，文件服务器，缓存服务器，Web服务器，反向代理等等。这样在成本上显然是个不小的开销，如果将所有不同的组件部署在同一台机器上，则又可能互相干扰，只需要一个小小的失误，整个系统就需要重新配置。更可怕的是，这个环境和生产系统不一致，那么很可能真实的错误要等到系统上线之后才会被发现。</p>

<p>比如在2012年，我所在的一个项目中，客户的系统采用传统的J2EE架构。本地开发中，我们使用了Jetty作为容器，而<code>测试</code>和<code>Staging</code>环境使用了Tomcat。由于Tomcat对空格的处理和Jetty有所不同，我们在本地测试通过，并且运行良好的代码，在<code>Staging</code>变得完全不能工作。这个问题花费了团队很多时间来排查错误。</p>

<p>在<code>docker</code>出现之后，我们可以在一台物理机器上运行多个互不干涉的容器，每个容器可以是一个组件（比如运行数据库的容器，Web服务器容器等等）。这样不但缩减了成本，而且可以让我们的环境尽可能和生产环境一致（有的项目甚至直接将CI出来的镜像应用到生产中）。不过对多个容器的管理是一个很麻烦的事情，好在<code>docker</code>提供了<a href="https://docs.docker.com/compose/overview/">docker-compose</a>工具来解决这个问题。使用<code>docker-compose</code>可以定义一组互相独立，但是又可以协作在一起的容器，这样我们可以很容易的搭建一个<code>仿生产</code>环境。</p>

<p>比如我们可以定义个<code>docker-compse.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
</span><span class='line'>  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db:postgres</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8000:8000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">.:/app</span>
</span><span class='line'>  <span class="l-Scalar-Plain">working_dir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/app</span>
</span><span class='line'>  <span class="l-Scalar-Plain">entrypoint</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/app/start.sh</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">JDBC_DATABASE_URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jdbc:postgresql://postgres:5432/bookmarks</span>
</span><span class='line'>    <span class="l-Scalar-Plain">DATABASE_USER</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bookmarks-user</span>
</span><span class='line'>    <span class="l-Scalar-Plain">DATABASE_PASS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bookmarks-password</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres:9.3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5432:5432</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">POSTGRES_DB</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bookmarks</span>
</span><span class='line'>    <span class="l-Scalar-Plain">POSTGRES_USER</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bookmarks-user</span>
</span><span class='line'>    <span class="l-Scalar-Plain">POSTGRES_PASSWORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bookmarks-password</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个<code>docker-compose</code>定义了两个组件，<code>app</code>和<code>db</code>。<code>db</code>使用了<code>postgres:9.3</code>镜像，并设置了自己的环境变量。<code>app</code>则从当前目录<code>.</code>构建一个新的镜像，<code>app</code>与<code>db</code>通过<code>links</code>属性连接起来。</p>

<p>如果在当前目录执行<code>docker-compose build</code>命令，<code>docker-compose</code>会找到本地的<code>Dockerfile</code>，然后构建出一个<code>docker</code>的镜像，并启动该容器，同时，它还会启动<code>postgres:9.3</code>容器作为数据库组件。这样我们的环境就被完整的搭建好了。</p>

<h4>搭建CI环境</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8080:8080</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">50000:50000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./data:/var/jenkins_home</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个配置，表明我们会根据当前目录的<code>Dockerfile</code>来构建一个镜像。</p>

<p>通过命令<code>volumns</code>，我们将本地目录<code>./data</code>映射为<code>jenkins_home</code>，这样我们定义的job信息，以及插件的安装都会放到本地的目录中，方便管理。配置完成之后，构建并启动该容器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">FROM jenkins:latest</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain"># Env</span>
</span><span class='line'><span class="l-Scalar-Plain">ENV PHANTOMJS_VERSION 1.9.6</span>
</span><span class='line'><span class="l-Scalar-Plain">ENV PHANTOMJS_YSLOW_VERSION 3.1.8</span>
</span><span class='line'><span class="l-Scalar-Plain">ENV SHARE_BIN /var/share</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain"># Install stuff by using root</span>
</span><span class='line'><span class="l-Scalar-Plain">USER root</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN apt-get update</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN apt-get upgrade -y</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN apt-get install -y git wget libfreetype6 libfontconfig bzip2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">RUN mkdir -p $SHARE_BIN</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">RUN wget -q --no-check-certificate -O /tmp/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2 \</span>
</span><span class='line'><span class="l-Scalar-Plain">https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN tar -xjf /tmp/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2 -C /tmp</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN rm -f /tmp/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN mv /tmp/phantomjs-$PHANTOMJS_VERSION-linux-x86_64/ $SHARE_BIN/phantomjs</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN ln -s $SHARE_BIN/phantomjs/bin/phantomjs /usr/bin/phantomjs</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">RUN wget -q --no-check-certificate -O /tmp/yslow-phantomjs-$PHANTOMJS_YSLOW_VERSION.zip \</span>
</span><span class='line'><span class="l-Scalar-Plain">http://yslow.org/yslow-phantomjs-$PHANTOMJS_YSLOW_VERSION.zip</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN unzip /tmp/yslow-phantomjs-$PHANTOMJS_YSLOW_VERSION.zip -d $SHARE_BIN/</span>
</span><span class='line'><span class="l-Scalar-Plain">USER jenkins</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行下面的命令来设置并启动CI服务器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker-compose up
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2016/02/jenkins-in-docker-resized.png" alt="jenkins in docker" /></p>

<p>创建新任务，并指定该任务执行的命令为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>phantomjs /var/share/yslow.js -i grade -threshold <span class="s2">&quot;B&quot;</span> -f junit <span class="se">\</span>
</span><span class='line'>http://bookmarks-frontend.s3-website-us-west-2.amazonaws.com/ &gt; yslow.xml
</span></code></pre></td></tr></table></div></figure>


<p>由于此时<code>phantomjs</code>已经被安装到了容器中，我们可以直接在jenkins中使用。运行结束之后，这个命令会生成一个报告：</p>

<p><img src="http://abruzzi.github.com/images/2016/02/jenkins-report-resized.png" alt="jenkins failure" /></p>

<ul>
<li>没有压缩内容</li>
<li>没有添加过期的头信息</li>
</ul>


<p>在产品环境，我们需要使用反向代理来添加这些头信息，以保证最终用户在使用Web站点时的体验。</p>

<h3>总结</h3>

<p>我们只需要很少的配置就可以设置好一个工作良好的CI任务，这样在程序员某天引入了未经压缩的JS/CSS或者UX不小心提供了巨大而未经处理的图片时，你可以尽快的得到通知，并在正是上线之前发现这些问题。</p>

<p><a href="https://github.com/abruzzi/phantomjs-yslow">代码配置</a>在这里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术的执念]]></title>
    <link href="http://abruzzi.github.com/2016/02/pitfall-of-technology/"/>
    <updated>2016-02-14T17:34:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/02/pitfall-of-technology</id>
    <content type="html"><![CDATA[<h2>知识漩涡</h2>

<p>只需稍加留意，我们就会发现自己被各种技术，工具包围。<a href="https://www.thoughtworks.com/radar">ThoughtWorks的技术雷达</a>差不多每隔半年就会更新一次，而项目中更是会遇到很多已经从技术雷达上消失的技术，项目上的旧技术/旧框架还在服役，新的技术/工具/语言/框架又在迅速的出现，有些昙花一现，迅速被新的后来者取代，有的留下来了，不过也都在不断的演化，改变（不兼容的API，不同的版本等等随处可见）。</p>

<p>如果你不幸是一个前端工程师，那么这个更新速度还要更加迅速。三年前<code>Backbone</code>是主流，两年前是<code>Angular.js</code>，去年是<code>React</code>，紧接着<code>Flux</code>，<code>Reflux</code>等作为React的扩展而成为了新的主流；<code>Grunt</code>流行过一段时间，很快被<code>Gulp</code>替代，而新的<code>Webpack</code>又依稀有大一统的趋势。每周几乎都能看到新的框架涌现，双向绑定，虚拟DOM，事件代理，同构，后端渲染，更友好的语法糖，更快的执行速度等等等等，几乎任何一个方向都有无穷无尽的变化。</p>

<p><img src="http://abruzzi.github.com/images/2016/02/full-stack-js-resized.png" alt="full stack js" /></p>

<p>而后端也好不到哪里去，容器技术，Web框架，ORM，构建脚本，自动化测试工具，依赖管理，应用服务器等等，你总有很多的选项，却又无法在事先区分到底哪个技术/工具更靠谱，更适合项目。</p>

<p>置身其中，往往有眼花缭乱，应接不暇的感觉。知识工作者当然需要<strong>终身不断</strong>的学习，但是像目前这种节奏，我很怀疑这是一种健康的状态。周围经常有人抱怨，好不容易上手了一个前端的MVC框架，一看周围的项目，大家已经在spike另外的框架/工具了（这意味着你在项目上无法使用该框架了……）。仅仅从学习的速度上来讲，我们已经远远无法跟上科技演化的节奏了，这是<strong>人类</strong>自身的一种限制。</p>

<h3>知识的陷阱</h3>

<p>假设你在一个<code>Ruby</code>项目上，学习了<code>Rails/ActiveRecord/RSpec/MySQL</code>。如果下一个项目还是<code>Ruby</code>，同样的技术站，你会觉得这是一种重复，因为除了业务逻辑、业务对象变化了之外，并没有新的内容，还是<strong>同样的</strong>技术。如果下一个项目是<code>Python</code>，技术栈变成了<code>Django/nose/PostgreSQL</code>，你可能会觉得有所提升，因为学到了不同的技术，框架，共建工具，测试工具等等，其实仔细观察，这还是一种重复，古人云：“换汤不换药”者，是也。</p>

<p>在目前我们所处的时代，信息以远远超过人们能接受的速度不断的被创造出来，一方面信息传播的速度大大提升了，另一方面是信息传播的渠道也极具多样化。我们无时无刻不被过载的信息包围着，即使你不主动的去尝试获取新的信息，手机App里的微信，微博，Flipboard，Pocket，知乎，开发者头条，Feedly，果壳，丁香园等等的推送已经足以提供给你足够的信息（大部分甚至都来不及消费就变成了历史信息而被忽略）。</p>

<p>以我自己为例，从2015年10月到现在（2016年2月），我学习了很多东西，看一下下面这张图：</p>

<p><img src="http://abruzzi.github.com/images/2016/02/tech-tree.png" alt="tech tree" /></p>

<p>图中的灰色方框中的内容是项目要求的知识，另外的则是我根据自己的兴趣学习的（两者基本上各占一半）。事实上有很多内容（尤其是根据自己兴趣学习的）在真正要使用时，可能还需要学一遍。这些内容可能让我产生了<strong>我学到了好多东西</strong>的错觉。其实这个在另一个角度显现了技术人员的一个误区：以为自己可以掌握所有软件开发相关的知识（或者说太过于纵容自己的好奇心和兴趣）。</p>

<h2>过载的信息</h2>

<p>身处这样的信息过载环境，我们很难不为自己对信息的缺乏而感到不安，担心自己错过了什么重要的信息，这种担心和焦虑会促使我们进一步将时间消耗在对信息的获取上，从而更无暇思考什么是真正重要的。</p>

<p><a href="http://book.douban.com/subject/1013208/">《如何阅读一本书》</a>将书分为两类：一种是提供资讯/信息（known）的，一种是帮助你理解（understand）信息的。相对于理解来讲，资讯本身其实并不那么重要。我们大部分人目前采用的碎片化的阅读方式无法提供给我们足够的“理解力”。我们都有这样的体验，有些书特别耗费脑力，读起来很累，而另一些书则非常轻松，易于消费。碎片话的阅读方式易于消费，只需要很少的思考就可以读懂，但是危害严重，它们并不会让帮助你提升理解力。</p>

<p>但是直觉上我们会选择容易的事情来做，虽然这种浅层次的阅读只对扩展信息/资讯有帮助，对提升理解力则几乎无用。而我们在处理日常工作中的问题时，能真正帮助的，只有理解了的那部分知识。我在2014年，曾经有几个月屏蔽了所有微信，微博，内容聚合类的应用，也尽量少的去技术论坛，每天就是写代码，读纸质书，除了最初几天的忐忑之外，整个过程的收获非常大（而且也没有漏掉任何重要的信息）。</p>

<h3>知识框架</h3>

<p>技术人员有时候会有一种想要把所有技术都掌握的<code>执念</code>，这在局外人来看是一种荒诞不经的想法，但是置身其中，你很难看出这一点。毕竟，有意思的东西是在太多了，各种范式的编程语言，编译器技术，人工智能，数据可视化，地理信息系统，嵌入式设备，软硬件结合，大数据，自动化测试等等，每一个方向都有无穷无尽的有意思的东西。</p>

<p>但是在知识规模如此巨大的今天，一个人是无法掌握所有技术的（更不用说新的技术还在不断的涌现出来）！这就要求我们有节制的来聚焦在某些技术上，而视其他技术如无物。当然这需要很大的勇气和魄力，不过唯有如此，技术人员才有可能有真正的长进和成就。</p>

<p>我基于自己的经验，绘制了一个<code>Web开发</code>方面的知识框架，这个框架上包含了一个比较全的技能/知识集合，也是我认为一个<code>Web开发</code>人员应该掌握的一些知识点。</p>

<p><img src="http://abruzzi.github.com/images/2016/02/knowledge-framework.png" alt="knowledge framework" /></p>

<p>在成为一个专家之前，你需要先对要学习的领域有一个全面的认识。也就是说，做<code>Web开发</code>，需要尽可能覆盖到这个框架上的所有点。一旦完成了这棵树上的所有节点，就不用再去做第二次了，这时候你可以尝试找到树上的某一个分支，深入下去。这个听起来好像和我之前文章中的观点有所矛盾，其实不然。我在<a href="http://icodeit.org/2015/06/do-we-really-short-for-front-end-developer/">《我们真的缺前端工程师》</a>一文中提到过，工程师不应该将自己束缚在前端开发上，要了解整个软件开发的全生命周期。这里的观点其实是一致的，即首先要了解软件开发全生命周期中的所有节点，然后再有所侧重的去找自己的兴趣点来发展，即：先建立广度，再建立深度。</p>

<h2>应对方法</h2>

<h3>对于知识的陷阱</h3>

<p>当因自己的兴趣（而不是项目驱动，也就是没有实际的土壤来验证）而想要学习一个新的知识时，对照<code>知识框架</code>，如果发现你已经在历史上学过它了，那就强迫自己放弃这个念头。比如如果你很熟悉用<code>rspec</code>来编写测试，忽然有一天心血来潮，想要学习JUnit，正确的做法就是泡杯茶，等这种冲动自己过去。相信我，一旦有了Java项目，你可以非常快速的掌握JUnit，而且很快会找到对应的feature，就像一个长期工作在Java技术栈上的同事那样！</p>

<h3>对于过载的信息</h3>

<p>实践中，首先要令自己相信：<code>你无法掌握所有的知识，即使仅仅在软件开发领域</code>。有了这个大前提之后，你只需要采取<code>先建立广度，再建立深度</code>的原则即可：</p>

<ul>
<li>做减法（在建立了<code>知识框架</code>之后，有针对性的学习）</li>
<li>主动，深度阅读经典</li>
<li>为那些<code>有趣但非自己关注方向</code>的知识赋予较低的优先级</li>
</ul>


<p>另外，还可以尝试将微信，微博关闭一段时间，或者至少可以不去点那些朋友圈里的<code>《老X聊微服务》</code>或者<code>《12个你不知道的Sublime技巧》</code>文章，保持专注，保持简单。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不想当UX的开发不是好咨询师]]></title>
    <link href="http://abruzzi.github.com/2016/01/for-those-dev-who-doesnt-want-to-be-a-ux-cannot-be-a-good-consulant/"/>
    <updated>2016-01-31T23:04:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/01/for-those-dev-who-doesnt-want-to-be-a-ux-cannot-be-a-good-consulant</id>
    <content type="html"><![CDATA[<h2>成为咨询师</h2>

<p>本文旨在帮助<code>开发</code>完成向<code>咨询师</code>的转变，内容不但涉及向<code>UX</code>学习，还包括思维方式的转变。我尽量采用一些亲历的例子来说明该如何做，也会适当的解释为什么需要这样做。不过在展开详细讨论之前，首先来澄清这里提到的三种角色。</p>

<h3>开发（Developer）角色</h3>

<p><code>开发</code>是指那些喜欢写代码，享受写代码，喜欢纯粹，讨厌办公室政治，永远穿T恤的有些偏执的程序员。跟他们打交道，有这样一些注意事项：</p>

<ul>
<li>不要让他们帮你盗<code>QQ</code>号</li>
<li>不要让他们帮你修电脑或者装Windows系统</li>
<li>不要跟他们讨论<code>人文/政治</code>类的问题</li>
</ul>


<p><code>开发</code>往往还单纯的可爱，除此之外，他们还有这样一些特点：</p>

<ul>
<li>逻辑清晰</li>
<li>与人争辩时往往可以通过清晰的逻辑而获胜</li>
<li>单身</li>
</ul>


<p>业界已经有很多关于<code>开发</code>的描述了，我这里也有一个描述<code>开发</code>的列表：</p>

<p><del>
当然，要严格界定一个人是不是<code>开发</code>是非常困难的，大多数情况下，他们沉默寡言，遇到程序中的bug或者在调试某些库的问题时眼神呆滞，口中念念有词，他们不太喜欢和陌生人说话，在晚上精神充沛，白天则显得有些呆滞，喜欢喝咖啡，相信世界上有绝对的正确和错误，往往会带着非黑即白的二分法来看待事物，生活很难自理，喜欢机械键盘/电子设备，周末宁愿宅在家里写代码也不去做社交……
</del></p>

<h3>用户体验设计师（UX）</h3>

<p><code>UX</code>是指用户体验设计师，在本文的上下文中，更偏向与非<code>视觉设计</code>的那些设计师（产品设计师）。在项目中，他们会做用户调研，竞品分析，信息架构简历，交互设计（纸上原型，低保真）等活动，并负责开发纸上原型，验证这些原型等。</p>

<p>和<code>UX</code>打交道，也有一些应该注意的点，比如：</p>

<ul>
<li>不要叫他们美工</li>
<li>不要对他们说诸如：“帮我美化一下这个页面”，“这个颜色得再亮一些”之类的话</li>
<li>不要跟他们讲关于程序员的笑话</li>
</ul>


<p>事实上，人们对<code>UX</code>的误解很深。提到<code>UX</code>人们的第一反应是<code>PhotoShop</code>，P图/切图。这仅仅是他们日常工作中很小的一部分。大部分<code>UX</code>还要做很多用户研究，信息架构整理的事情。老实说，我在去年5月之前的对<code>UX</code>的认识和大部分<code>开发</code>的认识是一样的，但是在后来的项目上和多个<code>UX</code>合作过之后，我彻底改变了原先那种偏见，开始敬佩他们，并向他们学习。</p>

<p>设计工作可以细分为这样一些不同的方面（图片来源网络）：</p>

<p><img src="http://abruzzi.github.com/images/2016/01/jjg-resized.png" alt="JJG" /></p>

<p><code>UX</code>的一项特别的技能在于能从复杂的现实世界中抽象出清晰的信息（用户画像，体验地图甚至最后的用户故事）。这项技能不但重要，而且还很牛逼。</p>

<h4>知识的诅咒</h4>

<p><a href="https://book.douban.com/subject/25782902/">《反脆弱》</a>里有个有意思的例子：人们仅仅创造了非常有限的词汇来描述颜色，比如蓝色，红色，而任何一个视觉正常的人都可以轻松的识别出数百种不同的颜色。也就是说，人们可以很轻松的理解相当复杂的事物，但是很难向别人描述该事物（想象一下向别人描述一只<code>章鱼</code>的颜色）。</p>

<p>人们对于现实世界中的事情（特别是复杂的业务场景）往往只能意会而很难言传，再加上知识的诅咒（我在<a href="http://icodeit.org/2015/08/how-to-write-a-book/">《如何写一本书》</a>里，详细讨论了这种常见的陷阱）的存在，当用户在描述A的时候，在没有上下文的人听来，很可能是B或者C。这种情况在软件开发中非常常见，也是很多项目之所以延期的原因（大量并无必要的返工，需求澄清等）。</p>

<p>在项目前期，<code>UX</code>需要和客户坐在一起，将客户的需求分析清晰。分析细节包括业务场景，用户画像生成，信息架构，体验地图等等，这些信息并不是天然就显现的，恰恰相反，它们需要UX经过很多轮的辛苦引导，从用户的脑海里<code>提取</code>出来的。</p>

<p>这里需要<code>UX</code>的核心能力是：</p>

<ul>
<li>有目的的抛出问题，引导客户进行发散</li>
<li>有节奏的收敛，形成共识</li>
<li>不断修正过程中的错误</li>
<li>可视化能力（这可能是大部分人觉得唯一和UX相关的点）</li>
</ul>


<h3>咨询师</h3>

<p><code>咨询师</code>是指那些根据自己的丰富经验来帮助客户解决具体问题的人。这些问题并不一定局限在技术上 —— 比如架构的设计，具体前端/后端技术的选定，还包括一些流程的改善。比如引入新的<code>工程实践</code>来缩减项目的周期时间，帮助团队发现问题，建设团队的能力，作为各个团队间的润滑剂帮助项目成功等等。</p>

<p><code>咨询师</code>工作中的一个常见的场景是：</p>

<ul>
<li>列出目前遇到的问题</li>
<li>确定各个问题的优先级（和各个利益方）</li>
<li>制定方案</li>
<li>给方案加上时间，形成计划</li>
<li>细化计划中的条目，并促成它</li>
</ul>


<h4>引导/启发</h4>

<p>我在印度的某一期<code>TWU</code>当教练的时候，发现了一个很有意思的现象，国外的同事在组织培训时更强调用<code>引导</code>/<code>启发</code>的方式，让学生们自己得出结论，并在课堂上进行讨论，以期教学相长。只有在过程中有<code>启而不发</code>的情况出现时，教练才会适当抛出自己的开发，并再次启动讨论。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/twu22-resized.png" alt="TWU 33" /></p>

<p>与我一直的认识不同的是，这种方式效果很好。通过一些适当的启发，学生很容易自己讨论出一些有趣的看法，然后教练在这个基础上做一些总结，并帮助他们分析不同看法/想法之间的优劣。</p>

<p>我非常认同这种模式，后来自己组织的其他培训/workshop也都尽量采取这种方式。咨询师在客户现场，也应该采取这种<code>引导</code>的方式帮助团队来完成能力建设，而不是事必躬亲。</p>

<h2>角色转化</h2>

<p>从<code>开发者</code>视角切换到<code>咨询师</code>的第一要诀就是：让团队解决自己遇到的问题！乍听起来，<code>咨询师</code>好像变成一个多余的角色了：既然团队自己可以搞定，还要<code>咨询师</code>干什么呢？<code>咨询师</code>的职责是让团队意识到问题，理清思路，制定解决方案，并逐步实施。</p>

<h3>使能/赋能</h3>

<p>我们来看一个简单的例子：在客户现场，你发现团队往往在集成时会花费很多额外的时间和返工，开发过程中大家各自为政，没有人知道一次commit会给软件包造成什么影响。</p>

<p>如果你是一个<code>咨询师</code>，应该如何解决这个问题？一个常犯的错误是，直接上手帮助团队搭建<a href="http://www.martinfowler.com/articles/continuousIntegration.html">持续集成</a>（CI）环境，并设置CI纪律（比如build红了不许过夜，红的时候其他人都不许commit等）。</p>

<p>一种更好的做法是：做为<code>咨询师</code>，首先需要帮助团队认识到这个问题，你需要让所有人都知道，我们现在的问题是什么。在所有人都清楚了这一点之后，你需要提出（或者<code>引导</code>出）持续集成的概念（因为根据经验，这是一种可以很好的解决集成时额外的返工现象的好办法）。</p>

<p>但是对于不熟悉<code>持续集成</code>的团队来说，搭建一个持续集成环境是一个非常<code>复杂</code>的任务。因此你需要分解这个任务为一些更小的，可以被解决的问题。</p>

<ul>
<li>申请虚拟机资源</li>
<li>安装<a href="https://jenkins-ci.org/">jenkins</a>（包括安装JVM，创建用户等）</li>
<li>配置本地构建脚本到jenkins（构建脚本，自动化测试等）</li>
<li>申请显示器资源（作为CI Monitor）</li>
<li>将结果显式在CI Monitor上</li>
</ul>


<p>有了任务之后，你需要分别为这些子任务分配owner。对比搭建<code>持续集成环境</code>这样的大任务，这些小的任务已经非常具体，更重要的是，他可以被团队中任何人理解并解决。</p>

<h3>学习做引导</h3>

<p>除了思维方式的转变，以及自身过硬的专业技能（比如clean code/重构能力，自动化测试，DevOps，持续交付经验等）之外，开发者需要从<code>UX</code>那里学习如何发现问题，并将问题可视化出来的技能。</p>

<p>当你发现团队面临某个问题是，可以通过组织一个类似<code>头脑风暴</code>的会议来帮助团队梳理：</p>

<ul>
<li>提出问题</li>
<li>维护会议纪律，保证所有人都贡献自己的想法</li>
<li>将想法/问题归类</li>
<li>找出问题的解决方案</li>
<li>制定计划（包括时间点和owner）</li>
</ul>


<p>关于如何做引导的详细信息，还可以参考我的<a href="http://icodeit.org/2016/01/how-to-facilitate/">上一篇文章</a>。</p>

<h3>进一步的阅读</h3>

<p>除了上边提到的</p>

<ol>
<li>思维方式的转变</li>
<li>向<code>UX</code>学习引导的技巧</li>
</ol>


<p>之外，事实上还有很多技巧和内容需要学习：</p>

<ul>
<li><a href="https://book.douban.com/subject/25899338/">《引导的秘诀》</a></li>
<li><a href="https://book.douban.com/subject/10433731/">《视觉会议》</a></li>
<li><a href="https://book.douban.com/subject/4051739/">《第五项修炼》</a></li>
<li><a href="https://book.douban.com/subject/1156866/">《系统思考》</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当我们谈论引导时，我们谈些什么？]]></title>
    <link href="http://abruzzi.github.com/2016/01/how-to-facilitate/"/>
    <updated>2016-01-23T23:42:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/01/how-to-facilitate</id>
    <content type="html"><![CDATA[<h2>什么是引导（facilitation）</h2>

<p>引导（facilitation）的词根来源与拉丁语“facil”，意思是“让……更容易”。而负责引导的<code>引导师</code>（facilitator）的核心职责是，通过一系列的活动、技巧，保证引导会议顺畅的进行，并解决整个过程中的问题，使得参与者就问题产生一个共识，达成一个结论。</p>

<p>其中可能涉及很多具体的问题，比如几乎在每个会议中都可能看到的：</p>

<ul>
<li>如果有人尝试将会议变成一言堂，如何处理？</li>
<li>如果参与者不愿意分享自己的观点，如何处理？</li>
<li>过程中，两个参与者产生了争执，如何处理？</li>
<li>如何把握节奏，刺激与会者发散？</li>
<li>如何在收集到足够信息后，进行收敛？</li>
</ul>


<p>显然，这是一个技术活儿。一次好的引导可以将与会者的众多想法，信息聚合起来，形成对团队下一步要做什么有极强指导意义的<code>方案</code>。</p>

<h2>日常的引导活动</h2>

<p>在平时的工作中，我们其实已经在频繁的使用引导活动，但是很少有人将其作为体系来关注，也很少有人能将这个能力应用在其他方面（比如在客户现场咨询，或者参加售前等）。引导是如此的常见，以至于我们对其视而不见。比如在interview完成之后，所有面试官和HR一起做的well/less well的列举；各种社区活动（Open Party，CDConf等）之后的回顾；每个项目在一个迭代结束后的Retro；对于某个问题的头脑风暴等等。</p>

<h3>项目回顾会议</h3>

<p>在开始前，引导师需要保证团队：</p>

<ul>
<li>每个人都有开发的态度</li>
<li>整个过程需要在一个足够安全的环境中进行（Safe Check）</li>
</ul>


<p>有时候，有Team Lead在场，新人可能不愿意对某事（比如最近加班有点过分）发表自己的看法等。这时候需要有<code>Safe Check</code>，比如分为1到5档，大家用不记名投票的方式来表述自己是否觉得安全。如果投票结果显示大部分人都觉得不安全，则需要与会的人中，职位最高的那个人离开会议，然后再做一次<code>Safe Check</code>，直到大家都觉得足够安全。不过，对于已经进行过多轮回顾的团队，我们往往会忽略掉这一步。</p>

<p>Retro过程是，团队坐在一起，回顾上一个迭代（通常是两个星期）做过的事情，有哪些做的比较好，哪些有待改进，有哪些疑惑等等。Retro可以有很多的形式，比如简单的<code>Well/Less Well/Questions</code>，更聚焦在产生<code>Action</code>的海星式等等。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/pens-resized.png" alt="pens" /></p>

<p>通常的顺序是：</p>

<ol>
<li>引导者请大家用纸笔将想法写在便签（stick）上</li>
<li>Time box这个过程（通常是5分钟）</li>
<li>大家将这些stick贴在墙上</li>
<li>引导者和团队一起过一遍所有的stick</li>
<li>归类相似的stick</li>
<li>引导者促进团队交流，讨论stick上的问题，并形成一些改进点（Action）</li>
</ol>


<p>Action一定要足够具体，并且需要一个所有者，<code>所有者</code>负责确保该<code>Action</code>一定会发生。比如团队发现上一个迭代中<code>Code review</code>做的不够好，一个<code>Action</code>就是每天下午5点有人来提醒大家来进行<code>Code review</code>。</p>

<p>如果这时候发现有太多的问题，团队可以用投票的方式选出本次Retro要讨论的数个stick。</p>

<h3>引导会议</h3>

<p>在日常工作中，我们几乎每天都有会议，而且越来越多的团队已经意识到冗长，无聊的会议有多大的杀伤力了。在很多会议上，与会者要么在刷新朋友圈，要么在对着笔记本电脑写代码或者读新闻，即使强制要求不许带电脑和手机的情况下，也无法限制参加者神游太虚。</p>

<p>根据《引导的秘诀》这本书里的定义，引导会议是</p>

<pre><code>引导会议是一个高度结构化的会议，会议中的领导者（引导者）引导参会人通过预先设定好的步骤达成所有参会人产生，理解并接受的结果。
</code></pre>

<p>引导会议需要充分调用参与者的积极性，每个人都需要足够聚焦，这要求引导者可以有能力使得团队振奋（比如幽默的风格，或者具有挑战性的问题等）。另外，每个人的idea都需要被充分重视（一个细节就是不要随意篡改你听到的内容，这是没有经验的引导者常犯的错误之一）。一旦所有参与者都积极起来，引导者就可以稍微退后一些，将舞台交给团队。</p>

<p>而有时候，情景则相反，大家都不发言，也没有看到明显的发言的趋势，这时候需要一些方法来激励。如果是团队都比较茫然，引导者需要列出一些简单而容易理解的步骤，帮助团队按照预设的节奏来逐步前进。比如，在一开始的时候就将agenda板书在墙上，并通过头脑风暴的方式，鼓励参与者来将自己的idea可视化出来。</p>

<p>一个典型的误区是，引导会议的最后结论是本来就存在与引导者脑海中的想法。如果仅从结果来看，这种情况可能发生，但是只能说是碰巧而已。一个好的引导者需要帮助与会者自己产生，并得出一个可行的，被广泛认可的方案，而不是强加一个自己的给团队。</p>

<p>我们最为专业的引导活动是UX团队在客户现场的<code>inception</code>，<code>inception</code>由一系列相互关联，环环相扣的工作坊组成，这些工作坊基本上都需要采用很多引导的技巧，帮助客户团队将自己的问题描述清楚，并形成一个所有参与者都达成一直的可行方案。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/sticks-resized.png" alt="sticks" /></p>

<p>如果你不知道如何开始一个引导会议，一个简单而通用的模式是：</p>

<ol>
<li>我们的现状是</li>
<li>我们的目标是</li>
<li>我们如何到达目标</li>
<li>在行进中，如何度量</li>
</ol>


<p>《引导的秘诀》里还提到了一种<code>5P</code>模式：目的(Purpose)，产出(Product)，与会人(Participant)，可能的问题(Probable issues)以及流程(Process)。</p>

<p>5P提示你在准备会议之前，需要尝试回答这几个问题</p>

<ul>
<li>为什么要开这次会议？主要目的是什么？</li>
<li>会议后的产出是什么？</li>
<li>谁需要参与会议？</li>
<li>在会议中，我们可能遇到什么问题？</li>
<li>遇到这些问题是，我们如何解决？</li>
</ul>


<h2>引导中的常用技巧</h2>

<p>在引导活动中，有一些基本的规则，可以保证引导会议的顺畅性，比如</p>

<ul>
<li>引导师需要有足够的权威（可以打断那些长篇大论，保证过程的流畅）</li>
<li>如果人数太多，可以使用token（比如一个玩具考拉，或者一个澳式橄榄球，只有持有token的人可以说话）</li>
<li>保持one conversation（不要交头接耳）</li>
<li>每张stick上只写一条问题/想法</li>
</ul>


<p>引导师必须有控制会话何时结束的能力，否则引导活动将会变成一发不可收拾的冗长会议。坚持<code>one conversation</code>可以保证参与者足够聚焦，也保证所有人都在同一个频道上。如果发现有交头接耳的，引导者可以直接打断并提醒之。</p>

<p>每张便签上只写一条想法，首先可以保证多样性，便于讨论，也便于后续的分类。另外，简洁的描述在一定程度上可以促进与会者进行讨论，而一个冗长的描述则会让人丧失兴趣。</p>

<p>另外还有一些比较基础的技巧：</p>

<ul>
<li>所有讨论都应该对事不对人（特别是一些负面的总结）</li>
<li>如果有人提出与议题并不特别相关，但是又特别重要的点时，可以将这些点记下来（不要轻易打击发言者的积极性）</li>
<li>不定时的总结，以确保参与者都在同一频道，并且有助于大家对进度的了解（是不是快结束了）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[穷人的持续集成与持续交付（下）]]></title>
    <link href="http://abruzzi.github.com/2016/01/a-poor-mans-cd-part2/"/>
    <updated>2016-01-10T14:05:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/01/a-poor-mans-cd-part2</id>
    <content type="html"><![CDATA[<h1>客户端程序的的持续交付</h1>

<p><a href="http://icodeit.org/2016/01/a-poor-mans-cd-part1/">上篇文章</a>介绍了如何使用一些免费的服务来实现服务器端API的持续集成、持续交付环境的搭建。有了服务端，自然需要有消费者，在本文中我们将使用另外一个工具来实现纯前端的站点的部署。</p>

<p>其中包括：</p>

<ul>
<li>持续集成（单元测试，集成测试等）</li>
<li>持续部署/持续交付</li>
<li>静态站点托管</li>
</ul>


<p>除此之外，我们还会涉及到：</p>

<ul>
<li><a href="https://github.com/natritmeyer/site_prism">自动化UI测试site_prism</a></li>
<li>静态站点的发布脚本</li>
<li>aws的<a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html">命令行工具</a></li>
</ul>


<p>我们的应用最后看起来是这样子的。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/bookmarks-app-resized.png" alt="bookmarks app" /></p>

<h2>技术选型</h2>

<p>我们在本文中，将采取另外一套免费服务来完成环境的搭建</p>

<ul>
<li><a href="http://www.thoughtworks.com/">ThoughtWorks</a>出品的<a href="https://snap-ci.com/">Snap CI</a>作为持续集成/持续交付环境</li>
<li><a href="https://console.aws.amazon.com/s3/home?region=us-west-2">AWS的S3</a>作为应用发布的地方</li>
</ul>


<p><code>Snap CI</code>是一个非常易于使用的持续交付环境，由于很多关于持续集成，持续交付的概念和实践都跟<code>ThoughtWorks</code>有关，所以这个产品对于构建，流水线，部署等等的支持也都做的非常好。</p>

<p><code>S3</code>是亚马逊的云存储平台，我们可以将静态资源完全托管在其上。<code>S3</code>的另一个好处是它可以将你的文件变成一个Web Site，比如你的目录中有<code>index.html</code>，这个文件就可以作为你的站点首页被其他人访问。这个对于我们这个前后端分离项目来说非常有用，我们的<code>css</code>，<code>js</code>，<code>font</code>文件，还有入口文件<code>index.html</code>都可以托管于其上。</p>

<h2>实例</h2>

<p>在本文的例子中，我们将定义3个<code>stage</code>。<code>Snap CI</code>将一次发布分为若干个<code>stage</code>，每个<code>stage</code>只做一件事情，如果一个<code>stage</code>失败了，后边的就不会接着执行。</p>

<p>我们的3个<code>stage</code>分别为：</p>

<ol>
<li>单元测试</li>
<li>集成测试</li>
<li>部署</li>
</ol>


<h3>准备工作</h3>

<p><code>bookmarks-frontend</code>是一个纯前端的应用，它会消费后端提供的API，但是其实它并不知道（也不应该知道）后端的API部署在什么地方：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">feeds</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">backend</span><span class="o">+</span><span class="s1">&#39;/api/feeds&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">favorite</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">backend</span><span class="o">+</span><span class="s1">&#39;/api/fav-feeds/1&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">feeds</span><span class="p">,</span> <span class="nx">favorite</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">feeds</span><span class="p">,</span> <span class="nx">favorite</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//...</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于我们在本地开发时，需要<code>backend</code>指向本地的服务器，而发布之后，则希望它指向<a href="http://icodeit.org/2016/01/a-poor-mans-cd-part1/">上一篇文章</a>中提到的服务器，因此我们需要编写一点构建脚本来完成这件事儿：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">backend</span> <span class="o">=</span> <span class="s1">&#39;http://quiet-atoll-8237.herokuapp.com&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;prepareConfig&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;assets/templates/config.js&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/#backend#/g</span><span class="p">,</span> <span class="s1">&#39;http://localhost:8100&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;assets/script/&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;prepareRelease&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;assets/templates/config.js&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/#backend#/g</span><span class="p">,</span> <span class="nx">backend</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;assets/script/&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们定义了两个<code>gulp</code>的task，本地开发时，使用<code>prepareConfig</code>，要发布时，使用<code>prepareRelease</code>，然后定义一个简单的模板文件<code>config.js</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">backend</span><span class="o">:</span> <span class="s1">&#39;#backend#&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后可以很简单的包装一下，方便本地开发和发布：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;prepareConfig&#39;</span><span class="p">,</span> <span class="s1">&#39;browserify&#39;</span><span class="p">,</span> <span class="s1">&#39;concatcss&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;prepareConfig&#39;</span><span class="p">,</span> <span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;css&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;release&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;prepareRelease&#39;</span><span class="p">,</span> <span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;css&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，我们在本地开发时，只需要简单的执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp
</span></code></pre></td></tr></table></div></figure>


<p>即可。而在发布阶段，只需要执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp release
</span></code></pre></td></tr></table></div></figure>


<h3>单元测试</h3>

<p>我们在<code>Snap CI</code>上将<code>github</code>上的代码库关联起来，然后添加一个名叫<code>unit-test</code>的<code>stage</code>，指定这个<code>stage</code>对应的命令为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>npm install
</span><span class='line'>gulp
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2016/01/snap-ci-unit-resized.png" alt="Snap CI unit" /></p>

<p>这样，每当我们有新的提交之后，<code>Snap CI</code>都会拿到新代码，并执行上述命令，如果执行成功，则本地构建成功。</p>

<h3>集成测试</h3>

<p>由于采取的是<strong>前后端分离</strong>的策略，我们的应用可以完全独立与后端进行开发，因此我们设置了一个<code>fake server</code>，具体细节可以参考<a href="http://icodeit.org/2015/06/whats-next-after-separate-frontend-and-backend/">我之前的博客</a>，也可以看源码。不过这里我们要为集成测试编写一个脚本，并在<code>Snap CI</code>上执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">PORT</span><span class="o">=</span>8100
</span><span class='line'>bundle install
</span><span class='line'>
</span><span class='line'><span class="c"># launch the application</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;launch the application&quot;</span>
</span><span class='line'>ruby app.rb 2&gt;&amp;1 &amp;
</span><span class='line'><span class="nv">PID</span><span class="o">=</span><span class="nv">$!</span>
</span><span class='line'>
</span><span class='line'><span class="c"># wait for it to start up</span>
</span><span class='line'>sleep 3
</span><span class='line'>
</span><span class='line'><span class="c"># run the rspec tests and record the status</span>
</span><span class='line'>rspec
</span><span class='line'><span class="nv">RES</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>
</span><span class='line'><span class="c"># terminate after rspec</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;terminate the application&quot;</span>
</span><span class='line'><span class="nb">kill</span> -9 <span class="nv">$PID</span>
</span><span class='line'>
</span><span class='line'><span class="c"># now we know whether the rspec success or not</span>
</span><span class='line'><span class="nb">exit</span> <span class="nv">$RES</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个脚本中，首先安装所有的<code>gems</code>，然后启动<code>fake server</code>并将这个server放置在后台运行，然后执行<code>rspec</code>。当<code>rspec</code>测试执行完成之后，我们终止服务进行，然后返回结果状态码。</p>

<p>这里使用了<code>capybara</code>和<code>poltergeist</code>来做UI测试，<code>capybara</code>会驱动<code>phantomjs</code>来在内存中运行浏览器，并执行定义好的<code>UI</code>测试，比如此处，我们的UI测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;Feeds List Page&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:list_page</span><span class="p">)</span> <span class="p">{</span><span class="no">FeedListPage</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">list_page</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;user can see a banner and some feeds&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">list_page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_banner</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">list_page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_feeds</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">##...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2016/01/snap-ci-it-resized.png" alt="Snap CI logs" /></p>

<h3>部署</h3>

<p>首先需要在<code>S3</code>上创建一个<code>bucket</code>，命名为<code>bookmarks-frontend</code>。然后为其设置<code>static website hosting</code>，这时候<code>AWS</code>会assign一个新的域名给你，比如<code>http://bookmarks-frontend.s3-website-us-west-2.amazonaws.com/</code>。</p>

<p>然后你需要将这个<code>bucket</code>设置成<code>public</code>，这样其他人才可以访问你的<code>bucket</code>。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/aws-s3-public-resized.png" alt="AWS S3" /></p>

<p>有了这个之后，我们来编写一个小脚本，这个脚本可以将本地的文件上传至S3。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># install gulp and its dependencies</span>
</span><span class='line'>npm install
</span><span class='line'>
</span><span class='line'><span class="c"># package stuff, and point the server to the right place</span>
</span><span class='line'>gulp release
</span><span class='line'>
</span><span class='line'><span class="c"># upload the whold folder</span>
</span><span class='line'>aws s3 cp public/ s3://bookmarks-frontend <span class="se">\</span>
</span><span class='line'>  --recursive <span class="se">\</span>
</span><span class='line'>  --region us-west-2 <span class="se">\</span>
</span><span class='line'>  --acl public-read
</span></code></pre></td></tr></table></div></figure>


<p><code>aws</code>命令是<code>aws command line</code>提供的，另外我们需要在环境变量中设置AWS提供给你的token：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span>xxxxxxxxxx
</span><span class='line'><span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span>xxxxxxxxxx
</span></code></pre></td></tr></table></div></figure>


<p>然后我们就可以将本地的<code>public</code>目录递归的上传到S3的对应目录了！</p>

<p><img src="http://abruzzi.github.com/images/2016/01/snap-ci-pipeline-resized.png" alt="snap ci pipeline" /></p>

<p>完整的代码可以在<a href="https://github.com/abruzzi/bookmarks-frontend">此处下载</a>。</p>

<h2>总结</h2>

<p>我们前端的持续交付也介绍完了。现在前后端应用完全独立，发布也互不影响。不论是服务器端新增加了API，还是添加了新数据，客户端的发布都不受影响；同样，修改样式，添加新的<code>JavaScript</code>也完全不会影响后端。更重要的是，所有的发布都是一键式的，开发者只需要一个<code>git push</code>就可以享受这些免费服务提供的自动构建，自动化测试以及自动部署的功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[穷人的持续集成与持续交付（上）]]></title>
    <link href="http://abruzzi.github.com/2016/01/a-poor-mans-cd-part1/"/>
    <updated>2016-01-09T23:34:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/01/a-poor-mans-cd-part1</id>
    <content type="html"><![CDATA[<h1>服务器端应用的持续交付</h1>

<p>本文将使用一些免费的服务来为你的项目搭建<code>持续交付</code>平台，这些服务包括</p>

<ul>
<li>持续集成环境</li>
<li>持续部署环境</li>
<li>服务端应用托管</li>
</ul>


<p>以及一些可以用于本地开发使用的开源工具如：</p>

<ul>
<li><a href="https://github.com/abruzzi/node-build-monitor">基于Node的构建monitor</a></li>
<li><a href="https://toolbelt.heroku.com/">Heroku的命令行工具</a></li>
<li><a href="https://github.com/travis-ci/travis.rb">Travis CI的命令行工具</a></li>
</ul>


<p>除此之外，我们在过程中编写的脚本还可以用以本地构建，如果你的团队中正好已经有CI工具/CD工具，将这些脚本集成进去也是一件非常容易的事情。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/heroku-log-resized.png" alt="heroku real time log" /></p>

<h2>背景知识</h2>

<h3>软件的度量</h3>

<p>传统的管理方法论，在软件开发这个领域来说基本上是不工作的。软件项目的不确定性使得人们畏惧，管理者希望通过一些数字，指标来让自己感到某种虚幻的“掌控感”。软件行数，测试覆盖率，代码故障率等数字的名声基本上已经很糟了，经常有人拿来讽刺那些追求虚幻掌控感的“领导”。</p>

<p>但是有一个数字，即使最顽固的“自由主义者”也会认为是有意义的，那就是周期时间（cycle time）。简而言之，就是一个需求从产生到最终上线所需要的时间。其中包括了需求分析，设计，编码，测试，部署，运维等活动，可能还会包含后续的监控。</p>

<p>其实不论是瀑布模型，还是迭代开发的方式，或者其他的方法论，周期时间的缩短都是至关重要的。而具体到周期内，单纯的开发时间变长或者测试时间变长都无关紧要。比如项目A的开发时间是测试时间的2倍，项目B则恰恰反过来，这并不能说A做的比B好，真正有意义的是A的周期时间是否比B更短。</p>

<p>单纯改善项目过程中的某一个阶段的时间，可能并不能达到预期的目的。局部优化并不一定会带来全局的优化。换言之，<strong>通过某些策略来提高软件测试的效率未必能减少周期时间！</strong>。</p>

<h3>持续交付</h3>

<p>传统情况下，企业要进行软件开发，从用户研究到产品上线，其中会花费数月，甚至数年（我的一位印度同事给我聊起过，他的上家公司做产品，从版本启动到版本上线需要整整两年时间！）。而且一旦软件需求发生变更，又有需要数月才能将变更发布上线。除了为变更提交代码外，还有很多额外的回归测试，发布计划，运维部门的进度等等。而市场机会千变万化，在特定的时间窗口中，企业的竞争者可能早已发布并占领了相当大的市场份额。</p>

<p>在软件工程领域，人们提出了持续交付（continuous delivery）的概念，它旨在减少周期时间，强调在任何时刻软件都处于可发布状态。采用这种实践，我们可以频繁，快速，安全的将需求的变化发布出来，交由真实世界的用户来使用，在为用户带来价值的同时，我们也可以快速，持续的得到反馈，并激励新的变化产生（新的商业创新，新的模式等）。</p>

<p>持续交付包含了自动化构建，自动化测试以及自动化部署等过程，持续改进开发流程中的问题，并促进开发人员，测试人员，运维人员之间的协作，团队可以在分钟级别将变更发布上线。</p>

<h3>持续交付相关技术及实践</h3>

<ul>
<li>版本控制（配置管理）</li>
<li>持续集成CI</li>
<li>自动化测试</li>
<li>构建工具及构建脚本</li>
<li>部署流水线</li>
</ul>


<p>团队通过版本控制来进行协作，所有的代码会在持续集成环境中编译，代码静态检查/分析，自动化测试（还可能产生报告等）。除此之外，CI还还需要有自动化验收测试，自动化回归测试等。</p>

<p>持续交付则更进一步，它将环境准备，持续集成，自动化部署等放在了一起。通过全自动（有些过程可以设置为手动，比如发布到产品环境）的方式，使得软件可以一键发布。如果上线后发现严重defect，还支持一键回滚的机制（其实就是将之前的一个稳定版本做一次发布，由于发布流程已经经过千锤百炼，所以发布本身就变得非常轻松，安全）</p>

<p>这篇文章中，我们会使用<code>git</code>+<code>github</code>作为版本控制工具，<code>travis-ci</code>作为持续集成环境，<code>gradle</code>作为构建工具，<code>Heroku</code>作为应用的部署环境。这些工具都是免费服务，如果你需要更高级的功能（比如更多的并发数，更大的数据库），则可以选择付费套餐。不过对于我们平时的大部分side project来说，免费服务已经足够。</p>

<h2>实例</h2>

<p>我在<a href="http://icodeit.org/2015/06/whats-next-after-separate-frontend-and-backend/">《前后端分离了，然后呢？》</a>这篇文章中，提到了一个叫做<code>bookmarks</code>的应用，这个应用是一个前后端分离的非常彻底的应用。</p>

<p>我们这里会再次使用这个应用作为实例，并采用不同的两个免费服务（<a href="https://travis-ci.org">travis-ci</a>和<a href="https://snap-ci.com">snap-ci</a>）来完成<code>持续部署</code>环境的搭建。</p>

<h3>bookmarks服务器</h3>

<p><code>bookmarks-server</code>是一个基于<code>spring-boot</code>的纯粹的<code>API</code>，它可以被打包成一个<code>jar</code>包，然后通过命令行启动运行。在本文中，我们我们将会将这个server部署到<a href="https://dashboard.heroku.com/">heroku</a>平台上。</p>

<p>首先需要定义一个<code>Procfile</code>，这个是我们应用的入口，<code>heroku</code>根据这个文件来明确以何种方式来启动我们的应用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: java -Dserver.port=$PORT -jar build/libs/bookmarks-server-0.1.0.jar --spring.profiles.active=staging</span></code></pre></td></tr></table></div></figure>


<p>由于我们在本地使用的使用<code>mysql</code>，而<code>heroku</code>默认的是<code>postgres</code>数据库，因此需要在<code>application.yml</code>中额外配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">spring</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">profiles</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">staging</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">datasource</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driverClassName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">org.postgresql.Driver</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">${JDBC_DATABASE_URL}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">${DATABASE_USER}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">${DATABASE_PASS}</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">jpa</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">database_platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">org.hibernate.dialect.PostgreSQLDialect</span>
</span><span class='line'>    <span class="l-Scalar-Plain">hibernate</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ddl-auto</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">update</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了这些配置后，我们需要创建一个<code>heroku</code>应用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>heroku create
</span><span class='line'>Created http://quiet-atoll-8237.herokuapp.com/ | git@heroku.com:quiet-atoll-8237.git
</span></code></pre></td></tr></table></div></figure>


<p>创建之后，我们可以在界面上对这个应用进行一些配置（当然，也可以通过命令行，具体参看<code>heroku help</code>）。为了支持数据库，需要为我们的应用添加一个<code>postgres</code>的AddOn。添加之后，<code>heroku</code>会为我们提供一个<code>postgres</code>的连接地址，格式大概是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>postgres://username:password@host:port/database
</span></code></pre></td></tr></table></div></figure>


<p>然后我们需要在<code>Heroku</code>的配置界面中配置一些环境变量：</p>

<p><img src="http://abruzzi.github.com/images/2016/01/heroku-config-resized.png" alt="heroku env config" /></p>

<p>这样，当应用部署到<code>Heroku</code>上之后，我们的应用就可以读到这些配置了（注意<code>application.yml</code>中的环境变量<code>JDBC_DATABASE_URL</code>）。</p>

<h4>搭建持续集成环境</h4>

<p>持续集成环境，这里我们选用最简单的<code>travis-ci</code>，它可以很容易的与<code>github</code>集成。</p>

<ul>
<li>在项目X中定义一个<code>.travis.yml</code>的文件</li>
<li>将你的代码push到github上</li>
<li>绑定github帐号到<code>travis</code></li>
<li>在<code>travis</code>中启用项目X</li>
</ul>


<p>这个<code>.travis.yml</code>因项目而异，我们这里的项目是<code>spring-boot</code>，所以只需要指定<code>java</code>即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是<code>java</code>项目，并且项目中有<code>build.gradle</code>，<code>travis-ci</code>会自动执行<code>gradle check</code>任务。</p>

<h4>自动化部署</h4>

<p>当CI运行成功之后，我们需要<code>travis-ci</code>帮我们将应用程序发布到<code>heroku</code>上，这时候需要做一些修改。最简单的方式是直接安装<code>travis-ci</code>的命令行工具到本地：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install travis -v 1.8.0 --no-rdoc --no-ri
</span></code></pre></td></tr></table></div></figure>


<p>然后通过<code>heroku</code>的<code>auth:token</code>命令获得<code>heroku</code>的token，在加密并写入<code>.travis.yml</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>heroku auth:token
</span><span class='line'>00xxxxxxxxxxxxx55d11dbd0cxxxxxxxxxxfe067
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>travis encrypt 00xxxxxxxxxxxxx55d11dbd0cxxxxxxxxxxfe067 --add
</span></code></pre></td></tr></table></div></figure>


<p>当然可以合并为一条命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>travis encrypt <span class="k">$(</span>heroku auth:token<span class="k">)</span> --add
</span></code></pre></td></tr></table></div></figure>


<p>将加密过的token存入<code>.travis.yml</code>文件。最后的结果大致如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">heroku</span>
</span><span class='line'>  <span class="l-Scalar-Plain">api_key</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">secure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span>
</span><span class='line'>  <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">quiet-atoll-8237</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意此处的<code>app</code>，正是我们的App的名字。另外，还需要给<code>build.gradle</code>添加一个名叫<code>stage</code>的task，<code>travis</code>在deploy时需要这个<code>task</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">stage</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">dependsOn</span> <span class="n">build</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2016/01/travis-deploy-resized.png" alt="travis deploy" /></p>

<p>这样，我们只需要在本地的一个提交，一切都会自动化起来：</p>

<ul>
<li>travis会执行<code>gradle check</code></li>
<li><code>gradle check</code>会编译并运行自动化测试</li>
<li><code>travis</code>会部署应用到<code>heroku</code>上</li>
<li><code>heroku</code>会自动重启服务</li>
</ul>


<p>我们可以在本地进行简单的测试（注意此处我们的<code>staging</code>环境的URL）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl https://quiet-atoll-8237.herokuapp.com/api/feeds -s | jq .
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span>: 1,
</span><span class='line'>    <span class="s2">&quot;url&quot;</span>: <span class="s2">&quot;http://icodeit.org/2016/01/how-to-summarize-privious-project/&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;title&quot;</span>: <span class="s2">&quot;如何持久化你的项目经历&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;author&quot;</span>: <span class="s2">&quot;icodit.org&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;summary&quot;</span>: <span class="s2">&quot;通常来说，下项目总是一件比较高兴的事（大部分团队还会一起吃个饭庆祝一下）。&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;publishDate&quot;</span>: <span class="s2">&quot;2016-01-07&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span>: 2,
</span><span class='line'>    <span class="s2">&quot;url&quot;</span>: <span class="s2">&quot;http://icodeit.org/2015/11/get-started-with-reflux/&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;title&quot;</span>: <span class="s2">&quot;你为什么应该试一试Reflux？&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;author&quot;</span>: <span class="s2">&quot;icodit.org&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;summary&quot;</span>: <span class="s2">&quot;React在设计之初就只关注在View本身上，其余部分如数据的获取，事件处理等，全然不在考虑之内。&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;publishDate&quot;</span>: <span class="s2">&quot;2016-01-09&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的<a href="https://github.com/abruzzi/bookmarks-server">代码在这里</a>。</p>

<h2>其他</h2>

<h3>CI monitor</h3>

<p><a href="https://github.com/abruzzi/node-build-monitor">node-build-monitor</a>是一个非常容易配置，使用的CI monitor，我们只需要进行简单地配置，就可以将<code>travis</code>的状态可视化出来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;monitor&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;interval&quot;</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;numberOfBuilds&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;debug&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;services&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Travis&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;configuration&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;slug&quot;</span><span class="p">:</span> <span class="s2">&quot;abruzzi/bookmarks-server&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过这个工具会在有网络异常时自动终止，我们可以通过一个简单的脚本来在它终止时自动重启：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">until </span>node app/app.js
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;restarting...&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2016/01/ci-monitor-resized.png" alt="CI Monitor" /></p>

<h2>小结</h2>

<p>通过<code>travis</code>和<code>heroku</code>这样的免费服务，我们就可以轻松的将自己的项目做到持续集成+持续交付。我们后端的服务相对来说是比较容易的，但是涉及到一个前后端分离的架构，如何做到静态内容的托管，打包，部署，并和后端API集成起来，我会在下一篇文章中详细解释。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何持久化你的项目经历]]></title>
    <link href="http://abruzzi.github.com/2016/01/how-to-summarize-privious-project/"/>
    <updated>2016-01-05T12:44:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/01/how-to-summarize-privious-project</id>
    <content type="html"><![CDATA[<h1>下项目之后</h1>

<p>通常来说，下项目总是一件比较高兴的事（大部分团队还会一起吃个饭庆祝一下）。这里面既有终于摆脱了厌烦了的<code>技术栈</code>的解脱感，也有对新项目/新技术的向往，可能还有些在旧项目中做的不太满意的事情，可以在新项目重头再来的期望。</p>

<p>可能有点老生常谈了，不过这里我想说说下项目后如何做总结的事儿。对上一个项目的总结，其重要程度可能要远远超过你的想象。我是在2014年初，在一个客户现场的一个会议室和一位同事谈我的Annual Review的时候，才意识到这个问题的。</p>

<p>Annual Review会回顾我们过去一年的项目经历，有哪些方面的进步，同时也会展望未来的计划。但是这其中有几个问题：第一个问题是以年为单位的Review粒度太粗，有些经历已经淡忘，也有人可能一年会换好几个项目；第二个问题是对于大多数人来说，展望未来是一件比较容易的事儿，每个人或多或少都会有一些计划（比如学会前端的某些技术，尝试一些DevOps方面的工作，或者了解一下大数据等等）；但是对于回顾过去，我们其实并不擅长；最后一个问题是即使做了回顾，回顾的层次非常浅，作用并不大。</p>

<p>说到回顾过去，更多时候我们关注的是从项目中学到了什么样的新技术，这种浅层次的回忆和记流水帐是容易的，但是对于我们的成长并不会有太大的收益。真正会为帮助我们在将来的项目中做决策，甚至会影响我们学习效率，解决问题能力的是：<code>深度回顾</code>。</p>

<h2>深度回顾练习</h2>

<p>深度回顾可以帮助我们梳理知识，将实际的案例归纳总结为实际可用的知识。要获得这种能力，需要做一些针对性的练习。根据我自己的经验，这些练习大约可以归为3类，难度依次增加。</p>

<h3>项目上的直接经验</h3>

<p>这个练习比较简单，就是问问自己：“<strong>我在项目里学到了什么？</strong>”</p>

<p>要回答这个问题是很容易的，项目中用到的技术如模板引擎，前端框架，自动化测试套件，build工具等等，总结这些内容的过程，对于我们的PS来说都是“自动”发生的，几乎不需要付出额外的efforts。这些回顾、总结可以帮助我们成为一个“熟手”，即当下一次遇到相同或者类似的场景时，我们可以很容易直接应用这些经验。</p>

<p>更进一步，再问问自己在项目中的其他收获。比如客户关系处理的经历，团队建设的经验，甚至是写英文邮件的技巧等等方面，看看做的有没有问题，有没有提升的可能？</p>

<p>人类最牛逼的技能是：可以审视自己的行为。也就是站在旁观者的角度来看待自己的行为，随波逐流式的在各种琐事中沉浮事实上无法得到提升的。可以经常性的将自己置身事外，以一个旁观者的角度来审视自己做过的事情。并从中找出做得好的地方和不足的地方，然后自己给过去的自己一些建议，并记录下来。这些刻意的练习会帮助你养成回顾，从经验中学习的习惯，而这个习惯正是一个人区别于另一个人的绝对“捷径”。</p>

<h3>练习讲故事</h3>

<p>这个练习是，假想你遇到了一个同一个办公室的同事，他对你刚做完的这个项目很感兴趣，你来给他描述一下这个项目。描述的内容包括但不限于这些方面：</p>

<ul>
<li>项目的背景介绍</li>
<li>该项目以何种方式，为那些用户，带来了什么样的价值？（business model是什么）</li>
<li>该项目的实际用户数量是什么级别？</li>
<li>项目的部署，运维是如何操作的？</li>
<li>项目的监控是怎样做的？</li>
<li>当遇到系统故障，项目组是如何反应的？</li>
</ul>


<p>能把一件事情描述清楚是一件非常了不起的能力。我见过很多的程序员，写起代码来好不含糊，但是却很难将一件简单的事情讲清楚。我们当然要提防那些夸夸其谈，华而不实的“嘴子”，但是也至少得要求自己做到清晰，准确的将自己经历过的事情描述清楚。</p>

<p>描述项目背景需要至少需要交代这样一些内容：客户是谁，最终的消费者是谁，项目以何种方式运作（离岸交付，本地，onsite，咨询，培训等），我们<strong>帮助客户为消费者带来了什么样的价值</strong>。客户的商业模式是什么，在我们周围有哪些类似的项目。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/bmcanvas-basic-model-resized.jpg" alt="business canvas" /></p>

<p>即使在技术方面，也有很多被Dev忽略掉的信息，比如项目在产品环境中如何部署，数据中心建在何处，客户如何运维、监控等。实际的发布周期如何，发布流程如何，客户的内部论坛上都会有很多的这样的信息，但是很少有人关注。从一个项目roll off的时候，这些信息即使做不到了若指掌，至少也能描述清楚，否则难免有些“入宝山而空回”的遗憾。</p>

<h3>回顾项目中的挑战</h3>

<p>从简单的CRUD系统，到复杂的分布式计算，从企业内部的管理系统，到支持高并发、要求实时处理的交易平台，每个项目都会遇到一些挑战。除了技术上的挑战之外，还有陈旧而无文档的代码库，复杂的业务场景，不配和的客户接口人等等。挑战无处不在，那么作为项目中的一员，你是如何应对这些挑战的呢？最后又是如何解决的？</p>

<p>现实世界是一个充满了trade off的世界，我们需要做种种权衡，代码测试覆盖率和交付压力，性能和客户能负担的机器实例数量，框架A和框架B的优劣等等。我们在采取这个方案的时候，只能舍弃其他方案，由于谁也无法在事先准确预料采取某个方案一定是对的，那么在一个失败的方案背后，其实也是一个很好的教训，至少可以为未来的决策提供帮助。</p>

<ul>
<li>遇到的最大的挑战是什么？</li>
<li>这个挑战是如何被解决的？</li>
<li>如果有机会重做，你会如何考虑？</li>
</ul>


<h3>其他练习</h3>

<p>这里列出了一些我常用的，辅助性的练习。它们可以帮助你更好的梳理项目上学到的技能、知识，并且转换成你自己的知识。这些练习未必一定要等到项目结束之后才做，事实上它们都可以应用在日常的工作中。</p>

<ul>
<li>记笔记</li>
<li>写博客</li>
<li>在办公室内演讲</li>
<li>去社区贡献话题</li>
</ul>


<p>很多人都会记笔记，但只有一小部分的人在记录之后会持续翻阅。很多人会使用Evernote/印象笔记之类的工具将一些临时的想法，问题的思路，知识点的细节等记录下来，但是仅仅记录是不够的，笔记需要不断的检索、整理、提炼、修正、总结和归纳。在不断的加工之后，这些笔记可能会得到沉淀，并升华形成一些更有意义的内容（比如个人博客，或者可以发表到InfoQ/IBM DeveloperWorks平台上的文章等）。</p>

<p>除了记录笔记之外，写博客也是一种很好的总结形式。通过将素材不断充实、整理、完善，最终形成一个可供别人直接消费的文章，不但可以锻炼到总结能力，还可以很好的提升表达能力，而且可以帮助你将已有的知识体系化。如果你的博客写成了系列，也很容易通过Gitbook等将其发布为一本电子书，从而影响更多人（说不定还可以赚点咖啡钱）。</p>

<p>写博客/电子书，终究是书面形式的。事实上一个人可以很容易的通过文字将自己的实际情况隐藏起来。举个极端的例子：如果有足够的动机（比如公司的KPI要求），即使不熟悉某种语言/工具，仅仅通过Google，一个人也可以通过这种“作弊”的方式写出一篇“专家级”的文章。但是对于演讲这种面对面的形式，则基本上无法作弊，从而也更具有挑战性。另一方面，对于一个新的知识、技能，自己掌握是一回事儿，要讲出来让别人也能听懂，并从中收益，则完全是另外一回事儿。作为咨询师，语言表达（包括书面和演讲）能力的重要性勿庸赘言。整理知识，并归纳为演讲，会帮助你将体系化后的知识更好的表达出来。</p>

<p>在办公室里讲session有一定的挑战，但受众毕竟是“自己人”，压力相对会小一些（比如在ThoughtWorks，我们非常鼓励员工为其他人讲session，具体可以参看<a href="http://icodeit.org/2015/01/how-we-do-training-in-thoughtworks/">我的这篇文章</a>）。要在社区中演讲则要面临更大的挑战，通过将话题不断锤炼，不断归纳，最终形成可以在社区分享的话题，则不但可以提高内容的质量，也可以更好的锻炼表达能力和临场应变能力。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/xian-resized.jpg" alt="xian community" /></p>

<p>不过归根结底，这些活动的重要输入还是对之前项目中的知识、经历的深度回顾。</p>

<h2>总结</h2>

<p>从项目上下来之后，需要深入思考并总结之前的经验，这种深入思考会帮助你建立比较完整的知识体系，也可以让你在下一项目中更加得心应手，举一反三。如果只是蜻蜓点水般的“经历”了若干个项目，而不进行深入的总结和思考，相当于把相同的项目用不同的技术栈做了很多遍一样，那和我们平时所痛恨的重复代码又有什么不同呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2015]]></title>
    <link href="http://abruzzi.github.com/2016/01/my-2015/"/>
    <updated>2016-01-02T19:54:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/01/my-2015</id>
    <content type="html"><![CDATA[<h1>2015年总结</h1>

<p>2015年在不经意间就过去了。又是一年。按照惯例，我会在年末回顾一下这一年自己的进步，收获以及一些感慨（牢骚）。然后对来年做一点展望，看看什么地方可以做的更好。</p>

<h2>项目经历</h2>

<p>今年基本上经历了三个项目，性质也都不一样：</p>

<ul>
<li>海外交付</li>
<li>国内交付</li>
<li>国内售前</li>
</ul>


<p>3月前的项目以及没有什么印象了，依稀觉得项目上的所有实践都是“错”的，可能由于太过与荒诞，所以大脑自行将这段抹去了。</p>

<p>4月到6月在深圳的一个国内交付项目上，交付压力还挺大。不过也是在这个项目上，非常直接的体会到了其他角色的不容易。无论是客户的接口人，客户的项目经理，客户的领导，我们的开发，我们的UX，项目经理，还有交付的lead，所有人都不容易。</p>

<p><a href="http://icodeit.org/2015/07/is-project-manager-a-fool/">《项目经理是大傻逼吗》</a>这篇文章就是为了纪念这个项目，或者说是被这个项目驱动出来的。</p>

<p>6月之后回到办公室，在一个海外交付项目上。说是一个项目，中间其实换了6，7个不同的工作内容（出钱的是同一个客户而已）。总之一片混乱，所幸我们在10月前就结束了和这个客户的合作。这个项目事实上除了锻炼项目上人的耐心外，基本毫无益处。甚至对于很多毕业生来说，是深刻的伤害。</p>

<p>10月之后，我难得的在beach上待了下来，而且一待就是3个月。中间在一个联合国的项目上工作了2周，然后就是为另外一个咨询项目准备了几周方案。当然，闲是不可能闲着的。在beach上，如果不出意外，肯定会比项目上更忙！比如打黑工啊，内部什么系统的改进啊，总是有好多事情。</p>

<p>由于有一些本地的项目机会，而我又不在具体项目上，就来做这个售前的角色。帮助客户梳理需求，分析问题，设计方案，计算工作量等等。但是这个过程往往循环往复，一轮接着一轮，在合同确认之前，需要很多次讨论和交流。这应该不会是我自己的一个方向，在项目上写代码，培养新人，分享自己的学习所得，和他人一起进步，是我自己比较有热情的方向。</p>

<h2>技术方面</h2>

<p>在海外交付项目上，乏善足陈，项目中用到的也是非常厚重，已经至少10年的技术。通常来看，这样的大组织，没有人对要做的事情真正关心。好不容易遇到一个特别靠谱的人，结果我们的项目又结束了。国内项目上倒是有很多有意思的东西：</p>

<ul>
<li>如何在前端代码中很好的使用MVC</li>
<li>流畅的前端开发模式</li>
<li>如何做前端的测试</li>
</ul>


<p>上面这三点，我希望可以找时间整理出一本电子书，可以让没有<code>工程级</code>做过项目的前端工程师能有一个参考。</p>

<p>另一方面，由于项目的压力，和项目人员的特殊性（开发就俩人，一个做前端，一个做后端，要集成就pair一下），所以很多实践都没有应用，比如结对，自动化测试等，做的都不够好。虽然我们很推崇，强调CI/CD的实践，但是当和客户的后端系统集成时，就各种悲剧。</p>

<p>联合国的项目上，技术栈比较新颖，上一家的技术人员使用了他们当时能找到的所有酷炫的新技术，并用在了项目中，然后他们公司被收购。留给我们的在今年来看，依然是<a href="http://icodeit.org/2015/11/get-started-with-reflux/">比较新的</a>：</p>

<ul>
<li>React</li>
<li>Reflux</li>
<li>ES6</li>
<li>mocha/chai</li>
</ul>


<p>而在国内售前，基本上没有写过一行代码，更多是更高层次（高不一定是好哦）的工作。确认需求，估算工作量，确定方案（前后端测试，开发方式，部署策略，自动化测试等等）。</p>

<p>2016年，我希望可以多学习一些具体的编程知识，比如：</p>

<ul>
<li>mongodb</li>
<li>数据分析，数据挖掘</li>
<li>容器技术如docker</li>
</ul>


<h2>书籍</h2>

<p>今年读了一些技术方面的书，更多的则是一些非技术类的。《自私的基因》是在2012年11月去墨尔本时，在广州白云机场买的，路上10个小时，读了几页。直到2015年才又拿起来，读了两章左右，基本上颠覆了我之前建立的对“进化论”的认识。</p>

<p>另外读了一些科普类的，比如《哲学家在干了些什么》，《上帝掷骰子吗》等，又扫了一次盲。再就是一些佛教相关的书籍，《西藏生死书》，《能断：金刚经》，《正见》等，人生观和价值观得到了刷新。</p>

<p>技术类的，主要是一些与具体技术关系不太大的，比如《恰如其分的软件架构》，《企业级应用架构模式》，《发布！》，《实例化需求》，《持续发布》之类。</p>

<p>虽然竣工于2014年，但是我的一本著作和一本译作都是2015年才发布出来，那就算作2015年的吧：</p>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B012R5A1NQ">《轻量级Web应用开发》</a></li>
<li><a href="http://www.amazon.cn/dp/B015317A94">《7周7Web框架》</a></li>
</ul>


<h2>社区</h2>

<p>今年在深圳的时候，有幸和ThoughtWorks的首席科学家<code>马丁.福勒</code>在同一次活动中作为讲师。</p>

<p><img src="http://abruzzi.github.com/images/2016/01/shenzhen-resized.jpg" alt="shenzhen" /></p>

<p>回到西安之后，在本地社区中还讲过一个<code>前端工程师需要掌握的技能列表</code>的session</p>

<p><img src="http://abruzzi.github.com/images/2016/01/xian-resized.jpg" alt="xian" /></p>

<p>2016年希望可以做一些更加深入的topic，以及一些更有意思，可以帮助到更多已经<code>在路上</code>的工程师们。</p>

<h2>People Development</h2>

<p>这个不知道如何翻译了，但是确实做了一些具体的事情：</p>

<ul>
<li>给我的sponsee们安排了读书会</li>
<li>组织了一次《编写可维护的JavaScript》的workshop</li>
<li>组织sponsee来做一个side project</li>
<li>组织《Web开发实战》的workshop</li>
</ul>


<p>我自己总结出来了一套组织workshop的方式，其实很简单：</p>

<ol>
<li>做好计划，做好课表，做好课件</li>
<li>找学员，同时从学员里找出<code>有基础，而且有意愿接着run workshop的人</code></li>
<li>讲课，收集feedback，并改进课表，课件</li>
<li>将run workshop的任务传递给那些<code>有基础，而且有意愿接着run workshop的人</code></li>
</ol>


<p>2016年希望可以找到更多的<code>候选人</code>，并帮助他们成为更好的讲师，教练。</p>

<h2>总的感悟</h2>

<p>总体的感觉是很忙，各种事情千头万绪，没有了清晰的一个vision，也没有了指导，自身的发展方向也变得模糊起来。一部分原因可能是压力的方向变了，在项目上的单一的压力下总是可以找出一些事情来的，但是在项目之外，各种可见不可见的压力都慢慢浮现。对于这些隐形的，不可见的，但是又可以感受到的压力，需要认真思索对策，然后想办法搞定。</p>

<p>学习上有点“半瓶醋”的感觉，很多技术都接触了，但是不见得深入。缺乏空杯心态，这个是2016年希望自己能改进的地方。另一方面，希望在一个IT系统的架构层面有一些积累，以便在考虑项目的问题时，能够更加全面，而不至于陷入细节，只见树木，不见森林。</p>

<p>2016，当然还会很忙，只是希望忙的过程中可以多一些快乐。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用graphviz绘制流程图（2015版）]]></title>
    <link href="http://abruzzi.github.com/2015/11/using-graphviz-drawing/"/>
    <updated>2015-11-10T00:00:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/11/using-graphviz-drawing</id>
    <content type="html"><![CDATA[<hr />

<p>2015年11月10日更新
在实践中，我又发现了一些<code>graphviz</code>的有趣的特性，比如<code>时序图</code>，<code>rank</code>以及<code>图片节点</code>等。在这里一并更新。</p>

<h2>前言</h2>

<p>日常的开发工作中，为代码添加注释是代码可维护性的一个重要方面，但是仅仅提供注释是不够的，特别是当系统功能越来越复杂，涉及到的模块越来越多的时候，仅仅靠代码就很难从宏观的层次去理解。因此我们需要图例的支持，图例不仅仅包含功能之间的交互，也可以包含复杂的数据结构的示意图，数据流向等。</p>

<p>但是，常用的UML建模工具，如<code>Visio</code>等都略显复杂，且体积庞大。对于开发人员，特别是后台开发人员来说，命令行，脚本才是最友好的，而图形界面会很大程度的限制开发效率。相对于鼠标，键盘才是开发人员最好的朋友。</p>

<h3>graphviz简介</h3>

<p>本文介绍一个高效而简洁的绘图工具<code>graphviz</code>。<code>graphviz</code>是贝尔实验室开发的一个开源的工具包，它使用一个特定的<code>DSL</code>(领域特定语言): <code>dot</code>作为脚本语言，然后使用布局引擎来解析此脚本，并完成自动布局。<code>graphviz</code>提供丰富的导出格式，如常用的图片格式，SVG，PDF格式等。</p>

<p><code>graphviz</code>中包含了众多的布局器：</p>

<ul>
<li><code>dot</code> 默认布局方式，主要用于有向图</li>
<li><code>neato</code> 基于spring-model(又称force-based)算法</li>
<li><code>twopi</code> 径向布局</li>
<li><code>circo</code> 圆环布局</li>
<li><code>fdp</code> 用于无向图</li>
</ul>


<p><code>graphviz</code>的设计初衷是对<code>有向图/无向图</code>等进行自动布局，开发人员使用dot脚本定义图形元素，然后选择算法进行布局，最终导出结果。</p>

<p>首先，在dot脚本中定义图的顶点和边，顶点和边都具有各自的属性，比如形状，颜色，填充模式，字体，样式等。然后使用合适的布局算法进行布局。布局算法除了绘制各个顶点和边之外，需要尽可能的将顶点均匀的分布在画布上，并且尽可能的减少边的交叉(如果交叉过多，就很难看清楚顶点之间的关系了)。所以使用<code>graphviz</code>的一般流程为：</p>

<ul>
<li>定义一个图，并向图中添加需要的顶点和边</li>
<li>为顶点和边添加样式</li>
<li>使用布局引擎进行绘制</li>
</ul>


<p>一旦熟悉这种开发模式，就可以快速的将你的想法绘制出来。配合一个良好的编辑器(vim/emacs)等，可以极大的提高开发效率，与常见的GUI应用的所见即所得模式对应，此模式称为所思即所得。比如在我的机器上，使用Sublime Text 编辑<code>dot</code>脚本，然后将<code>F7/Cmd-B</code>映射为调用<code>dot引擎</code>去绘制当前脚本，并打开一个新的窗口来显示运行结果：</p>

<p><img src="http://abruzzi.github.com/images/2015/11/workspace-resized.png" alt="workspace" /></p>

<p>对于开发人员而言，经常会用到的图形绘制可能包括：函数调用关系，一个复杂的数据结构，系统的模块组成，抽象语法树等。</p>

<h3>基础知识</h3>

<p>graphviz包含3中元素，<code>图</code>，<code>顶点</code>和<code>边</code>。每个元素都可以具有各自的属性，用来定义字体，样式，颜色，形状等。下面是一些简单的示例，可以帮助我们快速的了解graphviz的基本用法。</p>

<h4>第一个graphviz图</h4>

<p>比如，要绘制一个有向图，包含4个节点<code>a,b,c,d</code>。其中<code>a</code>指向<code>b</code>，<code>b</code>和<code>c</code>指向<code>d</code>。可以定义下列脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>digraph abc{
</span><span class='line'>  a;
</span><span class='line'>  b;
</span><span class='line'>  c;
</span><span class='line'>  d;
</span><span class='line'> 
</span><span class='line'>  a -&gt; b;
</span><span class='line'>  b -&gt; d;
</span><span class='line'>  c -&gt; d;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>使用<code>dot</code>布局方式，绘制出来的效果如下：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image004.gif" alt="dot-simple" /></p>

<p>默认的顶点中的文字为定义顶点变量的名称，形状为椭圆。边的默认样式为黑色实线箭头，我们可以在脚本中做一下修改，将顶点改为<code>方形</code>，边改为<code>虚线</code>。</p>

<h4>定义顶点和边的样式</h4>

<p>在<code>digraph</code>的花括号内，添加顶点和边的新定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node [shape="record"];
</span><span class='line'>edge [style="dashed"];</span></code></pre></td></tr></table></div></figure>


<p>则绘制的效果如下：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image006.gif" alt="dot-simple2" /></p>

<h4>进一步修改顶点和边样式</h4>

<p>进一步，我们将顶点<code>a</code>的颜色改为<code>淡绿色</code>，并将<code>c</code>到<code>d</code>的边改为<code>红色</code>，脚本如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>digraph abc{
</span><span class='line'>  node [shape="record"];
</span><span class='line'>  edge [style="dashed"];
</span><span class='line'>   
</span><span class='line'>  a [style="filled", color="black", fillcolor="chartreuse"];
</span><span class='line'>  b;
</span><span class='line'>  c;
</span><span class='line'>  d;
</span><span class='line'>   
</span><span class='line'>  a -&gt; b;
</span><span class='line'>  b -&gt; d;
</span><span class='line'>  c -&gt; d [color="red"];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>绘制的结果如下：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image008.gif" alt="dot-simple3" /></p>

<p>应当注意到，顶点和边都接受属性的定义，形式为在顶点和边的定义之后加上一个由方括号括起来的<code>key-value</code>列表，每个<code>key-value</code>对由逗号隔开。如果图中顶点和边采用统一的风格，则可以在图定义的首部定义<code>node</code>, <code>edge</code>的属性。比如上图中，定义所有的顶点为方框，所有的边为虚线，在具体的顶点和边之后定义的属性将覆盖此全局属性。如特定与<code>a</code>的绿色，<code>c</code>到<code>d</code>的边的红色。</p>

<h4>以图片为节点</h4>

<p>除了颜色，节点还可以使用图片。不过需要注意的是，在使用图片作为节点的时候，需要将本来的形状设置为<code>none</code>，并且将<code>label</code>置为空字符串，避免出现文字对图片的干扰。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>digraph abc{
</span><span class='line'>  node [shape="record"];
</span><span class='line'>  edge [style="dashed"];
</span><span class='line'>   
</span><span class='line'>  a [style="filled", color="black", fillcolor="chartreuse"];
</span><span class='line'>  b;
</span><span class='line'>  c [shape="none", image="logos/browser-icon-chrome-resized.png", label=""];
</span><span class='line'>  d;
</span><span class='line'>   
</span><span class='line'>  a -&gt; b;
</span><span class='line'>  b -&gt; d;
</span><span class='line'>  c -&gt; d [color="red"];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2015/11/image-node.png" alt="image-node" /></p>

<h3>子图的绘制</h3>

<p>graphviz支持子图，即图中的部分节点和边相对对立(软件的模块划分经常如此)。比如，我们可以将顶点c和d归为一个子图：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>digraph abc{
</span><span class='line'>
</span><span class='line'>  node [shape="record"];
</span><span class='line'>  edge [style="dashed"];
</span><span class='line'>   
</span><span class='line'>  a [style="filled", color="black", fillcolor="chartreuse"];
</span><span class='line'>  b;
</span><span class='line'> 
</span><span class='line'>    subgraph cluster_cd{
</span><span class='line'>      label="c and d";
</span><span class='line'>      bgcolor="mintcream";
</span><span class='line'>      c;
</span><span class='line'>      d;
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>  a -&gt; b;
</span><span class='line'>  b -&gt; d;
</span><span class='line'>  c -&gt; d [color="red"];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>将<code>c</code>和<code>d</code>划分到<code>cluster_cd</code>这个子图中，标签为<code>c and d</code>,并添加背景色，以方便与主图区分开，绘制结果如下：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image010.gif" alt="cluster" /></p>

<p>应该注意的是，子图的名称必须以<code>cluster</code>开头，否则<code>graphviz</code>无法设别。</p>

<h4>数据结构的可视化</h4>

<p>实际开发中，经常要用到的是对复杂数据结构的描述，<code>graphviz</code>提供完善的机制来绘制此类图形。</p>

<h5>一个hash表的数据结构</h5>

<p>比如一个hash表的内容，可能具有下列结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">st_hash_type</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">compare</span><span class="p">)</span> <span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">hash</span><span class="p">)</span> <span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">st_table_entry</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hash</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">record</span><span class="p">;</span>
</span><span class='line'>    <span class="n">st_table_entry</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">st_table</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">st_hash_type</span> <span class="o">*</span><span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num_bins</span><span class="p">;</span> <span class="cm">/* slot count */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num_entries</span><span class="p">;</span> <span class="cm">/* total number of entries */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">st_table_entry</span> <span class="o">**</span><span class="n">bins</span><span class="p">;</span> <span class="cm">/* slot */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h5>绘制hash表的数据结构</h5>

<p>从代码上看，由于结构体存在引用关系，不够清晰，如果层次较多，则很难以记住各个结构之间的关系，我们可以通过下图来更清楚的展示：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image012.gif" alt="hash-datastruct" /></p>

<p>脚本如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">st2</span><span class="p">{</span>
</span><span class='line'>  <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Verdana&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rankdir</span><span class="o">=</span><span class="n">TB</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Verdana&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;skyblue&quot;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s">&quot;record&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">edge</span> <span class="p">[</span><span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Verdana&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;crimson&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;solid&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">st_hash_type</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;{&lt;head&gt;st_hash_type|(*compare)|(*hash)}&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">st_table_entry</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;{&lt;head&gt;st_table_entry|hash|key|record|&lt;next&gt;next}&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">st_table</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;{st_table|&lt;type&gt;type|num_bins|num_entries|&lt;bins&gt;bins}&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nl">st_table:</span><span class="n">bins</span> <span class="o">-&gt;</span> <span class="n">st_table_entry</span><span class="o">:</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">st_table:</span><span class="n">type</span> <span class="o">-&gt;</span> <span class="n">st_hash_type</span><span class="o">:</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">st_table_entry:</span><span class="n">next</span> <span class="o">-&gt;</span> <span class="n">st_table_entry</span><span class="o">:</span><span class="n">head</span> <span class="p">[</span><span class="n">style</span><span class="o">=</span><span class="s">&quot;dashed&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;forestgreen&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该注意到，在顶点的形状为<code>record</code>的时候，<code>label</code>属性的语法比较奇怪，但是使用起来非常灵活。比如，用竖线”|”隔开的串会在绘制出来的节点中展现为一条分隔符。用<code>&lt;&gt;</code>括起来的串称为锚点，当一个节点具有多个锚点的时候，这个特性会非常有用，比如节点<code>st_table</code>的<code>type</code>属性指向<code>st_hash_type</code>，第4个属性指向<code>st_table_entry</code>等，都是通过锚点来实现的。</p>

<p>我们发现，使用默认的<code>dot</code>布局后，绿色的这条边覆盖了数据结构<code>st_table_entry</code>，并不美观，因此可以使用别的布局方式来重新布局，如使用<code>circo</code>算法：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image014.gif" alt="circo" /></p>

<p>则可以得到更加合理的布局结果。</p>

<h4>hash表的实例</h4>

<p>另外，这个hash表的一个实例如下：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image016.gif" alt="hash-instance" /></p>

<p>脚本如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">st</span><span class="p">{</span>
</span><span class='line'>  <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Verdana&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rankdir</span> <span class="o">=</span> <span class="n">LR</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rotate</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span> <span class="n">shape</span><span class="o">=</span><span class="s">&quot;record&quot;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mf">.1</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mf">.1</span><span class="p">];</span>
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Verdana&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;skyblue&quot;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s">&quot;record&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">edge</span> <span class="p">[</span><span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Verdana&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;crimson&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;solid&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;plaintext&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">st_table</span> <span class="p">[</span><span class="n">label</span><span class="o">=&lt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">table</span> <span class="n">border</span><span class="o">=</span><span class="s">&quot;0&quot;</span> <span class="n">cellborder</span><span class="o">=</span><span class="s">&quot;1&quot;</span> <span class="n">cellspacing</span><span class="o">=</span><span class="s">&quot;0&quot;</span> <span class="n">align</span><span class="o">=</span><span class="s">&quot;left&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">st_table</span><span class="o">&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">num_bins</span><span class="o">=</span><span class="mi">5</span><span class="o">&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">num_entries</span><span class="o">=</span><span class="mi">3</span><span class="o">&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">td</span> <span class="n">port</span><span class="o">=</span><span class="s">&quot;bins&quot;</span><span class="o">&gt;</span><span class="n">bins</span><span class="o">&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">table</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&gt;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;record&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">num_bins</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot; &lt;b1&gt; | &lt;b2&gt; | &lt;b3&gt; | &lt;b4&gt; | &lt;b5&gt; &quot;</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="n">node</span><span class="p">[</span> <span class="n">width</span><span class="o">=</span><span class="mi">2</span> <span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">entry_1</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;{&lt;e&gt;st_table_entry|&lt;next&gt;next}&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">entry_2</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;{&lt;e&gt;st_table_entry|&lt;next&gt;null}&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">entry_3</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;{&lt;e&gt;st_table_entry|&lt;next&gt;null}&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nl">st_table:</span><span class="n">bins</span> <span class="o">-&gt;</span> <span class="n">num_bins</span><span class="o">:</span><span class="n">b1</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">num_bins:</span><span class="n">b1</span> <span class="o">-&gt;</span> <span class="n">entry_1</span><span class="o">:</span><span class="n">e</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">entry_1:</span><span class="n">next</span> <span class="o">-&gt;</span> <span class="n">entry_2</span><span class="o">:</span><span class="n">e</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">num_bins:</span><span class="n">b3</span> <span class="o">-&gt;</span> <span class="n">entry_3</span><span class="o">:</span><span class="n">e</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上例中可以看到，节点的<code>label</code>属性支持类似于<code>HTML</code>语言中的TABLE形式的定义，通过行列的数目来定义节点的形状，从而使得节点的组成更加灵活。</p>

<h4>软件模块组成图</h4>

<p>Apache httpd 模块关系</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image018.gif" alt="httpd" /></p>

<p>在实际的开发中，随着系统功能的完善，软件整体的结构会越来越复杂，通常开发人员会将软件划分为可理解的多个子模块，各个子模块通过协作，完成各种各样的需求。</p>

<p>下面有个例子，是某软件设计时的一个草稿：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image020.gif" alt="idp" /></p>

<p>IDP支持层为一个相对独立的子系统，其中包括如数据库管理器，配置信息管理器等模块，另外为了提供更大的灵活性，将很多其他的模块抽取出来作为外部模块，而支持层提供一个模块管理器，来负责加载/卸载这些外部的模块集合。</p>

<p>这些模块间的关系较为复杂，并且有部分模块关系密切，应归类为一个子系统中，上图对应的<code>dot</code>脚本为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">idp_modules</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rankdir</span> <span class="o">=</span> <span class="n">TB</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span> <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">shape</span> <span class="o">=</span> <span class="s">&quot;record&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">edge</span> <span class="p">[</span> <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">12</span> <span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">subgraph</span> <span class="n">cluster_sl</span><span class="p">{</span>
</span><span class='line'>          <span class="n">label</span><span class="o">=</span><span class="s">&quot;IDP支持层&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">bgcolor</span><span class="o">=</span><span class="s">&quot;mintcream&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;Mrecord&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;skyblue&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;filled&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">network_mgr</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;网络管理器&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">log_mgr</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;日志管理器&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">module_mgr</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;模块管理器&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">conf_mgr</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;配置管理器&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">db_mgr</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;数据库管理器&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">subgraph</span> <span class="n">cluster_md</span><span class="p">{</span>
</span><span class='line'>          <span class="n">label</span><span class="o">=</span><span class="s">&quot;可插拔模块集&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">bgcolor</span><span class="o">=</span><span class="s">&quot;lightcyan&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="p">[</span><span class="n">color</span><span class="o">=</span><span class="s">&quot;chartreuse2&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;filled&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">mod_dev</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;开发支持模块&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">mod_dm</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;数据建模模块&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">mod_dp</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;部署发布模块&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">mod_dp</span> <span class="o">-&gt;</span> <span class="n">mod_dev</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;依赖...&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">mod_dp</span> <span class="o">-&gt;</span> <span class="n">mod_dm</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;依赖...&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">mod_dp</span> <span class="o">-&gt;</span> <span class="n">module_mgr</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;安装...&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;yellowgreen&quot;</span><span class="p">,</span> <span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">mod_dev</span> <span class="o">-&gt;</span> <span class="n">mod_dm</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;依赖...&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">mod_dev</span> <span class="o">-&gt;</span> <span class="n">module_mgr</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;安装...&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;yellowgreen&quot;</span><span class="p">,</span> <span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">mod_dm</span> <span class="o">-&gt;</span> <span class="n">module_mgr</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;安装...&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;yellowgreen&quot;</span><span class="p">,</span> <span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>状态图</h4>

<p>有限自动机示意图</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image022.gif" alt="fsm" /></p>

<p>上图是一个简易有限自动机，接受<code>a</code>及<code>a</code>结尾的任意长度的串。其脚本定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">automata_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="s">&quot;8.5, 11&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">shape</span> <span class="o">=</span> <span class="n">circle</span><span class="p">,</span> <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="n">edge</span> <span class="p">[</span><span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="mi">0</span> <span class="p">[</span> <span class="n">style</span> <span class="o">=</span> <span class="n">filled</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">lightgrey</span> <span class="p">];</span>
</span><span class='line'>  <span class="mi">2</span> <span class="p">[</span> <span class="n">shape</span> <span class="o">=</span> <span class="n">doublecircle</span> <span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="mi">0</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;a &quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="mi">0</span> <span class="o">-&gt;</span> <span class="mi">1</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;other &quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="mi">1</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;a &quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="mi">1</span> <span class="o">-&gt;</span> <span class="mi">1</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;other &quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="mi">2</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;a &quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="mi">2</span> <span class="o">-&gt;</span> <span class="mi">1</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;other &quot;</span> <span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="s">&quot;Machine: a&quot;</span> <span class="p">[</span> <span class="n">shape</span> <span class="o">=</span> <span class="n">plaintext</span> <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>形状值为plaintext的表示不用绘制边框，仅展示纯文本内容，这个在绘图中，绘制指示性的文本时很有用，如上图中的<code>Machine: a</code>。</p>

<h4>OSGi中模块的生命周期图</h4>

<p>OSGi中，模块具有生命周期，从安装到卸载，可能的状态具有已安装，已就绪，正在启动，已启动，正在停止，已卸载等。如下图所示：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image024.gif" alt="osgi" /></p>

<p>对应的脚本如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">module_lc</span><span class="p">{</span>
</span><span class='line'>  <span class="n">rankdir</span><span class="o">=</span><span class="n">TB</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">shape</span> <span class="o">=</span> <span class="s">&quot;Mrecord&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;skyblue&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;filled&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">edge</span> <span class="p">[</span><span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;darkgreen&quot;</span> <span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">installed</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;已安装状态&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">resolved</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;已就绪状态&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">uninstalled</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;已卸载状态&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">starting</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;正在启动&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">active</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;已激活(运行)状态&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">stopping</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;正在停止&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">start</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s">&quot;circle&quot;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">fixedsize</span><span class="o">=</span><span class="nb">true</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;filled&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&quot;black&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">start</span> <span class="o">-&gt;</span> <span class="n">installed</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;安装&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">installed</span> <span class="o">-&gt;</span> <span class="n">uninstalled</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;卸载&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">installed</span> <span class="o">-&gt;</span> <span class="n">resolved</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;准备&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">installed</span> <span class="o">-&gt;</span> <span class="n">installed</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;更新&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">resolved</span> <span class="o">-&gt;</span> <span class="n">installed</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;更新&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">resolved</span> <span class="o">-&gt;</span> <span class="n">uninstalled</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;卸载&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">resolved</span> <span class="o">-&gt;</span> <span class="n">starting</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;启动&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">starting</span> <span class="o">-&gt;</span> <span class="n">active</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">active</span> <span class="o">-&gt;</span> <span class="n">stopping</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;停止&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">stopping</span> <span class="o">-&gt;</span> <span class="n">resolved</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他实例</h3>

<p>一棵简单的抽象语法树(AST)</p>

<p>表达式 <code>(3+4)*5</code> 在编译时期，会形成一棵语法树，一边在计算时，先计算<code>3+4</code>的值，最后与5相乘。</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image026.gif" alt="ast-calc" /></p>

<p>对应的脚本如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">ast</span><span class="p">{</span>
</span><span class='line'>  <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">shape</span> <span class="o">=</span> <span class="n">circle</span><span class="p">,</span> <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="n">edge</span> <span class="p">[</span><span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Microsoft YaHei&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;plaintext&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">mul</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;mul(*)&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">add</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;add(+)&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">add</span> <span class="o">-&gt;</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">add</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mul</span> <span class="o">-&gt;</span> <span class="n">add</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mul</span> <span class="o">-&gt;</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>简单的UML类图</h4>

<p>下面是一简单的UML类图，<code>Dog</code>和<code>Cat</code>都是<code>Animal</code>的子类，<code>Dog</code>和<code>Cat</code>同属一个包，且有可能有联系<code>(0..n)</code>。</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image028.gif" alt="uml" /></p>

<p>脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">G</span><span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Courier New&quot;</span>
</span><span class='line'>  <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span> <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Courier New&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">shape</span> <span class="o">=</span> <span class="s">&quot;record&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">edge</span> <span class="p">[</span> <span class="n">fontname</span> <span class="o">=</span> <span class="s">&quot;Courier New&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">10</span> <span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Animal</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;{Animal |+ name : String\l+ age : int\l|+ die() : void\l}&quot;</span> <span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">subgraph</span> <span class="n">clusterAnimalImpl</span><span class="p">{</span>
</span><span class='line'>          <span class="n">bgcolor</span><span class="o">=</span><span class="s">&quot;yellow&quot;</span>
</span><span class='line'>          <span class="n">Dog</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;{Dog||+ bark() : void\l}&quot;</span> <span class="p">];</span>
</span><span class='line'>          <span class="n">Cat</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;{Cat||+ meow() : void\l}&quot;</span> <span class="p">];</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">edge</span> <span class="p">[</span> <span class="n">arrowhead</span> <span class="o">=</span> <span class="s">&quot;empty&quot;</span> <span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Dog</span><span class="o">-&gt;</span><span class="n">Animal</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Cat</span><span class="o">-&gt;</span><span class="n">Animal</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Dog</span><span class="o">-&gt;</span><span class="n">Cat</span> <span class="p">[</span><span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&quot;0..*&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>状态图</h4>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image030.gif" alt="status-chart" /></p>

<p>脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">finite_state_machine</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">rankdir</span> <span class="o">=</span> <span class="n">LR</span><span class="p">;</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="s">&quot;8,5&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">shape</span> <span class="o">=</span> <span class="n">doublecircle</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">LR_0</span> <span class="n">LR_3</span> <span class="n">LR_4</span> <span class="n">LR_8</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">node</span> <span class="p">[</span><span class="n">shape</span> <span class="o">=</span> <span class="n">circle</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">LR_0</span> <span class="o">-&gt;</span> <span class="n">LR_2</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;SS(B)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_0</span> <span class="o">-&gt;</span> <span class="n">LR_1</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;SS(S)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_1</span> <span class="o">-&gt;</span> <span class="n">LR_3</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S($end)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_2</span> <span class="o">-&gt;</span> <span class="n">LR_6</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;SS(b)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_2</span> <span class="o">-&gt;</span> <span class="n">LR_5</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;SS(a)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_2</span> <span class="o">-&gt;</span> <span class="n">LR_4</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(A)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_5</span> <span class="o">-&gt;</span> <span class="n">LR_7</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(b)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_5</span> <span class="o">-&gt;</span> <span class="n">LR_5</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(a)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_6</span> <span class="o">-&gt;</span> <span class="n">LR_6</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(b)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_6</span> <span class="o">-&gt;</span> <span class="n">LR_5</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(a)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_7</span> <span class="o">-&gt;</span> <span class="n">LR_8</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(b)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_7</span> <span class="o">-&gt;</span> <span class="n">LR_5</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(a)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_8</span> <span class="o">-&gt;</span> <span class="n">LR_6</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(b)&quot;</span> <span class="p">];</span>
</span><span class='line'>  <span class="n">LR_8</span> <span class="o">-&gt;</span> <span class="n">LR_5</span> <span class="p">[</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;S(a)&quot;</span> <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>时序图</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">digraph</span> <span class="n">G</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rankdir</span><span class="o">=</span><span class="s">&quot;LR&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span><span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;point&quot;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">edge</span><span class="p">[</span><span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;dashed&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">rank</span><span class="o">=</span><span class="s">&quot;same&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">edge</span><span class="p">[</span><span class="n">style</span><span class="o">=</span><span class="s">&quot;solided&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">LC</span><span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;plaintext&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">LC</span> <span class="o">-&gt;</span> <span class="n">step00</span> <span class="o">-&gt;</span> <span class="n">step01</span> <span class="o">-&gt;</span> <span class="n">step02</span> <span class="o">-&gt;</span> <span class="n">step03</span> <span class="o">-&gt;</span> <span class="n">step04</span> <span class="o">-&gt;</span> <span class="n">step05</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">rank</span><span class="o">=</span><span class="s">&quot;same&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">edge</span><span class="p">[</span><span class="n">style</span><span class="o">=</span><span class="s">&quot;solided&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Agency</span><span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;plaintext&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Agency</span> <span class="o">-&gt;</span> <span class="n">step10</span> <span class="o">-&gt;</span> <span class="n">step11</span> <span class="o">-&gt;</span> <span class="n">step12</span> <span class="o">-&gt;</span> <span class="n">step13</span> <span class="o">-&gt;</span> <span class="n">step14</span> <span class="o">-&gt;</span> <span class="n">step15</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">rank</span><span class="o">=</span><span class="s">&quot;same&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">edge</span><span class="p">[</span><span class="n">style</span><span class="o">=</span><span class="s">&quot;solided&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Agent</span><span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;plaintext&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Agent</span> <span class="o">-&gt;</span> <span class="n">step20</span> <span class="o">-&gt;</span> <span class="n">step21</span> <span class="o">-&gt;</span> <span class="n">step22</span> <span class="o">-&gt;</span> <span class="n">step23</span> <span class="o">-&gt;</span> <span class="n">step24</span> <span class="o">-&gt;</span> <span class="n">step25</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">step00</span> <span class="o">-&gt;</span> <span class="n">step10</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;sends email new custumer&quot;</span><span class="p">,</span> <span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;normal&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">step11</span> <span class="o">-&gt;</span> <span class="n">step01</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;declines&quot;</span><span class="p">,</span> <span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;normal&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">step12</span> <span class="o">-&gt;</span> <span class="n">step02</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;accepts&quot;</span><span class="p">,</span> <span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;normal&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">step13</span> <span class="o">-&gt;</span> <span class="n">step23</span> <span class="p">[</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;forward to&quot;</span><span class="p">,</span> <span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;normal&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">step24</span> <span class="o">-&gt;</span> <span class="n">step14</span><span class="p">;</span>
</span><span class='line'>    <span class="n">step14</span> <span class="o">-&gt;</span> <span class="n">step04</span> <span class="p">[</span><span class="n">arrowhead</span><span class="o">=</span><span class="s">&quot;normal&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>rankdir="LR"</code>表示，布局从左<code>L</code>到右<code>R</code>。可以看到，在代码中有<code>{}</code>括起来的部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">rank</span><span class="o">=</span><span class="s">&quot;same&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">edge</span><span class="p">[</span><span class="n">style</span><span class="o">=</span><span class="s">&quot;solided&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Agency</span><span class="p">[</span><span class="n">shape</span><span class="o">=</span><span class="s">&quot;plaintext&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Agency</span> <span class="o">-&gt;</span> <span class="n">step10</span> <span class="o">-&gt;</span> <span class="n">step11</span> <span class="o">-&gt;</span> <span class="n">step12</span> <span class="o">-&gt;</span> <span class="n">step13</span> <span class="o">-&gt;</span> <span class="n">step14</span> <span class="o">-&gt;</span> <span class="n">step15</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个<code>rank="same"</code>的block中的所有节点都会在同一条线上。我们设置了所有的线为虚线，但是在该block中，将线改为<code>solided</code>。</p>

<p><img src="http://abruzzi.github.com/images/2015/11/seq.png" alt="seq" /></p>

<h3>附录</h3>

<p>事实上，从<code>dot</code>的语法及上述的示例中，很容易看出，dot脚本很容易被其他语言生成。比如，使用一些简单的数据库查询就可以生成数据库中的ER图的dot脚本。</p>

<p>如果你追求高效的开发速度，并希望快速的将自己的想法画出来，那么<code>graphviz</code>是一个很不错的选择。</p>

<p>当然，<code>graphviz</code>也有一定的局限，比如绘制时序图(序列图)就很难实现。<code>graphviz</code>的节点出现在画布上的位置事实上是不确定的，依赖于所使用的布局算法，而不是在脚本中出现的位置，这可能使刚开始接触<code>graphviz</code>的开发人员有点不适应。<code>graphviz</code>的强项在于自动布局，当图中的顶点和边的数目变得很多的时候，才能很好的体会这一特性的好处：</p>

<p><img src="http://abruzzi.github.com/images/2012/01/clip_image034.gif" alt="complex" /></p>

<p>比如上图，或者较上图更复杂的图，如果采用手工绘制显然是不可能的，只能通过<code>graphviz</code>提供的自动布局引擎来完成。如果仅用于展示模块间的关系，子模块与子模块间通信的方式，模块的逻辑位置等，<code>graphviz</code>完全可以胜任，但是如果图中对象的物理位置必须是准确的，如节点A必须位于左上角，节点B必须与A相邻等特性，使用<code>graphviz</code>则很难做到。毕竟，它的强项是自动布局，事实上，所有的节点对与布局引擎而言，权重在初始时都是相同的，只是在渲染之后，节点的大小，形状等特性才会影响权重。</p>

<p>本文只是初步介绍了<code>graphviz</code>的简单应用，如图的定义，顶点/边的属性定义，如果运行等，事实上还有很多的属性，如画布的大小，字体的选择，颜色列表等，大家可以通过<code>graphviz</code>的官网来找到更详细的资料。</p>

<p>文中的代码都已经在<a href="https://github.com/abruzzi/graphviz-scripts">Github</a>上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你为什么应该试一试Reflux？]]></title>
    <link href="http://abruzzi.github.com/2015/11/get-started-with-reflux/"/>
    <updated>2015-11-09T23:03:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/11/get-started-with-reflux</id>
    <content type="html"><![CDATA[<h3>一点背景</h3>

<p>React在设计之初就只关注在View本身上，其余部分如<code>数据的获取</code>，<code>事件处理</code>等，全然不在考虑之内。不过构建大型的Web前端应用，这些点又实在不可避免。所以Facebook的工程师提出了前端的<code>Flux</code>架构，这个架构的最大特点是<code>单向数据流</code>（后面详述）。但是<code>Flux</code>本身的实现有很多不合理的地方，比如单例的Dispatcher会在系统中有多种事件时导致臃肿的<code>switch-cases</code>等。</p>

<p>这里是Facebook官方提供的提供<a href="https://github.com/facebook/flux/tree/master/examples/flux-todomvc#structure-and-data-flow">Flux的结构图</a>。</p>

<p><img src="http://abruzzi.github.com/images/2015/11/flux-diagram-resized.png" alt="Flux Diagram" /></p>

<p>其实整个Flux背后的思想也<a href="http://bitquabit.com/post/the-more-things-change/">不是什么新东西</a>。在很久之前，Win32的消息机制（以及很多的GUI系统）就在使用这个模型，而且这也是一种被证实可以用来构建大型软件的模型。</p>

<p>鉴于Flux本身只是一个架构，而且Facebook提供的参考实现又有一些问题，所以社区有了很多版本的Flux实现。比如我们这里会用到的<a href="http://spoike.ghost.io/deconstructing-reactjss-flux/">Reflux</a>。</p>

<h3>Reflux简介</h3>

<p>简而言之，<a href="https://github.com/reflux/refluxjs">Reflux</a>里有两个组件：Store和Action。Store负责和数据相关的内容：从服务器上获取数据，并更新与其绑定的React组件（view controller）;Action是一个事件的集合。Action和Store通过convention来连接起来。</p>

<p>具体来说，一个典型的过程是：</p>

<ol>
<li>用户的动作(或者定时器)在组件上触发一个Action</li>
<li>Reflux会调用对应的Store上的callback（自动触发）</li>
<li>这个callback在执行结束之后，会显式的触发（trigger）一个数据</li>
<li>对应的组件（可能是多个）的state会被更新</li>
<li>React组件检测到state的变化后，会自动重绘自身</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2015/11/reflux-data-flow.png" alt="reflux data flow" /></p>

<h3>一个例子</h3>

<p>我们这里将使用React/Reflux开发一个实际的例子，从最简单的功能开始，逐步将其构建为一个较为复杂的应用。</p>

<p>这个应用是一个书签展示应用（数据来源于我的Google Bookmarks）。第一个版本的界面是这样的：</p>

<p><img src="http://abruzzi.github.com/images/2015/11/bookmarks-list-resized.png" alt="bookmarks list" /></p>

<p>要构建这样一个列表应用，我们需要这样几个部分：</p>

<ol>
<li>一个用来<code>fetch</code>数据，存储数据的store （BookmarkStore）</li>
<li>一个用来表达事件的<code>Action</code>（BookmarkActions）</li>
<li>一个列表组件（BookmarkList）</li>
<li>一个组件条目组件（Bookmark）</li>
</ol>


<h4>定义Actions</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Reflux</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;reflux&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkActions</span> <span class="o">=</span> <span class="nx">Reflux</span><span class="p">.</span><span class="nx">createActions</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;fetch&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">BookmarkActions</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个版本，我们只需要定义一个<code>fetch</code>事件即可。然后在<code>Store</code>中编写这个Action的回调：</p>

<h4>定义Store</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jquery&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Reflux</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;reflux&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkActions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../actions/bookmark-actions&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Utils</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../utils/fetch-client&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkStore</span> <span class="o">=</span> <span class="nx">Reflux</span><span class="p">.</span><span class="nx">createStore</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">listenables</span><span class="o">:</span> <span class="p">[</span><span class="nx">BookmarkActions</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">onFetch</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">onFetch</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">Utils</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/bookmarks&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">bookmarks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">self</span><span class="p">.</span><span class="nx">trigger</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">data</span><span class="o">:</span> <span class="nx">bookmarks</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">match</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">BookmarkStore</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此处，我们使用<code>listenables: [BookmarkActions]</code>来将Store和Action关联起来，根据<code>convention</code>，<code>on</code>+事件名称就是回调函数的名称。这样当<code>Action</code>被触发的时候，<code>onFetch</code>会被调用。当获取到数据之后，这里会显式的<code>trigger</code>一个数据。</p>

<h4>List组件</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Reflux</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;reflux&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../stores/bookmark-store.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Bookmark</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./bookmark.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">mixins</span><span class="o">:</span> <span class="p">[</span><span class="nx">Reflux</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">BookmarkStore</span><span class="p">,</span> <span class="s1">&#39;bookmarks&#39;</span><span class="p">)],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">bookmarks</span><span class="o">:</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="p">[]}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">bookmarks</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Bookmark</span> <span class="nx">title</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span> <span class="nx">created</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">created</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">list</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">BookmarkList</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在组件中，我们通过<code>mixins: [Reflux.connect(BookmarkStore, 'bookmarks')]</code>将Store和组件关联起来，这样List组件<code>state</code>上的<code>bookmarks</code>就和<code>BookmarkStore</code>连接起来了。当<code>state.bookmarks</code>变化之后，<code>render</code>方法就会被自动调用。</p>

<p>对于每一个书签，就只是简单的展示内容即可：</p>

<h4>Bookmark组件</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Reflux</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;reflux&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Bookmark</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">created</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">created</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">created</span><span class="p">).</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s1">&#39;bookmark&#39;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">h5</span> <span class="nx">className</span><span class="o">=</span><span class="s1">&#39;title&#39;</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h5&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s1">&#39;date&#39;</span><span class="o">&gt;</span><span class="nx">Created</span> <span class="err">@</span> <span class="p">{</span><span class="nx">date</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/li&gt;;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Bookmark</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我使用了<code>moment</code>库将<code>unix timestamp</code>转换为日期字符串，然后写在页面上。</p>

<p>最后，<code>Utils</code>只是一个对<code>jQuery</code>的包装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jquery&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;promise&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fetch</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="nx">resolve</span><span class="p">).</span><span class="nx">fail</span><span class="p">(</span><span class="nx">reject</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们再来总结一下，<code>BookmarkStore</code>在初始化的时候，显式地调用了<code>onFetch</code>，这个动作会导致<code>BookmarkList</code>组件的<code>state</code>的更新，这个更新会导致<code>BookmarkList</code>的重绘，<code>BookmarkList</code>会依次迭代所有的<code>Bookmark</code>。</p>

<h3>更复杂一些</h3>

<p>当然，Reflux的好处不仅仅是上面描述的这种单向数据流。当<code>Store</code>，<code>Actions</code>以及具体的<code>组件</code>被解耦之后，构建大型的应用才能成为可能。我们来对上面的应用做一下扩展：我们为列表添加一个搜索功能。</p>

<p>随着用户的键入，我们发送请求到服务器，将过滤后的数据渲染为新的列表。我们需要这样几个东西</p>

<ol>
<li>一个SearchBox组件</li>
<li>一个新的<code>Action</code>：<code>search</code></li>
<li><code>BookmarkStore</code>上的一个新方法<code>onSearch</code></li>
<li>组件<code>SearchBox</code>需要和<code>BookmarkActions</code>关联起来</li>
</ol>


<p>为了让用户看到匹配的效果，我们需要将匹配到的关键字高亮起来，这样我们需要在<code>Bookmark</code>组件中监听<code>BookmarkStore</code>，当<code>BookmarkStore</code>发生变化之后，我们就可以即时修改书签的<code>title</code>了。</p>

<h4>搜索框组件</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkActions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../actions/bookmark-actions&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">SearchBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">performSearch</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">keyword</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">keyword</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">BookmarkActions</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">keyword</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;search&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span>
</span><span class='line'>              <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;type to search...&#39;</span>
</span><span class='line'>              <span class="nx">ref</span><span class="o">=</span><span class="s2">&quot;keyword&quot;</span>
</span><span class='line'>              <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">performSearch</span><span class="p">}</span> <span class="o">/&gt;</span>   
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">SearchBox</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>BookmarkStore</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jquery&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Reflux</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;reflux&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkActions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../actions/bookmark-actions&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Utils</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../utils/fetch-client&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkStore</span> <span class="o">=</span> <span class="nx">Reflux</span><span class="p">.</span><span class="nx">createStore</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">listenables</span><span class="o">:</span> <span class="p">[</span><span class="nx">BookmarkActions</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">onFetch</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">onFetch</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">Utils</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/bookmarks&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">bookmarks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">self</span><span class="p">.</span><span class="nx">trigger</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">data</span><span class="o">:</span> <span class="nx">bookmarks</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">match</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">onSearch</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">keyword</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">Utils</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/bookmarks?keyword=&#39;</span><span class="o">+</span><span class="nx">keyword</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">bookmarks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">self</span><span class="p">.</span><span class="nx">trigger</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">data</span><span class="o">:</span> <span class="nx">bookmarks</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">match</span><span class="o">:</span> <span class="nx">keyword</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">BookmarkStore</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在<code>BookmarkStore</code>中添加了<code>onSearch</code>方法，它会根据关键字来调用后台API进行搜索，并将结果<code>trigger</code>出去。由于数据本身的结构并没有变化（只是数量会由于过滤而变少），因此<code>BookmarkList</code>是无需修改的。</p>

<h4>书签高亮</h4>

<p>当搜索匹配之后，我们可以将对应的关键字高亮起来，这时候我们需要修改<code>Bookmark</code>组件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Reflux</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;reflux&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">BookmarkStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../stores/bookmark-store.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Bookmark</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">mixins</span><span class="o">:</span> <span class="p">[</span><span class="nx">Reflux</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">(</span><span class="nx">BookmarkStore</span><span class="p">,</span> <span class="s1">&#39;onMatch&#39;</span><span class="p">)],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">onMatch</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">match</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">match</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">match</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">created</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">created</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">created</span><span class="p">).</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">title</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">span</span>
</span><span class='line'>              <span class="nx">dangerouslySetInnerHTML</span><span class="o">=</span><span class="p">{{</span>
</span><span class='line'>                <span class="nx">__html</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;(&#39;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">match</span><span class="o">+</span><span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="s2">&quot;gi&quot;</span><span class="p">),</span> <span class="s1">&#39;&lt;span class=&quot;highlight&quot;&gt;$1&lt;/span&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}}</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s1">&#39;bookmark&#39;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">h5</span> <span class="nx">className</span><span class="o">=</span><span class="s1">&#39;title&#39;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h5&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s1">&#39;date&#39;</span><span class="o">&gt;</span><span class="nx">Created</span> <span class="err">@</span> <span class="p">{</span><span class="nx">date</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/li&gt;;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Bookmark</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>mixins: [Reflux.listenTo(BookmarkStore, 'onMatch')]</code>表示，我们需要监听<code>BookmarkStore</code>的变化，当变化发生时，调用<code>OnMatch</code>方法。<code>OnMatch</code>会修改组件的<code>match</code>属性，从而触发<code>render</code>。</p>

<p>在<code>render</code>中，我们替换关键字为<code>&lt;span class="highlight"&gt;$keyword&lt;/span&gt;</code>，这样就可以达到预期的效果了：</p>

<p><img src="http://abruzzi.github.com/images/2015/11/bookmark-search-resized.png" alt="bookmark search" /></p>

<h3>结论</h3>

<p>从上面的例子可以看到，我们从一开始就引入了Reflux。虽然第一个版本和React原生的写法差异并不是很大，但是当加入<code>SearchBox</code>功能之后，需要修改的地方非常清晰：添加<code>Actions</code>，在对应的<code>Store</code>中添加callback，然后在组件中使用。这种方法不仅可以最大程度的使用<code>React</code>的长处（diff render），而且使得代码逻辑变得较为清晰。</p>

<p>随着业务代码的不断增加，Reflux提供的方式确实可以在一定程度上控制代码的复杂性和可读性。</p>

<p>完整的<a href="https://github.com/abruzzi/react-reflux-demo">代码地址在这里</a>。</p>

<h3>其他参考</h3>

<ul>
<li><a href="http://www.bunniesandbeatings.com/RefluxManifesto/">Reflux“宣言”</a></li>
<li><a href="https://news.ycombinator.com/item?id=10381015">Flux is the new WndProc</a></li>
<li><a href="https://ochronus.com/react-reflux-example/">React Reflux Example</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看看这些年你都学了什么？]]></title>
    <link href="http://abruzzi.github.com/2015/11/what-you-have-learnt-those-years/"/>
    <updated>2015-11-01T17:03:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/11/what-you-have-learnt-those-years</id>
    <content type="html"><![CDATA[<h3>数据可视化</h3>

<p>多年下来，我的<code>Google Bookmarks</code>里已经有近万条的书签。大部分内容是我在读过一遍之后就收藏起来的，也有很多看了一眼之后，觉得不错，然后收藏起来准备以后读的（当然，你也知道，再也没有打开过）。</p>

<p>有没有一个方法可以让我以可视化的方式，看到这些年我都学了那些东西呢？将书签列表作为源数据，然后将这些信息可视化出来会非常有意思：比如收藏夹中的热门词是什么，哪段时间收藏了多少条的书签（学习投入程度趋势）等等。</p>

<p>下图是我的书签中，排行前<code>30</code>的关键字排序。可以明显的看出，我对于<code>JavaScript</code>的喜爱程度相当高，对<code>美食</code>的喜爱也超过了<code>python</code>和<code>linux</code>。</p>

<p><img src="http://abruzzi.github.com/images/2015/11/bookmarks-trending-resized.png" alt="bookmarks trending" /></p>

<p>这里我将使用<code>python</code>，结合<code>python</code>的一些库来实现<code>书签可视化</code>。简而言之，整个过程可以分成这样几个步骤：</p>

<ol>
<li>将Google Bookmarks导出为本地文件</li>
<li>将书签文件解析为容易处理的内部格式（比如python的dict等）</li>
<li>由于书签中会有中文的句子，所以会涉及到分词</li>
<li>统计词语的频率，并绘制成图标</li>
</ol>


<h4>数据源</h4>

<p><code>Google Bookmarks</code>本身可以直接导出成<code>HTML</code>文件。该<code>HTML</code>文件包含了时间戳和书签的标题，我们可以通过<code>python</code>的库<code>BeautifulSoup</code>将HTML中的文本抽取出来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_bookmarks_data</span><span class="p">():</span>
</span><span class='line'>  <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;bookmarks_10_21_15.html&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">(),</span> <span class="s">&quot;html.parser&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">soup</span><span class="o">.</span><span class="n">get_text</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">load_bookmarks_data</span><span class="p">()</span>    
</span></code></pre></td></tr></table></div></figure>


<p><code>BeautifulSoup</code>提供非常好用的API来抽取结构化文档中的内容。</p>

<p><img src="http://abruzzi.github.com/images/2015/11/bookmark-titles-resized.png" alt="bookmark titles" /></p>

<h4>分词</h4>

<p><code>BeautifulSoup</code>获得的是一条条独立的句子，我们需要使用分词器将所有的句子分解成片段。这里我使用了<code>jieba</code>（<a href="https://github.com/fxsjy/jieba">结巴分词</a>）分词器来完成这个任务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">jieba</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="s">&quot;我在出报表，你的博客写的怎么样了&quot;</span>
</span><span class='line'><span class="n">seg_list</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">cut_all</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">seg</span> <span class="ow">in</span> <span class="n">seg_list</span><span class="p">:</span>
</span><span class='line'>     <span class="k">print</span> <span class="n">seg</span>
</span></code></pre></td></tr></table></div></figure>


<p>将会输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">我</span>
</span><span class='line'><span class="err">在</span>
</span><span class='line'><span class="err">出</span>
</span><span class='line'><span class="err">报表</span>
</span><span class='line'><span class="err">，</span>
</span><span class='line'><span class="err">你</span>
</span><span class='line'><span class="err">的</span>
</span><span class='line'><span class="err">博客</span>
</span><span class='line'><span class="err">写</span>
</span><span class='line'><span class="err">的</span>
</span><span class='line'><span class="err">怎么样</span>
</span><span class='line'><span class="err">了</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们定义一个方法来将上一步中的文本分词：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">extract_segments</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>  <span class="n">seg_list</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">cut_all</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">seg</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">seg</span> <span class="ow">in</span> <span class="n">seg_list</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">seg</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>分词之后，我们将单词转换为小写，并剔除掉那些长度小于1的字符串。这样可以保证所有的词都是词语。python的<code>list推导式</code>写起来非常简洁，一行代码就完成了<code>过滤</code>和<code>映射</code>的工作。</p>

<h4>可视化</h4>

<p>有了分好的词之后，只需要统计每个词出现的频率，然后按照频率来绘制图表。我们使用<code>python</code>标准库中的<code>Counter</code>来实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tokenize</span><span class="p">():</span> 
</span><span class='line'>  <span class="n">filtered</span> <span class="o">=</span> <span class="n">extract_segments</span><span class="p">(</span><span class="n">load_bookmarks_data</span><span class="p">())</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Counter</span><span class="p">([</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">filtered</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>要获取前<code>N</code>个，只需要使用<code>most_common(N)</code>即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tokenize</span><span class="p">()</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[(</span><span class="s">u&#39;and&#39;</span><span class="p">,</span> <span class="mi">552</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;the&#39;</span><span class="p">,</span> <span class="mi">501</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;with&#39;</span><span class="p">,</span> <span class="mi">485</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;to&#39;</span><span class="p">,</span> <span class="mi">446</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;javascript&#39;</span><span class="p">,</span> <span class="mi">432</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;in&#39;</span><span class="p">,</span> <span class="mi">330</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;for&#39;</span><span class="p">,</span> <span class="mi">308</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;...&#39;</span><span class="p">,</span> <span class="mi">270</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;java&#39;</span><span class="p">,</span> <span class="mi">270</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;blog&#39;</span><span class="p">,</span> <span class="mi">269</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了数据之后，使用<code>matplotlib</code>做一个简单的<code>bar</code>图标：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">matplotlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">DataFrame</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">visualize</span><span class="p">():</span>
</span><span class='line'>  <span class="n">frame</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">tokenize</span><span class="p">()</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;keywords&#39;</span><span class="p">,</span> <span class="s">&#39;frequencies&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ax</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">&#39;bar&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">&#39;bookmarks_trending.png&#39;</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="s">&#39;png&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2015/11/bookmarks-trending-with-stops-resized.png" alt="" /></p>

<h4>stopwords</h4>

<p>不过，上图中有很多噪音信息，如<code>and</code>, <code>the</code>等，这些在所有文章中都会出现的词并没有实际意义，统称为<code>stopwords</code>。通常在计算过程中会将其忽略：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">tokenize</span><span class="p">():</span>  
</span><span class='line'>  <span class="n">stoplist</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="s">&#39;me&#39;</span><span class="p">,</span> <span class="s">&#39;my&#39;</span><span class="p">,</span> <span class="s">&#39;myself&#39;</span><span class="p">,</span> <span class="s">&#39;we&#39;</span><span class="p">,</span> <span class="s">&#39;our&#39;</span><span class="p">,</span> <span class="s">&#39;ours&#39;</span><span class="p">,</span> <span class="s">&#39;ourselves&#39;</span><span class="p">,</span> <span class="s">&#39;you&#39;</span><span class="p">,</span> <span class="s">&#39;your&#39;</span><span class="p">,</span> <span class="s">&#39;yours&#39;</span><span class="p">,</span> <span class="s">&#39;yourself&#39;</span><span class="p">,</span> <span class="s">&#39;yourselves&#39;</span><span class="p">,</span> <span class="s">&#39;he&#39;</span><span class="p">,</span> <span class="s">&#39;him&#39;</span><span class="p">,</span> <span class="s">&#39;his&#39;</span><span class="p">,</span> <span class="s">&#39;himself&#39;</span><span class="p">,</span> <span class="s">&#39;she&#39;</span><span class="p">,</span> <span class="s">&#39;her&#39;</span><span class="p">,</span> <span class="s">&#39;hers&#39;</span><span class="p">,</span> <span class="s">&#39;herself&#39;</span><span class="p">,</span> <span class="s">&#39;it&#39;</span><span class="p">,</span> <span class="s">&#39;its&#39;</span><span class="p">,</span> <span class="s">&#39;itself&#39;</span><span class="p">,</span> <span class="s">&#39;they&#39;</span><span class="p">,</span> <span class="s">&#39;them&#39;</span><span class="p">,</span> <span class="s">&#39;their&#39;</span><span class="p">,</span> <span class="s">&#39;theirs&#39;</span><span class="p">,</span> <span class="s">&#39;themselves&#39;</span><span class="p">,</span> <span class="s">&#39;what&#39;</span><span class="p">,</span> <span class="s">&#39;which&#39;</span><span class="p">,</span> <span class="s">&#39;who&#39;</span><span class="p">,</span> <span class="s">&#39;whom&#39;</span><span class="p">,</span> <span class="s">&#39;this&#39;</span><span class="p">,</span> <span class="s">&#39;that&#39;</span><span class="p">,</span> <span class="s">&#39;these&#39;</span><span class="p">,</span> <span class="s">&#39;those&#39;</span><span class="p">,</span> <span class="s">&#39;am&#39;</span><span class="p">,</span> <span class="s">&#39;is&#39;</span><span class="p">,</span> <span class="s">&#39;are&#39;</span><span class="p">,</span> <span class="s">&#39;was&#39;</span><span class="p">,</span> <span class="s">&#39;were&#39;</span><span class="p">,</span> <span class="s">&#39;be&#39;</span><span class="p">,</span> <span class="s">&#39;been&#39;</span><span class="p">,</span> <span class="s">&#39;being&#39;</span><span class="p">,</span> <span class="s">&#39;have&#39;</span><span class="p">,</span> <span class="s">&#39;has&#39;</span><span class="p">,</span> <span class="s">&#39;had&#39;</span><span class="p">,</span> <span class="s">&#39;having&#39;</span><span class="p">,</span> <span class="s">&#39;do&#39;</span><span class="p">,</span> <span class="s">&#39;does&#39;</span><span class="p">,</span> <span class="s">&#39;did&#39;</span><span class="p">,</span> <span class="s">&#39;doing&#39;</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;an&#39;</span><span class="p">,</span> <span class="s">&#39;the&#39;</span><span class="p">,</span> <span class="s">&#39;and&#39;</span><span class="p">,</span> <span class="s">&#39;but&#39;</span><span class="p">,</span> <span class="s">&#39;if&#39;</span><span class="p">,</span> <span class="s">&#39;or&#39;</span><span class="p">,</span> <span class="s">&#39;because&#39;</span><span class="p">,</span> <span class="s">&#39;as&#39;</span><span class="p">,</span> <span class="s">&#39;until&#39;</span><span class="p">,</span> <span class="s">&#39;while&#39;</span><span class="p">,</span> <span class="s">&#39;of&#39;</span><span class="p">,</span> <span class="s">&#39;at&#39;</span><span class="p">,</span> <span class="s">&#39;by&#39;</span><span class="p">,</span> <span class="s">&#39;for&#39;</span><span class="p">,</span> <span class="s">&#39;with&#39;</span><span class="p">,</span> <span class="s">&#39;about&#39;</span><span class="p">,</span> <span class="s">&#39;against&#39;</span><span class="p">,</span> <span class="s">&#39;between&#39;</span><span class="p">,</span> <span class="s">&#39;into&#39;</span><span class="p">,</span> <span class="s">&#39;through&#39;</span><span class="p">,</span> <span class="s">&#39;during&#39;</span><span class="p">,</span> <span class="s">&#39;before&#39;</span><span class="p">,</span> <span class="s">&#39;after&#39;</span><span class="p">,</span> <span class="s">&#39;above&#39;</span><span class="p">,</span> <span class="s">&#39;below&#39;</span><span class="p">,</span> <span class="s">&#39;to&#39;</span><span class="p">,</span> <span class="s">&#39;from&#39;</span><span class="p">,</span> <span class="s">&#39;up&#39;</span><span class="p">,</span> <span class="s">&#39;down&#39;</span><span class="p">,</span> <span class="s">&#39;in&#39;</span><span class="p">,</span> <span class="s">&#39;out&#39;</span><span class="p">,</span> <span class="s">&#39;on&#39;</span><span class="p">,</span> <span class="s">&#39;off&#39;</span><span class="p">,</span> <span class="s">&#39;over&#39;</span><span class="p">,</span> <span class="s">&#39;under&#39;</span><span class="p">,</span> <span class="s">&#39;again&#39;</span><span class="p">,</span> <span class="s">&#39;further&#39;</span><span class="p">,</span> <span class="s">&#39;then&#39;</span><span class="p">,</span> <span class="s">&#39;once&#39;</span><span class="p">,</span> <span class="s">&#39;here&#39;</span><span class="p">,</span> <span class="s">&#39;there&#39;</span><span class="p">,</span> <span class="s">&#39;when&#39;</span><span class="p">,</span> <span class="s">&#39;where&#39;</span><span class="p">,</span> <span class="s">&#39;why&#39;</span><span class="p">,</span> <span class="s">&#39;how&#39;</span><span class="p">,</span> <span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;any&#39;</span><span class="p">,</span> <span class="s">&#39;both&#39;</span><span class="p">,</span> <span class="s">&#39;each&#39;</span><span class="p">,</span> <span class="s">&#39;few&#39;</span><span class="p">,</span> <span class="s">&#39;more&#39;</span><span class="p">,</span> <span class="s">&#39;most&#39;</span><span class="p">,</span> <span class="s">&#39;other&#39;</span><span class="p">,</span> <span class="s">&#39;some&#39;</span><span class="p">,</span> <span class="s">&#39;such&#39;</span><span class="p">,</span> <span class="s">&#39;no&#39;</span><span class="p">,</span> <span class="s">&#39;nor&#39;</span><span class="p">,</span> <span class="s">&#39;not&#39;</span><span class="p">,</span> <span class="s">&#39;only&#39;</span><span class="p">,</span> <span class="s">&#39;own&#39;</span><span class="p">,</span> <span class="s">&#39;same&#39;</span><span class="p">,</span> <span class="s">&#39;so&#39;</span><span class="p">,</span> <span class="s">&#39;than&#39;</span><span class="p">,</span> <span class="s">&#39;too&#39;</span><span class="p">,</span> <span class="s">&#39;very&#39;</span><span class="p">,</span> <span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="s">&#39;t&#39;</span><span class="p">,</span> <span class="s">&#39;can&#39;</span><span class="p">,</span> <span class="s">&#39;will&#39;</span><span class="p">,</span> <span class="s">&#39;just&#39;</span><span class="p">,</span> <span class="s">&#39;don&#39;</span><span class="p">,</span> <span class="s">&#39;should&#39;</span><span class="p">,</span> <span class="s">&#39;now&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="n">stoplist</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="s">&#39;...&#39;</span><span class="p">,</span> <span class="s">&#39;com&#39;</span><span class="p">,</span> <span class="s">&#39;using&#39;</span><span class="p">,</span> <span class="s">u&#39;使用&#39;</span><span class="p">,</span> <span class="s">&#39;blog&#39;</span><span class="p">,</span> <span class="s">u&#39;博客&#39;</span><span class="p">,</span> <span class="s">u&#39;博客园&#39;</span><span class="p">,</span> <span class="s">u&#39;做法&#39;</span><span class="p">,</span> <span class="s">u&#39;论坛&#39;</span><span class="p">,</span> <span class="s">&#39;part&#39;</span><span class="p">,</span> <span class="s">u&#39;部分&#39;</span><span class="p">,</span> <span class="s">u&#39;天下&#39;</span><span class="p">])</span>
</span><span class='line'>  <span class="n">filtered</span> <span class="o">=</span> <span class="n">extract_segments</span><span class="p">(</span><span class="n">load_bookmarks_data</span><span class="p">())</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">Counter</span><span class="p">([</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">filtered</span> <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stoplist</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>重新绘制即可获得上文中的图：</p>

<p><img src="http://abruzzi.github.com/images/2015/11/bookmarks-trending-resized.png" alt="bookmarks trending" /></p>

<p>完整的代码<a href="https://github.com/abruzzi/bookmarks-viz">请参考这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工程中的编译原理 -- Mapfile解析器]]></title>
    <link href="http://abruzzi.github.com/2015/10/mapfile-parser/"/>
    <updated>2015-10-05T12:59:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/10/mapfile-parser</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>Mapfile是<code>MapServer</code>用来描述一个地图的配置文件。它是一个很简单的<code>声明式</code>语言，一个地图（Map）可以有多个层（Layer），每个层可以有很多属性（键值对）。在一个层的定义中，还可以定义若干个类（Class），这个类用以管理不同的样式（Style）。而每个类或者样式都可以由若干个属性（键值对）。</p>

<p>这里有一个实际的例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LAYER
</span><span class='line'>  NAME         "counties"
</span><span class='line'>  DATA         "counties-in-shaanxi-3857"
</span><span class='line'>  STATUS       default
</span><span class='line'>  TYPE         POLYGON
</span><span class='line'>  TRANSPARENCY 70
</span><span class='line'>
</span><span class='line'>  CLASS
</span><span class='line'>    NAME       "polygon"
</span><span class='line'>    STYLE
</span><span class='line'>      COLOR     255 255 255
</span><span class='line'>      OUTLINECOLOR 40 44 52
</span><span class='line'>    END
</span><span class='line'>  END
</span><span class='line'>END</span></code></pre></td></tr></table></div></figure>


<h4>最简单的层的定义</h4>

<p>最简单的情形是，我们定义了一个层<code>Layer</code>，但是没有指定任何的属性：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LAYER
</span><span class='line'>END</span></code></pre></td></tr></table></div></figure>


<p>我们期望parser可以输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="nx">layer</span><span class="o">:</span> <span class="kc">null</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>要做到这一步，首先需要定义符号<code>LAYER</code>和<code>END</code>，以及一些对空格，非法字符的处理等：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">\</span><span class="nx">s</span><span class="o">+</span>                     <span class="cm">/* skip whitespace */</span>
</span><span class='line'><span class="err">\</span><span class="nx">n</span><span class="o">|</span><span class="err">\</span><span class="nx">r</span><span class="err">\</span><span class="nx">n</span>                 <span class="cm">/* skip whitespace */</span>
</span><span class='line'><span class="s2">&quot;LAYER&quot;</span>                 <span class="k">return</span> <span class="s2">&quot;LAYER&quot;</span>
</span><span class='line'><span class="s2">&quot;END&quot;</span>                   <span class="k">return</span> <span class="s2">&quot;END&quot;</span>
</span><span class='line'><span class="o">&lt;&lt;</span><span class="nx">EOF</span><span class="o">&gt;&gt;</span>                 <span class="k">return</span> <span class="s1">&#39;EOF&#39;</span>
</span><span class='line'><span class="p">.</span>                       <span class="k">return</span> <span class="s1">&#39;INVALID&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于，空格，回车换行等，我们都直接跳过。对应的<code>BNF</code>也非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">expressions</span>
</span><span class='line'>    <span class="o">:</span> <span class="nx">decls</span> <span class="nx">EOF</span> <span class="p">{</span><span class="k">return</span> <span class="nx">$1</span><span class="p">;}</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">decls</span>
</span><span class='line'>    <span class="o">:</span> <span class="nx">LAYER</span> <span class="nx">END</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">layer</span><span class="o">:</span> <span class="kc">null</span><span class="p">}}</span>
</span><span class='line'>    <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>为层添加属性</h4>

<p>接下来我们来为层添加<code>Name</code>属性，首先还是添加符号<code>NAME</code>和对字符串的定义。这里的字符串被定义为：由双引号括起来的所有内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;NAME&quot;</span>                  <span class="k">return</span> <span class="s2">&quot;NAME&quot;</span>
</span><span class='line'><span class="s1">&#39;&quot;&#39;</span><span class="p">(</span><span class="s2">&quot;\\&quot;</span><span class="p">[</span><span class="s2">&quot;]|[^&quot;</span><span class="p">])</span><span class="o">*</span><span class="s1">&#39;&quot;&#39;</span>   <span class="k">return</span> <span class="s1">&#39;STRING&#39;</span>
</span><span class='line'><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="nx">zA</span><span class="o">-</span><span class="nx">Z</span><span class="p">]</span><span class="o">+</span>               <span class="k">return</span> <span class="s1">&#39;WORD&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们就可以为<code>BNF</code>添加一个新的节：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">decls</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">LAYER</span> <span class="nx">decl</span> <span class="nx">END</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">layer</span><span class="o">:</span> <span class="nx">$2</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">decl</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">NAME</span> <span class="nx">STRING</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>decl</code>中，我们将获得的字符串两头的引号去掉<code>$2.substring</code>。这样<code>decl</code>的值就会是字符串本身，而不是带着双引号的字符串了。修改之后的代码可以解析诸如这样的声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">LAYER</span>
</span><span class='line'>  <span class="nx">NAME</span> <span class="s2">&quot;counties&quot;</span>
</span><span class='line'><span class="nx">END</span>
</span></code></pre></td></tr></table></div></figure>


<p>并产生这样的输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span> <span class="nx">layer</span><span class="o">:</span> <span class="s1">&#39;counties&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是如果我们用来解析两个以上的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">LAYER</span>
</span><span class='line'>  <span class="nx">NAME</span>         <span class="s2">&quot;counties&quot;</span>
</span><span class='line'>  <span class="nx">DATA</span>         <span class="s2">&quot;counties-in-shaanxi-3857&quot;</span>
</span><span class='line'><span class="nx">END</span>
</span></code></pre></td></tr></table></div></figure>


<p>解析器会报告一个错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>node map.js expr
</span><span class='line'>
</span><span class='line'>/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:106
</span><span class='line'>        throw new Error<span class="o">(</span>str<span class="o">)</span>;
</span><span class='line'>              ^
</span><span class='line'>Error: Parse error on line 2:
</span><span class='line'>...       <span class="s2">&quot;counties&quot;</span>  DATA         <span class="err">&quot;</span>counti
</span><span class='line'>----------------------^
</span><span class='line'>Expecting <span class="s1">&#39;END&#39;</span>, got <span class="s1">&#39;WORD&#39;</span>
</span><span class='line'>    at Object.parseError <span class="o">(</span>/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:106:15<span class="o">)</span>
</span><span class='line'>    at Object.parse <span class="o">(</span>/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:171:22<span class="o">)</span>
</span><span class='line'>    at Object.commonjsMain <span class="o">[</span>as main<span class="o">]</span> <span class="o">(</span>/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:620:27<span class="o">)</span>
</span><span class='line'>    at Object.&lt;anonymous&gt; <span class="o">(</span>/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:623:11<span class="o">)</span>
</span><span class='line'>    at Module._compile <span class="o">(</span>module.js:456:26<span class="o">)</span>
</span><span class='line'>    at Object.Module._extensions..js <span class="o">(</span>module.js:474:10<span class="o">)</span>
</span><span class='line'>    at Module.load <span class="o">(</span>module.js:356:32<span class="o">)</span>
</span><span class='line'>    at Function.Module._load <span class="o">(</span>module.js:312:12<span class="o">)</span>
</span><span class='line'>    at Function.Module.runMain <span class="o">(</span>module.js:497:10<span class="o">)</span>
</span><span class='line'>    at startup <span class="o">(</span>node.js:119:16<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>即，期望一个<code>END</code>符号，但是却看到了一个<code>WORD</code>符号。我们只需要稍事修改，就可以让当前的语法支持多个属性的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">decls</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">LAYER</span> <span class="nx">pairs</span> <span class="nx">END</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">layer</span><span class="o">:</span> <span class="nx">$2</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pairs</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">pair</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span><span class="p">}</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="nx">pairs</span> <span class="nx">pair</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">$1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">)}</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pair</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">NAME</span> <span class="nx">STRING</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">|</span> <span class="nx">DATA</span> <span class="nx">STRING</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}};</span>
</span></code></pre></td></tr></table></div></figure>


<p>先看，<code>pair</code>的定义，它由<code>NAME STRING</code>或者<code>DATA STRING</code>组成，是我们语法中的终结符。再来看<code>pairs</code>的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">pairs</span><span class="o">:</span> <span class="nx">pair</span> <span class="o">|</span> <span class="nx">pairs</span> <span class="nx">pair</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个递归的定义可以保证我们可以写一条<code>pair</code>或者多条<code>pairs pair</code>属性定义语句。而对于多条的情况，我们需要将这行属性<code>规约</code>在一起，即当遇到这样的情形时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">NAME</span>         <span class="s2">&quot;counties&quot;</span>
</span><span class='line'><span class="nx">DATA</span>         <span class="s2">&quot;counties-in-shaanxi-3857&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要产生这样的输出：<code>{name: "counties", data: "counties-in-shaanxi-3857"}</code>。但是由于符号是逐个匹配的，我们会得到这样的匹配结果：<code>{name: "counties"}</code>和<code>{data: "counties-in-shaanxi-3857"}</code>，因此我们需要编写一个简单的函数来合并这些属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">function</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">o1</span><span class="p">,</span> <span class="nx">o2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">o1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">obj</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">o1</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">v</span> <span class="k">in</span> <span class="nx">o2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">obj</span><span class="p">[</span><span class="nx">v</span><span class="p">]</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">[</span><span class="nx">v</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照惯例，这种自定义的函数需要被定义在<code>%{</code>和<code>}%</code>括起来的<code>section</code>中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="nx">zA</span><span class="o">-</span><span class="nx">Z</span><span class="p">]</span><span class="o">+</span>               <span class="k">return</span> <span class="s1">&#39;WORD&#39;</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">)</span><span class="o">?</span>      <span class="k">return</span> <span class="s1">&#39;NUMBER&#39;</span>
</span><span class='line'><span class="o">&lt;&lt;</span><span class="nx">EOF</span><span class="o">&gt;&gt;</span>                 <span class="k">return</span> <span class="s1">&#39;EOF&#39;</span>
</span><span class='line'><span class="p">.</span>                       <span class="k">return</span> <span class="s1">&#39;INVALID&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">/</span><span class="nx">lex</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">o1</span><span class="p">,</span> <span class="nx">o2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">o1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">obj</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">o1</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">v</span> <span class="k">in</span> <span class="nx">o2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">obj</span><span class="p">[</span><span class="nx">v</span><span class="p">]</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">[</span><span class="nx">v</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="nx">start</span> <span class="nx">expressions</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span> <span class="cm">/* language grammar */</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们的解析器就可以识别多条属性定义了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>node map.js expr
</span><span class='line'><span class="o">{</span> layer: <span class="o">{</span> name: <span class="s1">&#39;counties&#39;</span>, data: <span class="s1">&#39;counties-in-shaanxi-3857&#39;</span> <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>嵌套的结构</h4>

<p>现在新的问题又来了，我们的解析器现在可以识别对层的对个属性的解析了，不过由于<code>CLASS</code>并不是由简单的键值对定义的，所以还需要进一步的修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">classes</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">CLASS</span> <span class="nx">pairs</span> <span class="nx">END</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="kr">class</span><span class="o">:</span> <span class="nx">$2</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>类由<code>CLASS</code>关键字和<code>END</code>关键字定义，而类的属性定义和<code>Layer</code>的属性定义并无二致，都可以使用<code>pairs</code>（多条属性）。而<code>classes</code>事实上是<code>pair</code>的另一种形式，就像对属性的定义一样，所以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">pair</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">NAME</span> <span class="nx">STRING</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">|</span> <span class="nx">DATA</span> <span class="nx">STRING</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">|</span> <span class="nx">classes</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，解析器就可以识别<code>CLASS</code>子句了。我们注意到，在<code>CLASS</code>中，还可以定义<code>STYLE</code>，因此又需要稍作扩展：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">pair</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">NAME</span> <span class="nx">STRING</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">|</span> <span class="nx">DATA</span> <span class="nx">STRING</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">|</span> <span class="nx">classes</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span><span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="nx">styles</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">styles</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">STYLE</span> <span class="nx">pairs</span> <span class="nx">END</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="p">{</span><span class="nx">style</span><span class="o">:</span> <span class="nx">$2</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，我们的解析器就可以处理样例中的所有语法了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>node map.js expr
</span><span class='line'><span class="o">{</span> layer:
</span><span class='line'>   <span class="o">{</span> name: <span class="s1">&#39;counties&#39;</span>,
</span><span class='line'>     data: <span class="s1">&#39;counties-in-shaanxi-3857&#39;</span>,
</span><span class='line'>     status: <span class="s1">&#39;default&#39;</span>,
</span><span class='line'>     <span class="nb">type</span>: 70,
</span><span class='line'>     class: <span class="o">{</span> name: <span class="s1">&#39;polygon&#39;</span>, style: <span class="o">[</span>Object<span class="o">]</span> <span class="o">}</span> <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的代码在github上的<a href="https://github.com/abruzzi/jison-demos">这个repo中</a>。</p>

<h3>总结</h3>

<p>使用<code>BNF</code>定义一个复杂配置文件的规则，事实上一个比较容易的工作。要手写这样一个解析器需要花费很多的时间，而且当你需要parser多种配置文件时，这将是一个非常无聊且痛苦的事情。学习<code>jison</code>可以帮助你很快的编写出小巧的解析器，在上面的<code>Mapfile</code>的例子中，所有的代码还不到<code>100</code>行。下一次再遇到诸如复杂的文本解析，配置文件读取的时候，先不要忙着编写<code>正则表达式</code>，试试更高效，更轻便的<code>jison</code>吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工程中的编译原理 -- Jison入门篇]]></title>
    <link href="http://abruzzi.github.com/2015/09/write-a-parser/"/>
    <updated>2015-09-30T18:45:00+10:00</updated>
    <id>http://abruzzi.github.com/2015/09/write-a-parser</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>在代码编写中，很多时候我们都会处理字符串：发现字符串中的某些规律，然后将想要的部分抽取出来。对于发杂一些的场景，我们会使用<code>正则表达式</code>来帮忙，正则表达式强大而灵活，主流的变成语言如<code>Java</code>，<code>Ruby</code>的标准库中都对其由很好的支持。</p>

<p>但是有时候，当接收到的字符串结构更加复杂（往往会这样）的时候，正则表达式要么会变的不够用，要么变得超出我们能理解的复杂度。这时候，我们可能借助一些更为强大的工具。</p>

<p>下面是一个实际的例子，这个代码片段是MapServer的配置文件，它用来描述地图中的一个层，其中包含了嵌套的<code>CLASS</code>，而<code>CLASS</code>自身又包含了一个嵌套的<code>STYLE</code>节。显然，正则表达式在解释这样复杂的结构化数据方面，是无法满足需求的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LAYER
</span><span class='line'>  NAME         "counties"
</span><span class='line'>  DATA         "counties-in-shaanxi-3857"
</span><span class='line'>  STATUS       default
</span><span class='line'>  TYPE         POLYGON
</span><span class='line'>  TRANSPARENCY 70
</span><span class='line'>
</span><span class='line'>  CLASS
</span><span class='line'>    NAME       "polygon"
</span><span class='line'>    STYLE
</span><span class='line'>      COLOR     255 255 255
</span><span class='line'>      OUTLINECOLOR 40 44 52
</span><span class='line'>    END
</span><span class='line'>  END
</span><span class='line'>END</span></code></pre></td></tr></table></div></figure>


<p>在UNIX世界，很早的时候，人们就开发出了很多用来生成<code>解释器</code>(parser)的工具，比如早期的<a href="https://en.wikipedia.org/wiki/Lex_(software">lex</a>)/<a href="https://en.wikipedia.org/wiki/Yacc">yacc</a>之类的工具和后来的<a href="https://en.wikipedia.org/wiki/GNU_bison">bison</a>。通过这些工具，程序员只需要定义一个结构化的文法，工具就可以自动生成解释器的C代码，非常容易。在JavaScript世界中，有一个非常类似的工具，叫做<a href="https://zaach.github.io/jison/">jison</a>。在本文中，我将以jison为例，说明在JavaScript中自定义一个解释器是何等的方便。</p>

<p><strong>注意</strong>，我们这里说的<code>解释器</code>不是一个编译器，编译器有非常复杂的后端（抽象语法树的生成，虚拟机器指令，或者机器码的生成等等），我们这里仅仅讨论一个编译器的<strong>前端</strong>。</p>

<h3>一点理论知识</h3>

<p>本文稍微需要一点理论知识，当年编译原理课的时候，各种名词诸如<code>规约</code>，<code>推导式</code>，<code>终结符</code>，<code>非终结符</code>等等，</p>

<h4>上下文无关文法（Context Free Grammar）</h4>

<p>先看看维基上的这段定义：</p>

<blockquote><p>在计算机科学中，若一个形式文法 G = (N, Σ, P, S) 的产生式规则都取如下的形式：V -> w，则称之为上下文无关文法（英语：context-free grammar，缩写为CFG），其中 V∈N ，w∈(N∪Σ)* 。上下文无关文法取名为“上下文无关”的原因就是因为字符 V 总可以被字串 w 自由替换，而无需考虑字符 V 出现的上下文。</p></blockquote>

<p>基本上跟没说一样。要定义一个上下文无关文法，数学上的精确定义是一个在4元组：<code>G = (N, Σ, P, S)</code>，其中</p>

<ol>
<li>N是“非终结符”的集合</li>
<li>Σ是“终结符”的集合，与N的交集为空（不想交）</li>
<li>P表示规则集（即N中的一些元素以何种方式）</li>
<li>S表示起始变量，是一个“非终结符”</li>
</ol>


<p>其中，规则集P是重中之重，我们会在下一小节解释。经过这个形式化的解释，基本还是等于没说，在继续之前，我们先来看一下BNF，然后结合一个例子来帮助理解。</p>

<p>话说我上一次写这种<a href="http://www.cnblogs.com/abruzzi/archive/2009/06/06/1497449.html">学院派的文章</a>还是2009年，时光飞逝。</p>

<h4>巴科斯范式（Backus Normal Form）</h4>

<p>维基上的解释是：</p>

<blockquote><p>巴科斯范式（英语：Backus Normal Form，缩写为 BNF），又称为巴科斯-诺尔范式（英语：Backus-Naur Form，也译为巴科斯-瑙尔范式、巴克斯-诺尔范式），是一种用于表示上下文无关文法的语言，上下文无关文法描述了一类形式语言。它是由约翰·巴科斯（John Backus）和彼得·诺尔（Peter Naur）首先引入的用来描述计算机语言语法的符号集。</p></blockquote>

<p>简而言之，它是由推导公式的集合组成，比如下面这组公式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>S -&gt; T + T | T - T | T
</span><span class='line'>T -&gt; F * F | F / F | F
</span><span class='line'>F -&gt; NUMBER | '(' S ')'
</span><span class='line'>NUMBER -&gt;  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</span></code></pre></td></tr></table></div></figure>


<p>可以被“继续分解”的元素，我们称之为“非终结符”，如上式中的<code>S</code>, <code>T</code>, <code>NUMBER</code>，而无法再细分的如<code>0..9</code>，<code>(</code>，<code>)</code>则被称之为终结符。<code>|</code>表示或的关系。在上面的公式集合中，<code>S</code>可以被其右边的<code>T+T</code>替换，也可以被<code>T-T</code>替换，还可以被<code>T</code>本身替换。回到上一小节最后留的悬疑，在这里：</p>

<ol>
<li>N就是{<code>S</code>, <code>T</code>, <code>F</code>, <code>NUMBER</code>}</li>
<li>Σ就是{<code>0</code>, <code>1</code>, &#8230;, <code>9</code>, <code>(</code>, <code>)</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>}</li>
<li>P就是上面的BNF式子</li>
<li>S就是这个的<code>S</code>(第一个等式的左边状态)</li>
</ol>


<p>上面的BNF其实就是四则运算的形式定义了，也就是说，由这个BNF可以解释一切出现在四则运算中的文法，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1+1
</span><span class='line'>8*2+3
</span><span class='line'>(10-6)*4/2</span></code></pre></td></tr></table></div></figure>


<p>而所谓上下文无关，指的是在推导式的左边，都是非终结符，并且可以<strong>无条件</strong>的被其右边的式子替换。此处的<strong>无条件</strong>就是上下文无关。</p>

<h3>实现一个四则运算计算器</h3>

<p>我们这里要使用<a href="https://zaach.github.io/jison/">jison</a>，jison是一个npm包，所以安装非常容易：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>npm install -g jison
</span></code></pre></td></tr></table></div></figure>


<p>安装之后，你本地就会有一个命令行工具<code>jison</code>，这个工具可以将你定义的<code>jison</code>文件编译成一个<code>.js</code>文件，这个文件就是解释器的源码。我们先来定义一些<code>符号</code>(token)，所谓<code>token</code>就是上述的<code>终结符</code>：</p>

<h4>第一步：识别数字</h4>

<p>创建一个新的文本文件，假设就叫<code>calc.jison</code>，在其中定义一段这样的符号表:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">\</span><span class="nx">s</span><span class="o">+</span>                   <span class="cm">/* skip whitespace */</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">)</span><span class="o">?</span>    <span class="k">return</span> <span class="s1">&#39;NUMBER&#39;</span>
</span><span class='line'><span class="o">&lt;&lt;</span><span class="nx">EOF</span><span class="o">&gt;&gt;</span>               <span class="k">return</span> <span class="s1">&#39;EOF&#39;</span>
</span><span class='line'><span class="p">.</span>                     <span class="k">return</span> <span class="s1">&#39;INVALID&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们定义了4个符号，所有的空格（<code>\s+</code>），我们都跳过；如果遇到数字，则返回<code>NUMBER</code>；如果遇到文件结束，则返回<code>EOF</code>；其他的任意字符(.)都返回<code>INVALID</code>。</p>

<p>定义好符号之后，我们就可以编写<code>BNF</code>了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">expressions</span>
</span><span class='line'>    <span class="o">:</span> <span class="nx">NUMBER</span> <span class="nx">EOF</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们定义了一条规则，即<code>expressions -&gt; NUMBER EOF</code>。在<code>jison</code>中，当匹配到规则之后，可以执行一个代码块，比如此处的输出语句<code>console.log($1)</code>。这个产生式的右侧有几个元素，就可以用<code>$加序号</code>来引用，如<code>$1</code>表示<code>NUMBER</code>实际对应的值，<code>$2</code>为<code>EOF</code>。</p>

<p>通过命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jison calc.jison
</span></code></pre></td></tr></table></div></figure>


<p>可以在当前目录下生成一个<code>calc.js</code>文件，现在来创建一个文件<code>expr</code>，文件内容为一个数字，然后执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>node calc.js expr
</span></code></pre></td></tr></table></div></figure>


<p>来测试我们的解释器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;3.14&quot;</span> &gt; expr
</span><span class='line'><span class="nv">$ </span>node calc.js expr
</span><span class='line'>3.14
</span></code></pre></td></tr></table></div></figure>


<p>目前我们完整的代码仅仅20行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* lexical grammar */</span>
</span><span class='line'><span class="o">%</span><span class="nx">lex</span>
</span><span class='line'><span class="o">%%</span>
</span><span class='line'>
</span><span class='line'><span class="err">\</span><span class="nx">s</span><span class="o">+</span>                   <span class="cm">/* skip whitespace */</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">)</span><span class="o">?</span>    <span class="k">return</span> <span class="s1">&#39;NUMBER&#39;</span>
</span><span class='line'><span class="o">&lt;&lt;</span><span class="nx">EOF</span><span class="o">&gt;&gt;</span>               <span class="k">return</span> <span class="s1">&#39;EOF&#39;</span>
</span><span class='line'><span class="p">.</span>                     <span class="k">return</span> <span class="s1">&#39;INVALID&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">/</span><span class="nx">lex</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="nx">start</span> <span class="nx">expressions</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span> <span class="cm">/* language grammar */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">expressions</span>
</span><span class='line'>    <span class="o">:</span> <span class="nx">NUMBER</span> <span class="nx">EOF</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>加法</h4>

<p>我们的解析器现在只能计算一个数字（输入给定的数字，给出同样的输出），我们来为它添加一条新的规则:加法。首先我们来扩展目前的BNF，添加一条新的规则：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">expressions</span>
</span><span class='line'>    <span class="o">:</span> <span class="nx">statement</span> <span class="nx">EOF</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">statement</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">NUMBER</span> <span class="nx">PLUS</span> <span class="nx">NUMBER</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span> <span class="o">+</span> <span class="nx">$3</span><span class="p">}</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="nx">NUMBER</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>即，<code>expressions</code>由<code>statement</code>组成，而<code>statement</code>可以有两个规则规约得到，一个就是纯数字，另一个是<code>数字 加号 数字</code>，这里的<code>PLUS</code>是我们定义的一个新的符号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;+&quot;</span>    <span class="k">return</span> <span class="s2">&quot;PLUS&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当输入匹配到规则<code>数字 加号 数字</code>时，对应的块<code>{$$ = $1 + $3}</code>会被执行，也就是说，两个<code>NUMBER</code>对应的值会加在一起，然后赋值给整个表达式的值，这样就完成了<strong>语义</strong>的翻译。</p>

<p>我们在文件<code>expr</code>中写入算式：<code>3.14+1</code>，然后测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>jison calc.jison
</span><span class='line'><span class="nv">$ </span>node calc.js expr
</span><span class='line'>13.14
</span></code></pre></td></tr></table></div></figure>


<p>嗯，结果有点不对劲，两个数字都被当成了字符串而拼接在一起了，这是因为JavaScript中，<code>+</code>的二义性和弱类型的自动转换导致的，我们需要做一点修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">statement</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">NUMBER</span> <span class="nx">PLUS</span> <span class="nx">NUMBER</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$3</span><span class="p">)}</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="nx">NUMBER</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用JavaScript内置的<code>parseFloat</code>将字符串转换为数字类型，再做加法即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>jison calc.jison
</span><span class='line'><span class="nv">$ </span>node calc.js expr
</span><span class='line'>4.140000000000001
</span></code></pre></td></tr></table></div></figure>


<h4>更多的规则</h4>

<p>剩下的事情基本就是把BNF翻译成<code>jison</code>的语法了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>S -&gt; T + T | T - T | T
</span><span class='line'>T -&gt; F * F | F / F | F
</span><span class='line'>F -&gt; NUMBER | <span class="s1">&#39;(&#39;</span> S <span class="s1">&#39;)&#39;</span>
</span><span class='line'>NUMBER -&gt;  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">expressions</span>
</span><span class='line'>    <span class="o">:</span> <span class="nx">statement</span> <span class="nx">EOF</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">statement</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">term</span> <span class="nx">PLUS</span> <span class="nx">term</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span> <span class="o">+</span> <span class="nx">$3</span><span class="p">}</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="nx">term</span> <span class="nx">MINUS</span> <span class="nx">term</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span> <span class="o">-</span> <span class="nx">$3</span><span class="p">}</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="nx">term</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">term</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">factor</span> <span class="nx">MULTIPLE</span> <span class="nx">factor</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span> <span class="o">*</span> <span class="nx">$3</span><span class="p">}</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="nx">factor</span> <span class="nx">DIVIDE</span> <span class="nx">factor</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span> <span class="o">/</span> <span class="nx">$3</span><span class="p">}</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="nx">factor</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factor</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">NUMBER</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$1</span><span class="p">)}</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="nx">LP</span> <span class="nx">statement</span> <span class="nx">RP</span> <span class="p">{</span><span class="nx">$$</span> <span class="o">=</span> <span class="nx">$2</span><span class="p">}</span>
</span><span class='line'>  <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，像复杂一些的四则运算：<code>(10-2) * 3 + 2/4</code>，我们的计算器也已经有能力来计算出结果了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>jison calc.jison
</span><span class='line'><span class="nv">$ </span>node calc.js expr
</span><span class='line'>24.5
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>我们在本文中讨论了BNF和上下文无关文法，以及这些理论如何与工程实践联系起来。这里的<code>四则运算计算器</code>当然是一个很简单的例子，不过我们从中可以看到将<code>BNF</code>形式文法翻译成实际可以工作的代码是多么方便。我在后续的文章中会介绍<code>jison</code>更高级的用法，以及如何在实际项目中使用<code>jison</code>产生的解释器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可视化你的足迹 - Web端]]></title>
    <link href="http://abruzzi.github.com/2015/09/show-your-map-in-browser/"/>
    <updated>2015-09-20T22:44:00+10:00</updated>
    <id>http://abruzzi.github.com/2015/09/show-your-map-in-browser</id>
    <content type="html"><![CDATA[<h3>可视化你的足迹</h3>

<p><a href="http://icodeit.org/2015/09/visualize-your-steps/">上一篇文章</a>讲述了如何在服务器端通过MapServer来生成地图。虽然MapServer发布出来的地图是标准的<a href="https://en.wikipedia.org/wiki/Web_Map_Service">WMS</a>服务，但是我们还需要一个客户端程序来展现。我们在上一篇中，通过一些小脚本将照片中的地理信息抽取到了一个<code>GeoJSON</code>文件中。<code>GeoJSON</code>是一种向量图层格式，向量数据可以在服务器端绘制成栅格图，也可以直接在客户端canvas上直接绘制出来。当数据量比较大的时候，我们更倾向于在服务器端绘制，这样只需要在网络上传输一张图片（而且可以做缓存）。大数据量的客户端绘制在性能上会比较差（当然现在已经有了一些新的解决方案，我们后续再细谈），特别是有用户交互时，会出现明显的卡顿。</p>

<p>在本文中，我将分别使用客户端和服务端绘制的两种方式来展现两种不同的地图：使用<a href="http://openlayers.org/">OpenLayers</a>直接在客户端绘制矢量图，以及使用<a href="http://leafletjs.com/">Leaflet</a>来展示在服务器端绘制好的栅格图层。</p>

<h4>使用OpenLayers3展示GeoJSON</h4>

<p>展示GeoJSON非常容易，也是一种比较直接的方式，只需要将GeoJSON文件发送到前端，然后直接通过客户端渲染即可。使用<code>OpenLayers3</code>的API，代码会是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;data/places-ive-been-3857.json&#39;</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">geojson</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">vectorSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">Vector</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">features</span><span class="o">:</span> <span class="p">(</span><span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">GeoJSON</span><span class="p">()).</span><span class="nx">readFeatures</span><span class="p">(</span><span class="nx">geojson</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>客户端发送一个<code>ajax</code>请求，得到<code>GeoJSON</code>数据之后，将其转换成一个<code>向量</code>类型。<code>OpenLayers</code>定义了很多中格式读取器，比如KML的，GML的，GeoJSON的等等。然后我们可以定义一个样式函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">image</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">Circle</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">radius</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">fill</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">stroke</span><span class="o">:</span> <span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">Stroke</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#f04e98&#39;</span><span class="p">,</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;Point&#39;</span><span class="o">:</span> <span class="p">[</span><span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">Style</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">image</span><span class="o">:</span> <span class="nx">image</span>
</span><span class='line'>    <span class="p">})]</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">styleFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">feature</span><span class="p">,</span> <span class="nx">resolution</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">styles</span><span class="p">[</span><span class="nx">feature</span><span class="p">.</span><span class="nx">getGeometry</span><span class="p">().</span><span class="nx">getType</span><span class="p">()];</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数会应用到向量集的<code>Point</code>类型，将其绘制为一个红色，半径为5像素的圆圈。有了数据和样式，我们再来创建一个新的向量，然后生成一个新的图层：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">vectorLayer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">layer</span><span class="p">.</span><span class="nx">Vector</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">source</span><span class="o">:</span> <span class="nx">vectorSource</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">style</span><span class="o">:</span> <span class="nx">styleFunction</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建地图，为了方便对照，我们加入了另外一个<code>ol.source.Stamen</code>图层作为参照。这样当缩放到较小的区域时，我们可以清楚的知道当前的点和地物的对照，比如道路名称，建筑名称等，从而确定目前的位置。这是一种非常常见的GIS应用的场景，但是需要注意的是，不同的图层需要有相同的空间映射方式，OpenLayers默认才用EPSG:3857，所以需要两者都采用该投影：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">Map</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">layers</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">layer</span><span class="p">.</span><span class="nx">Tile</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">source</span><span class="o">:</span> <span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">Stamen</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">layer</span><span class="o">:</span> <span class="s1">&#39;toner&#39;</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>    <span class="nx">vectorLayer</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;map&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">controls</span><span class="o">:</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">control</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">attributionOptions</span><span class="o">:</span> <span class="cm">/** @type {olx.control.AttributionOptions} */</span> <span class="p">({</span>
</span><span class='line'>      <span class="nx">collapsible</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>  <span class="nx">view</span><span class="o">:</span> <span class="k">new</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">View</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">center</span><span class="o">:</span> <span class="nx">ol</span><span class="p">.</span><span class="nx">proj</span><span class="p">.</span><span class="nx">transform</span><span class="p">([</span><span class="mf">108.87316667</span><span class="p">,</span> <span class="mf">34.19216667</span><span class="p">],</span> <span class="s1">&#39;EPSG:4326&#39;</span><span class="p">,</span> <span class="s1">&#39;EPSG:3857&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">zoom</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建地图时，我们可以通过<code>layers</code>来指定多个图层。在OpenLayers中，有很多类型的<code>Tile</code>，<code>Stamen</code>是一个专注于做<a href="http://maps.stamen.com/#watercolor/12/37.7706/-122.3782">非常漂亮的地图的组织</a>。</p>

<p>在view中，我们需要将经纬度（EPSG:4326）转换为墨卡托投影（EPSG:3857）。这样我们就可以得到一个很漂亮的地图了：</p>

<p><img src="http://abruzzi.github.com/images/2015/09/toner-resized.png" alt="geojson toner" /></p>

<h4>使用Leaflet展示栅格数据</h4>

<p>我们在上一篇中已经生成了MapServer的WMS地图，这里可以用<a href="http://leafletjs.com/">Leaflet</a>来消费该地图（使用OpenLayers也可以消费，不过V3似乎在和WMS集成时有些问题，我此处使用了<a href="http://leafletjs.com/">Leaflet</a>）。</p>

<p>首先创建一个地图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="nx">L</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="s1">&#39;map&#39;</span><span class="p">).</span><span class="nx">setView</span><span class="p">([</span><span class="mi">34</span><span class="p">,</span> <span class="mi">108</span><span class="p">],</span> <span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就可以直接接入我们在上一篇中生成的地图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">L</span><span class="p">.</span><span class="nx">tileLayer</span><span class="p">.</span><span class="nx">wms</span><span class="p">(</span><span class="s2">&quot;http://localhost:9999/cgi-bin/mapserv?map=/data/xian.map&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">layers</span><span class="o">:</span> <span class="s1">&#39;places&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">format</span><span class="o">:</span> <span class="s1">&#39;image/png&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">transparent</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">maxZoom</span><span class="o">:</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">minZoom</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}).</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>便于对照，我们先添加一个底图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">L</span><span class="p">.</span><span class="nx">tileLayer</span><span class="p">(</span> <span class="s1">&#39;http://{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.png&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">attribution</span><span class="o">:</span> <span class="s1">&#39;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot; title=&quot;OpenStreetMap&quot; target=&quot;_blank&quot;&gt;OpenStreetMap&lt;/a&gt; contributors | Tiles Courtesy of &lt;a href=&quot;http://www.mapquest.com/&quot; title=&quot;MapQuest&quot; target=&quot;_blank&quot;&gt;MapQuest&lt;/a&gt; &lt;img src=&quot;http://developer.mapquest.com/content/osm/mq_logo.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">subdomains</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;otile1&#39;</span><span class="p">,</span><span class="s1">&#39;otile2&#39;</span><span class="p">,</span><span class="s1">&#39;otile3&#39;</span><span class="p">,</span><span class="s1">&#39;otile4&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">detectRetina</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">addTo</span><span class="p">(</span> <span class="nx">map</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以看到最终的地图：</p>

<p><img src="http://abruzzi.github.com/images/2015/09/xian-leaflet-resized.png" alt="xian leaflet" /></p>

<p>使用Web界面，我们可以自由的拖拽，移动，并且方便的放大缩小。如果观察浏览器的网络标签，在放大地图时，可以看到很多的WMS请求：</p>

<p><img src="http://abruzzi.github.com/images/2015/09/wms-requests-resized.png" alt="xian leaflet" /></p>

<h4>其他</h4>

<p>如果你对代码感兴趣，可以参看<a href="https://github.com/abruzzi/places-ive-been">这个repo</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可视化你的足迹 - 服务器端]]></title>
    <link href="http://abruzzi.github.com/2015/09/visualize-your-steps/"/>
    <updated>2015-09-18T13:36:00+10:00</updated>
    <id>http://abruzzi.github.com/2015/09/visualize-your-steps</id>
    <content type="html"><![CDATA[<h3>可视化你的足迹</h3>

<p>数据可视化可以让读者以一种轻松的方式来消费数据，人类大脑在处理图形的速度是处理文本的<code>66,000</code>倍，这也是人们常常说的<code>一图胜千言</code>。在本文中，我们通过将日常中很容易收集到的数据，通过一系列的处理，并最终展现在地图上。这仅仅是GIS的一个很简单场景，但是我们可以看到，当空间数据和地图结合在一起时，可以在可视化上得到很好的效果，读者可以很容易从中获取信息。</p>

<p><img src="http://abruzzi.github.com/images/2015/09/viz-steps-resized.png" alt="steps" /></p>

<p>我们在本文中会制作一个这样的地图，图中灰色的线是城市中的道路，小六边形表示照片拍摄地。颜色表示当时当地拍摄照片的密度，红色表示密集，黄色为稀疏。可以看到，我的活动区域主要集中在左下角，那是公司所在地和我的住处，:)</p>

<p>要展现数据，首先需要采集数据，不过这些已经在日常生活中被不自觉的被记录下来了：</p>

<h4>数据来源</h4>

<p>如果你开启了iPhone相机中的定位功能，拍照的时候，iPhone会自动把当前的地理信息写入到图片的元数据中，这样我们就可以使用这些数据来做进一步的分析了。</p>

<p>我在去年学习OpenLayers的时候已经玩过一些简单的<a href="http://icodeit.org/placesihavebeen">足迹可视化</a>，另外还有一篇<a href="http://www.infoq.com/cn/articles/visualization-of-the-global-seismic-system">全球地震信息的可视化</a>，但是仅仅是展示矢量信息，并没有深入，而且都是一些前端的JavaScript的代码。最近又在重新整理之前的GIS知识，重新把这个作为例子来练手。当然，这次会涉及一些<strong>地图编辑</strong>，<strong>空间计算</strong>的内容。</p>

<p>我的照片一般都通过Mac自带的Photos管理（前身iPhoto），手机里照片会定期同步上去。老版本的iPhoto用的是XML文件来存储照片的<a href="https://en.wikipedia.org/wiki/Exchangeable_image_file_format">EXIF数据</a>，新的Photos的实现里，数据被存储在了好几个SQLite数据库文件中，不过问题不大，我们只需要写一点Ruby代码就可以将数据转化为标准格式，这里使用GeoJSON，GeoJSON既可以方便人类阅读，也可以很方便的导入到PostGIS或者直接在客户端展现。</p>

<h3>实现步骤</h3>

<p>我们现在要绘制照片拍摄的密度图，大概需要这样一些步骤：</p>

<ol>
<li>抽取照片的EXIF信息（经度，纬度，创建时间等）</li>
<li>编写脚本将抽取出来的信息转换成通用格式（GeoJSON）</li>
<li>使用QGIS将这些点的集合导入为图层</li>
<li>插入一些由六边形组成的图层（设置合适的大小）</li>
<li>计算落在各个多边形中的点的个数，并生成新的图层heatmap</li>
<li>使用MapServer来渲染基本地图</li>
</ol>


<h4>数据抽取</h4>

<p>Mac上的Photos会将照片的元数据存储在一个SQLite3格式的数据库中，文件名为<code>Library.apdb</code>，通常位于这个位置<code>~/Pictures/Photos\ Library.photoslibrary/Database/apdb/Library.apdb</code>。这个文件可以通过<code>SQLite3</code>的客户端直接打开，不过由于可能有其他进程（Mac自己的）打开了该文件，所以会有锁文件，你可能需要先将这个文件拷贝到另外一个位置。</p>

<p>然后将表<code>RKVersion</code>中的部分信息导出即可，SQLite内置了很方便的导出功能，通过它提供的shell客户端<code>sqlite3</code>，将信息导出到csv文件中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sqlite&gt; .mode csv
</span><span class='line'>sqlite&gt; .headers on
</span><span class='line'>sqlite&gt; .output places-ive-been.csv
</span><span class='line'>sqlite&gt; <span class="k">select </span>datetime<span class="o">(</span>imageDate+978307200, <span class="s1">&#39;unixepoch&#39;</span>, <span class="s1">&#39;localtime&#39;</span><span class="o">)</span> as imageDate, exifLatitude, exifLongitude from RKVersion where exifLatitude and exiflongitude;
</span><span class='line'>sqlite&gt; .output stdout
</span></code></pre></td></tr></table></div></figure>


<p>注意这里的日期，苹果的日期偏移和其他公司不同，始于2001年1月1日，所以要在<code>imageDate</code>之后加上这个<code>base</code>值，然后将文件以<code>.csv</code>的格式导出到<code>places-ive-been.csv</code>中，该文件包含3列：时间，纬度，精度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>imageDate,exifLatitude,exifLongitude
</span><span class='line'><span class="s2">&quot;2012-10-25 16:34:01&quot;</span>,34.19216667,108.87316667
</span><span class='line'><span class="s2">&quot;2012-10-28 14:45:53&quot;</span>,35.1795,109.9275
</span><span class='line'><span class="s2">&quot;2012-10-28 14:45:45&quot;</span>,35.1795,109.9275
</span><span class='line'><span class="s2">&quot;2012-10-25 16:34:04&quot;</span>,34.19216667,108.87316667
</span><span class='line'><span class="s2">&quot;2012-10-19 23:01:05&quot;</span>,34.19833333,108.86733333
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h4>转换为GeoJSON</h4>

<p>方便以后的转换起见，我们将这个文件转换成<code>GeoJSON</code>（其实很多客户端工具可以支持CSV的导入，不过<code>GeoJSON</code>更为标准一些）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;csv&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;places-ive-been.csv&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'><span class="n">keys</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">delete</span> <span class="n">lines</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;places-ive-been.json&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;Feature&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:geometry</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>              <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;Point&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:coordinates</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">to_f</span><span class="p">,</span> <span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_f</span><span class="o">]</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="ss">:properties</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>              <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">({</span>
</span><span class='line'>        <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;FeatureCollection&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:crs</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">:properties</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;EPSG:4326&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="ss">:features</span> <span class="o">=&gt;</span> <span class="n">data</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段脚本可以将我们的<code>.csv</code>转换成标准的<code>geojson</code>格式，注意此处的空间投影使用的是<code>EPSG:4326</code>。</p>

<h4>导入为QGIS图层</h4>

<p><a href="http://www.qgis.org/en/site/">QGIS</a>是一个开源的GIS套件，包括桌面端的编辑器和服务器端，这里我们只是用器桌面端来进行图层的编辑。</p>

<p>将我们的<code>GeoJSON</code>导入之后，会看到这样的一个可视化的效果！</p>

<p><img src="http://abruzzi.github.com/images/2015/09/points-resized.png" alt="points" /></p>

<p>我们还可以导入其他的地图图层，这样可以清楚的看到点所在的区域（国家地图图层可以在<a href="http://www.naturalearthdata.com/">此处下载</a>）：</p>

<p><img src="http://abruzzi.github.com/images/2015/09/points-countries-resized.png" alt="points with countries" /></p>

<p>好了，有了基础数据之后，我们来作进一步的数据分析 &#8211; 即生成密度图。首先使用QGIS的插件<code>MMQGIS</code>的<strong>生成多边形图层</strong>功能(Create -> Create Grid Layer)，为了处理速度，我们可以将地图放大到一定范围（我选择西安市，我在这里活动比较密集）。</p>

<p>选择六边形<code>hexagon</code>，并设置合适的大小（如果是<code>3857</code>参考系，即按照公里数来设置，会比较容易一些，如果是4326，则需要自己计算）。简而言之，需要保证每个格子都包含一些点，不至于太密，也不至于太稀疏。</p>

<p><img src="http://abruzzi.github.com/images/2015/09/hexagon-resized.png" alt="hexagon" /></p>

<h4>计算密度</h4>

<p>QGIS提供了很多的数据分析功能，我们在这个例子中使用（Vector -> Analysis Tools -> Points in Polygon）工具，这个工具需要两个图层，一个是点集图层，一个是多边形图层。然后会将结果生成到一个新的图层中，我们可以将其命名为<code>places-ive-been-density.shp</code>，同时需要指定一个字段来存储统计出来的值（density）。</p>

<p>这个过程可能会花费一点时间，根据需要计算的点集合多边形的格式（也就是地图上的区域）。</p>

<p>完成之后会得到一个<code>Shapefile</code>（其实是一组，具体可以<a href="https://en.wikipedia.org/wiki/Shapefile">参看这里</a>）。其实在这个过程中，绝大多数多边形是不包含任何数据的，我们需要过滤掉这些多余的多边形，这样可以缩减绘制地图的时间。</p>

<p>我们可以将这个文件导入到PostGIS中进行简化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>shp2pgsql -I -s 4326 data/places-ive-been/places-ive-been-3857-density.shp places_density |<span class="se">\</span>
</span><span class='line'><span class="nv">PGUSER</span><span class="o">=</span>gis <span class="nv">PGPASSWORD</span><span class="o">=</span>gis  psql -h localhost -d playground
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>shp2pgsql</code>命令是<a href="http://">GDAL工具包</a>提供的命令，用以将<code>Shapefile</code>导入到<code>PostGIS</code>中，你可以通过</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install gdal --with-postgresql
</span></code></pre></td></tr></table></div></figure>


<p>来安装。</p>

<p>GDAL会提供很多的工具，比如用来转换各种数据格式，投影，查看信息等等。</p>

<p>导入之后，我们可以在PostGIS的客户端查看，编辑这些数据等。比如在过滤之前，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="n">places_density</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们导入的数据中有<code>103166</code>条记录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="n">places_density</span> <span class="k">where</span> <span class="n">density</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而过滤之后，我们仅剩下<code>749</code>条数据。</p>

<p>通过GDAL提供的另一个工具<code>ogr2ogr</code>可以方便的执行过滤，并生成新的<code>Shapefile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ogr2ogr -f <span class="s2">&quot;ESRI Shapefile&quot;</span> data/places-ive-been/places_heatmap.shp <span class="se">\</span>
</span><span class='line'>PG:<span class="s2">&quot;host=localhost user=gis dbname=playground pass</span>
</span><span class='line'><span class="s2">word=gis&quot;</span> <span class="se">\</span>
</span><span class='line'>-sql <span class="s2">&quot;SELECT density, geom FROM places_density WHERE density IS NOT NULL;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这条命令可以得到一个新的文件，这个就是最终的用来绘制地图的文件了。</p>

<h4>绘制地图</h4>

<p>开源世界中有很多的工具可以完成地图的绘制，比如<a href="http://mapserver.org/">MapServer</a>，<a href="http://geoserver.org/">GeoServer</a>，<a href="http://mapnik.org/">Mapnik</a>等等。我们在这篇文章中使用MapServer来完成地图的绘制，MapServer的安装和配置虽然比较容易，但是也需要花费一些时间，所以我将其放到了<a href="https://github.com/abruzzi/mapserver-box">这个repo中</a>，你可以直接clone下来使用。（需要你在虚拟机中安装ansible来完成provision）。</p>

<p>MapServer的配置很简单，类似于一个XML，不过是自定义的格式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>MAP
</span><span class='line'>  IMAGETYPE      PNG
</span><span class='line'>  EXTENT         11859978.732852 3994742.227345 12753503.595559 4580388.268737
</span><span class='line'>  SIZE           8000 6000
</span><span class='line'>  SHAPEPATH      <span class="s2">&quot;/data/heatmap&quot;</span>
</span><span class='line'>  IMAGECOLOR     255 255 255
</span><span class='line'>
</span><span class='line'>  PROJECTION
</span><span class='line'>    <span class="s2">&quot;init=epsg:3857&quot;</span>   <span class="c">##required</span>
</span><span class='line'>  END
</span><span class='line'>
</span><span class='line'>  LAYER <span class="c"># States polygon layer begins here</span>
</span><span class='line'>    NAME         heatmap
</span><span class='line'>    DATA         heatmap_3857
</span><span class='line'>    STATUS       default
</span><span class='line'>    TYPE         POLYGON
</span><span class='line'>
</span><span class='line'>    CLASS
</span><span class='line'>      NAME <span class="s2">&quot;basic&quot;</span>
</span><span class='line'>      STYLE
</span><span class='line'>        COLOR        255 255 178
</span><span class='line'>        OUTLINECOLOR 255 255 178
</span><span class='line'>      END
</span><span class='line'>    END
</span><span class='line'>  END
</span><span class='line'>
</span><span class='line'>END
</span></code></pre></td></tr></table></div></figure>


<p>这些配置基本上都比较自解释，比如设置图片格式，图片大小，Shapefile的路径，图层的名称等，<strong>MapServer的文档在开源软件中来说，都算比较烂的</strong>，但是对于这些基本概念的解释还比较详尽，大家可以<a href="http://mapserver.org/documentation.html#documentation">去这里参考</a>。</p>

<p>这里我们定义了一个图层，每个Map中可以定义多个图层（我们完成的最终效果图就是西安市的道路图和照片拍摄密度图两个图层的叠加）。</p>

<p>这个配置绘制出来的地图是没有颜色差异的，全部都是<code>255 255 178</code>。不过MapServer的配置提供了很好的样式定义，比如我们可以定义这样的一些规则：</p>

<ol>
<li>如果密度为1，则设置颜色为淡黄</li>
<li>如果密度在1-2,则设置为比淡黄红一点的颜色</li>
<li>以此类推</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  LAYER
</span><span class='line'>    NAME         heatmap
</span><span class='line'>    DATA         heatmap_3857
</span><span class='line'>    STATUS       default
</span><span class='line'>    TYPE         POLYGON
</span><span class='line'>    <span class="c">#CLASSITEM density</span>
</span><span class='line'>
</span><span class='line'>    CLASS
</span><span class='line'>      EXPRESSION <span class="o">([</span>density<span class="o">]</span> <span class="o">=</span> 1<span class="o">)</span>
</span><span class='line'>      STYLE
</span><span class='line'>        COLOR        255 255 178
</span><span class='line'>        OUTLINECOLOR 255 255 178
</span><span class='line'>      END
</span><span class='line'>    END
</span><span class='line'>
</span><span class='line'>    CLASS
</span><span class='line'>      EXPRESSION <span class="o">([</span>density<span class="o">]</span> &gt; 1 AND <span class="o">[</span>density<span class="o">]</span> &lt;<span class="o">=</span> 2<span class="o">)</span>
</span><span class='line'>      STYLE
</span><span class='line'>        COLOR        254 204 92
</span><span class='line'>        OUTLINECOLOR 254 204 92
</span><span class='line'>      END
</span><span class='line'>    END
</span><span class='line'>
</span><span class='line'>    CLASS
</span><span class='line'>      EXPRESSION <span class="o">([</span>density<span class="o">]</span> &gt; 2 AND <span class="o">[</span>density<span class="o">]</span> &lt;<span class="o">=</span> 3<span class="o">)</span>
</span><span class='line'>      STYLE
</span><span class='line'>        COLOR        253 141 60
</span><span class='line'>        OUTLINECOLOR 253 141 60
</span><span class='line'>      END
</span><span class='line'>    END
</span><span class='line'>
</span><span class='line'>    CLASS
</span><span class='line'>      EXPRESSION <span class="o">([</span>density<span class="o">]</span> &gt; 3 AND <span class="o">[</span>density<span class="o">]</span> &lt;<span class="o">=</span> 10<span class="o">)</span>
</span><span class='line'>      STYLE
</span><span class='line'>        COLOR        240 59 32
</span><span class='line'>        OUTLINECOLOR 240 59 32
</span><span class='line'>      END
</span><span class='line'>    END
</span><span class='line'>
</span><span class='line'>    CLASS
</span><span class='line'>      EXPRESSION <span class="o">([</span>density<span class="o">]</span> &gt; 10 AND <span class="o">[</span>density<span class="o">]</span> &lt; 3438<span class="o">)</span>
</span><span class='line'>      STYLE
</span><span class='line'>        COLOR        189 0 38
</span><span class='line'>        OUTLINECOLOR 189 0 38
</span><span class='line'>      END
</span><span class='line'>    END
</span><span class='line'>
</span><span class='line'>  END
</span></code></pre></td></tr></table></div></figure>


<p>这样我们的地图展现出来就会比较有层次感，而且通过颜色的加深，也能体现<code>热图</code>本身的含义。</p>

<p>同样的原理，如果将那些自己创建的多边形替换为行政区域划分的多边形，则可以得到另外一种形式的<code>热图</code>：</p>

<p><img src="http://abruzzi.github.com/images/2015/09/heatmap-in-shaanxi-resized.png" alt="shaanxi-heatmap" /></p>

<h3>总结</h3>

<p>我们通过使用一些开源工具（MapServer，QGis，PostGIS，GDAL等），构建出一个基于GIS的数据可视化框架。在这个stack上，我们可以很容易的将一些其他数据也通过可视化的方式展现出来（公用自行车站点分布，出租车分布等等）。MapServer可以发布标准的<a href="https://en.wikipedia.org/wiki/Web_Map_Service">WMS</a>服务，因此可以很好的和客户端框架集成，从而带来更加友好的用户体验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写一本书？]]></title>
    <link href="http://abruzzi.github.com/2015/08/how-to-write-a-book/"/>
    <updated>2015-08-04T13:24:00+10:00</updated>
    <id>http://abruzzi.github.com/2015/08/how-to-write-a-book</id>
    <content type="html"><![CDATA[<p>我在过去的几年中，写了4本书。有传统意义上的两本实体书：<a href="http://www.amazon.cn/JavaScript%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%9E%E8%B7%B5-%E9%82%B1%E4%BF%8A%E6%B6%9B/dp/B00COG3YVU/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1438658024&amp;sr=1-1">《JavaScript核心概念及实践》</a>和<a href="http://www.amazon.cn/%E8%BD%BB%E9%87%8F%E7%BA%A7Web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E9%82%B1%E4%BF%8A%E6%B6%9B/dp/B012R5A1NQ/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1438658024&amp;sr=1-2">《轻量级Web应用开发》</a>，还有两本电子书<a href="https://selfstore.io/products/348">《3周3页面》</a>和<a href="https://selfstore.io/products/351">《函数式编程乐趣》</a>。当然对我而言，主职工作是软件开发，写作是个副业。</p>

<p>在写作的过程中，有一些<code>有趣的</code>心得。</p>

<ul>
<li>写作本身是一个很好的<code>学习过程</code>（至少是一个驱动你学习的动力）</li>
<li>写书非常枯燥，特别是校对的时候</li>
<li>写作<strong>不会</strong>让你变得富有，但是<strong>有时候</strong>会让你开心（不总是）</li>
</ul>


<h3>写文章 vs 写书</h3>

<p>写博客/文章和写书还是有很大差别的，一个明显的差异是写文章会比较随意，而且应该尽量保持精简。一篇文章提供一些信息即可，应该尽量远离细节（如果写一篇教程，则另当别论）。而写书则应该尽可能的深入细节，尽可能可以让读者依书自修。</p>

<h4>投入与回报</h4>

<p>首先要明白的一点是，<strong>不要指望用写书来赚钱</strong>，至少前4本是这样的。粗略的算一下：我的第一本书卖了3000册，每卖一本我可以得到4元RMB，一共就是12,000元RMB。而这本书我断断续续写了三年。那是很多个周末，很多个假期，很多个夜晚的付出换来的，如果真正要计算投入产出比的话（纯粹金钱上），这显然是一个毫不合算的事情。</p>

<p>作为一个参考，<a href="http://www.ibm.com/developerworks/cn/author/">IBM developerWorks</a>的投稿，千字200元，一般写5,000字以内，也就是800元RMB左右。而要写<a href="http://icodeit.org/about-me/">一篇这样的文章</a>，我只需要一天（当然需要数周/数月的积累）。12,000元RMB需要写15篇文章，如果每周写一篇，不到4个月就可以写完，而且写文章比写书容易多了，毕竟篇幅比较短小，易于校对。而且对于大部分开发者来说，固定在一个主题上的难度要比15个独立的主题简单的多，因为无需特别深入。</p>

<p>所以根据经验，要抱着<code>公益</code>的情怀来写书。也就是说为了让知识更好的分享，让你学习到的先进科学技术来帮助更多的开发者，提高他们的开发效率，让他们可以在周末多休息一天。而至于翻译技术书籍，那基本上就是免费的了，完全是一个公益活动（耗时数月，斟酌字句，推敲表达方式，但是价格极为低廉：千字60元RMB），所以下次见了技术书籍的译者，就多少给他捐点吧，他们才是在<strong>为人民服务</strong>。</p>

<h4>知识的诅咒</h4>

<p>“知识的诅咒”是指人们在获得了某种知识<strong>之后</strong>，就无法想象<strong>没有这种知识</strong>的情况了。这种现象随处可见，比如一个你到了一个从未去过的陌生城市，遇到以为当地人，然后向他问路。当地人觉得已经说的很清楚了，但是你还是不知道该怎么走。另一个例子是：假设你不认识泰文，然后你打开任何一本<code>泰文</code>写的小说，你只能依稀感觉到这是一种文字，除此之外你并不能从中获取任何的信息。但是当你学习了一段时间<code>泰文</code>之后，再来看这本小说，之前的那种感受就再也没有了。</p>

<p><img src="http://abruzzi.github.com/images/2015/08/curse-resized.jpg" alt="curse" /></p>

<p>写书的时候，你首先需要具备某种知识。但是写书的目的是将这些知识传递给那些不具备此知识的人，而根据“知识的诅咒”，你又无法确知那些初学者会遇到哪些问题！解决这个问题的方法就是找初学者来试读。而且为了保险起见，还应该找尽可能多的人来试读。</p>

<h3>写作方式</h3>

<p>一种方式是自下而上的，写一些独立的文章，最后发现可以串起来，然后形成一本书，另一种方式是自上而下，但是又会逐步调整。根据经验，不论是写一篇简单的博客，还是写一本书，都需要按照自上而下的方式。随心所欲的写下去，基本上都收不住，而且整个文章支离破碎，貌似有很多内容，但是不成章法，读者也无法轻松的获取知识。</p>

<p>先列出大的章节，然后逐步细化，但是未必是按照顺序来写。先编写自己最熟悉的部分，然后逐步完善。例子的选取需要精妙而恰当，最好有图例来说明。</p>

<h4>配图制作</h4>

<p>一般而言，我在书中会使用两种图：流程图和一些截屏。截屏通常使用Mac OSX自身的功能就已经足够，而流程图我会采用一些额外的工具如：</p>

<ul>
<li>graphviz</li>
<li>keynote/sketch</li>
</ul>


<p><img src="http://abruzzi.github.com/images/2015/08/cgi.png" alt="cgi flow" /></p>

<p><a href="http://icodeit.org/2012/01/%E4%BD%BF%E7%94%A8graphviz%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE/">用Graphviz画图</a>的好处就是可以将图像代码一样放入版本库来管理。</p>

<p>除此之外，我还学习了一些设计软件的基本用法，事实上只需要用一些简单的元素就可以做出非常专业的配图：</p>

<ul>
<li>字形/字体（大小，粗细的变化）</li>
<li>颜色（基本的配色理论就可以做出很舒服的配色）</li>
<li>层次（尺寸，位置，颜色的深浅）</li>
<li>阴影</li>
</ul>


<p><img src="http://abruzzi.github.com/images/2015/06/mock-server-resized.png" alt="front-end deployment" /></p>

<h4>代码格式</h4>

<p>书中实例需要很多代码来说明，如果是制作电子书的话，可以使用Markdown预处理器自带的功能来高亮。另外如果需要RTF格式，可以使用这些工具：</p>

<ul>
<li><a href="">highlight</a>工具</li>
<li>intelij中的插件<code>copy on steriod</code></li>
</ul>


<p>这里有一篇博客来说明如何将你的代码<a href="http://icodeit.org/2015/01/copy-code-with-style/">带着格式拷贝到剪贴板中</a>，拷贝之后，就可以将这些内容粘贴到Word或者Keynote中了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">jest</span><span class="p">.</span><span class="nx">dontMock</span><span class="p">(</span><span class="s1">&#39;../components/headline.jsx&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Headline&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react/addons&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Headline</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../components/headline.jsx&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">TestUtils</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">TestUtils</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;#render&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="s2">&quot;this is a title&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">headline</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Headline</span> <span class="nx">title</span><span class="o">=</span><span class="p">{</span><span class="nx">text</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">findRenderedDOMComponentWithTag</span><span class="p">(</span><span class="nx">headline</span><span class="p">,</span> <span class="s1">&#39;h4&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">headline</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">()).</span><span class="nx">toBeDefined</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">headline</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">().</span><span class="nx">textContent</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>一些潜在的<code>坑</code></h4>

<p>在写作的过程中，会有一些潜在的坑。这些所谓的坑是新人可能无法想到的。相对于言之无物，不知如何下笔，最痛苦的其实在于<code>平淡</code>。大部分时候，你可能很容易就能写出开头，但是很难坚持到最后。即使好不容易写完了第一版，后续的重读和修改，会让你苦不堪言。</p>

<p>内容写好之后，样式是下一个重要的问题，好的内容需要有与之匹配的排版。在中国，作者不但要负责内容，还要负责一些排版的事情。这一点非常奇葩，但是又是实情。这也是我更推荐电子版的原因（排版更加美观，选择更加多样，而且一旦有问题可以更容易的修改）。</p>

<p>另外一个问题是错别字检查！检查错别字对于作者来说，是一件<a href="http://www.guokr.com/article/439010/">非常困难</a>的实情。而对于读者来说，则是一件很容易的事情。这跟<code>知识的诅咒</code>的道理一样。</p>

<p><img src="http://abruzzi.github.com/images/2015/08/typo.jpg" alt="typo" /></p>

<h3>发布方式</h3>

<h4>实体书</h4>

<p>传统的出版方式有一些明显的问题，这些问题已经和现代的知识传递方式产生了冲突：</p>

<ol>
<li>时滞性（新技术的更新速度远远超过审批，印刷等流程的时间）</li>
<li>排版（如何低成本做到语法高亮，或者彩图）</li>
<li>更新频率（当技术更新之后，如何更新，是传统纸质书无法解决的问题）</li>
</ol>


<p>传统的出版方式有点像传统的软件开发，一本书从开始写作到最终出版，要经过很多环节。忽略掉写作过程，从交稿到出版会经历很多次审核和校对，可能会历时4-8个月，着这个过程中，很多东西都可能发生了变化，一个典型的例子是《用AngularJS开发下一代Web应用》，原版为英文版，翻译成中文版再到出版之后，书中的很大一部分内容已经过时。读者拿到书之后，会发现书中的内容已经和当前的版本/文档不匹配了。这种现状随着技术的更新速度和频率还会再加剧。</p>

<p>第二点是排版。我听说国内有些出版社已经开始接受<a href="http://wowubuntu.com/markdown/">Markdown</a>作为稿件的格式，但是大部分还采用Word或者WPS等格式，这样排版就变成了一个大问题。以我自己为例，我的原稿用Markdown写，但是写了几章之后不得不切换到Microsoft word上，而我自己的Mac OSX下的排版到编辑的Windows下就会变样，而且还会涉及字符集，字体，Word版本等等问题的影响，最后导致印刷出来和原始稿件出入很大。</p>

<p>最后一点是更新频率，如果发现了错别字或者错误的地方（即使之前检查过多次，仍然会有漏网之鱼），由于实体书的特殊性，一般需要等到再次印刷才能解决。这意味着先购买的读者会承担一些风险，更新后的版本又如何让读者看到呢？总不能又买一本吧。</p>

<p>但是这些问题都可以通过电子书来很好的解决。首先，电子书可以随时更新，最低限度的降低时滞性。排版上来说，作者可以使用Markdown来编写，而展现则可以应用一些预定义的模板来完成。最后，更新频率完全可以控制，对读者来说风险更低，因为电子版书籍的可以很容易的追踪交易记录，从而得到免费的更新过的版本。</p>

<h4>电子书</h4>

<p>目前已经有很多的渠道可以发布电子书，比如<a href="https://www.gitbook.com/">gitbhook</a>，<a href="http://zhibimo.com/">知笔墨</a>。这些应用的出现，大大降低了发布<code>书籍</code>的成本，我的<a href="https://selfstore.io/products/348">《函数式编程乐趣》</a>，用了3天就完成了草稿，而发布只需要数秒。</p>

<p>另外一个问题是书籍的价格和作者的收入。一本书定价50元RMB，出版社给作者的版税是8%，也就是说，每卖出一本，作者可以得到4元，如果你的书非常畅销，这还是一个不错的价格。但是可能90%的书籍都不会是畅销书（就好比每个班级都会有优等生，但是他们仅占全班人数的10%一样）。这对作者是一种浪费：你需要耗时数月甚至数年来写一本书，然后市场的反馈又非常慢（毕竟你无法出版一本未完成的书）。</p>

<p>我在<a href="https://selfstore.io/">selfstore.io</a>上有两本电子书：<a href="https://selfstore.io/products/348">《3周3页面》</a>和<a href="https://selfstore.io/products/351">《函数式编程乐趣》</a>，<a href="https://selfstore.io/products/348">《3周3页面》</a>定价为16元，每卖出一本，扣除掉交易费之后，我可以得到14.7元。</p>

<p>对我来说，这样可以得到更多的回报，对于读者则可以更加快速的得到更新，而且由于有<a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details">预览版</a>和一系列的<a href="http://icodeit.org/3p3w/">其他信息</a>，还可以在很大程度上降低读者的风险（更不用说快递费，等待时间等问题）。我在gitbook上的统计显示，《3周3页面》已经被累计下载了28,861次，实际的读者也将近5,000。而且没有任何的审核流程，也没有排版的时间浪费，我只需要关注内容即可。</p>
]]></content>
  </entry>
  
</feed>
