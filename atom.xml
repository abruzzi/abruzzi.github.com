<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I code it]]></title>
  <link href="http://abruzzi.github.com/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2015-02-14T19:36:55+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux命令行中的7个小技巧]]></title>
    <link href="http://abruzzi.github.com/2015/02/linux-tips/"/>
    <updated>2015-02-14T17:48:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/02/linux-tips</id>
    <content type="html"><![CDATA[<h3>Linux命令行中的7个小技巧</h3>

<p>命令行是开发者的好朋友，<code>*nix</code>系统（包括Mac OS X和各种Linux）都自带了强大的Shell环境，作为一个专业的程序员，Shell是离不开的。这里总结了几个常用的小技巧，都是我自己平时经常用，而又不想每次都去Google的。</p>

<h4>如何知道哪个进程在监听4000端口？</h4>

<p>当启动服务时，经常会遇到想要<code>Address already in use</code>这样的异常，那么如何知道是哪个进程占用了该端口呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsof -i :4000
</span></code></pre></td></tr></table></div></figure>


<p><code>lsof</code>会列出系统目前打开的文件（List open files，Linux世界中，一切都是文件），<code>-i</code>表示网络地址（Internet address），注意此处的冒号。如果不带参数，lsof会列出所有打开的网络地址：</p>

<p><img src="http://abruzzi.github.com/images/2015/02/lsof-resized.png" alt="lsof" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsof -i :4000
</span><span class='line'>COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
</span><span class='line'>ruby    32303 jtqiu    7u  IPv4 0x947b402a4bb8370b      0t0  TCP *:terabase <span class="o">(</span>LISTEN<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Shell中如何设置代理？</h4>

<p>很多公司都会有一个代理服务器供员工上外网使用，命令行中设置代理非常容易：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span><span class="s2">&quot;http://username:password@hosename:port&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果密码中有特设字符，比如<code>$</code>的话，需要转义一下。使用URLEncoding即可，比如<code>$</code>就是<code>%24</code>。最简单的就是在Chrome的<code>Console</code>中输入<code>encodeURIComponent("$")</code>来获得转义字符。</p>

<p>如果不想对某些地址使用代理，可以设置<code>no_proxy</code>环境变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">no_proxy</span><span class="o">=</span><span class="s2">&quot;127.0.0.1, localhost, *.cnn.com, 192.168.1.10, domain.com:8080&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>如何为svn中的脚本设置可执行属性</h4>

<p>你在Linux下创建了一个可执行脚本<code>e2e_test.sh</code>，但是团队里的其他人工作在Windows系统上，当你提交可执行脚本之后，他们checkout的是一个不能执行的文件！（其实也在情理之中，Windows这种垃圾货什么时候正常过呢？）</p>

<p>这时候可以通过给这个脚本设置一个<code>svn</code>的属性:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>svn propset svn:executable <span class="s2">&quot;*&quot;</span> e2e_test.sh
</span></code></pre></td></tr></table></div></figure>


<p>这样在Windows上才heckout之后就正常了。</p>

<h4>在Bash脚本中如何判断一个文件是否可执行？</h4>

<p>有时候我们在<code>Bash</code>中需要判断某个文件是否可以执行，这行脚本可以解救你：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> -x <span class="nv">$FILENAME</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>  <span class="c"># the file is executable</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>判断某个文件是否存在的脚本为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="nv">$FILENAME</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>  <span class="c"># the file is existing</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h4>我正在用的Linux是哪个发行版？</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsb_release -a
</span></code></pre></td></tr></table></div></figure>


<p>在<code>SUSE</code>系统中运行这条命令可以得到这样的输出:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsb_release -a
</span><span class='line'>LSB Version:    core-2.0-noarch:core-3.0-noarch:core-2.0-x86_64:core-3.0-x86_64:desktop-3.1-amd64:desktop-3.1-noarch:graphics-2.0-amd64:graphics-2.0-noarch:graphics-3.1-amd64:graphics-3.1-noarch
</span><span class='line'>Distributor ID: SUSE LINUX
</span><span class='line'>Description:    SUSE Linux Enterprise Server 10 <span class="o">(</span>x86_64<span class="o">)</span>
</span><span class='line'>Release:        10
</span><span class='line'>Codename:       n/a
</span></code></pre></td></tr></table></div></figure>


<p>而在<code>ubuntu</code>上则为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsb_release  -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID: Ubuntu
</span><span class='line'>Description:    Ubuntu 12.04.3 LTS
</span><span class='line'>Release:        12.04
</span><span class='line'>Codename:       precise
</span></code></pre></td></tr></table></div></figure>


<p>与之相关的还有个问题是我当前的操作系统是<code>32位还是64为呢</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>uname -m
</span><span class='line'>x86_64
</span></code></pre></td></tr></table></div></figure>


<p>或者使用<code>file</code>命令来查看系统自带的执行文件的元数据信息:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file /usr/bin/file
</span><span class='line'>/usr/bin/file: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for </span>GNU/Linux 2.6.15, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xe04b36145abc21d863652b93e6a0d069f7dfd3f4, stripped
</span></code></pre></td></tr></table></div></figure>


<h4>查找文件(跳过某些指定目录)</h4>

<p>你想要统计系统中所有的<code>JavaScript</code>文件的数量，但是又不想把外部的库文件（位于<code>libs</code>目录中）统计在内：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>find . -path ./libs -prune -o -name <span class="s2">&quot;*.js&quot;</span> | wc -l
</span></code></pre></td></tr></table></div></figure>


<p>这里大概解释一下，上面的命令其实等于这条命令的缩写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>find . -path ./libs -a -prune -o -name <span class="s2">&quot;*.js&quot;</span> | wc -l
</span></code></pre></td></tr></table></div></figure>


<p>也即</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>find . -path ./libs -and -prune -or -name <span class="s2">&quot;*.js&quot;</span> | wc -l
</span></code></pre></td></tr></table></div></figure>


<p>翻译成伪代码相当于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">path</span> <span class="o">==</span> <span class="s2">&quot;./libs&quot;</span>
</span><span class='line'>    <span class="n">prune</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">find_by_name</span> <span class="s2">&quot;*.js&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>断点续传</h4>

<p>下载了一半，网络断了。小文件的话大不了重来一次，但是如果是一个7G的镜像呢？好在我们有<code>wget -c</code>。<code>wget</code>基本上是Linux中下载软件的标配了，它有很多的参数，甚至可以将整个静态网站克隆到本地，断点续传当然是支持的了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget -c https://downloads.cloudera.com/demo_vm/virtualbox/cloudera-quickstart-vm-4.6.0-0-virtualbox.7z --no-check-certificate
</span><span class='line'>--2014-05-08 12:32:25--  https://downloads.cloudera.com/demo_vm/virtualbox/cloudera-quickstart-vm-4.6.0-0-virtualbox.7z
</span><span class='line'>Connecting to 172.19.6.47:8080... connected.
</span><span class='line'>Proxy request sent, awaiting response... 206 Partial Content
</span><span class='line'>Length: 3393638045 <span class="o">(</span>3.2G<span class="o">)</span>, 2951427152 <span class="o">(</span>2.7G<span class="o">)</span> remaining <span class="o">[</span>text/plain<span class="o">]</span>
</span><span class='line'>Saving to: <span class="sb">`</span>cloudera-quickstart-vm-4.6.0-0-virtualbox.7z<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>13% <span class="o">[</span>++++++++++                                                                      <span class="o">]</span> 450,866,893 57.8K/s  eta 3h 57m
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ThoughtWorks我们做内部培训？]]></title>
    <link href="http://abruzzi.github.com/2015/01/how-we-do-training-in-thoughtworks/"/>
    <updated>2015-01-25T01:20:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/01/how-we-do-training-in-thoughtworks</id>
    <content type="html"><![CDATA[<h3>ThoughtWorks内部培训</h3>

<p>对新人的培训是每个企业都绕不开的一个话题，企业当然想要每个新人都能直接独当一面，最好可以直接上项目贡献自己的价值。但是从经验来看，所有新人到一个新环境都需要学习很多不同的新东西（新技术，框架，语言，工作方式等等），而每个企业对于培训新人都有各种各样的策略，比如老人带新人，比如扔到项目上让新人自己学。</p>

<p>在ThoughtWorks，我们有着丰富的培训方式，有面向社招的，有面向毕业生的，有民间自发的，有官方组织的，有内部的，也有面向社区的。</p>

<h4>TWU</h4>

<p>TWU全称ThoughtWorks University，面向毕业生，入职之后的第一堂课。TWU的地点设在印度，之前在班加罗尔，后来改到了普内。每一期5周，学生们需要和和全球其他国家地区的同学一起，一般会尽量将各个地区的学生打乱安排，尽量让学生体会多元化的文化，培训内容设计公司文化，软件开发方法论，敏捷开发（Project SImulation）实践等，同时还需要保证学生有足够的代码练习机会。</p>

<p>我在2013年作为讲师参加了一起TWU，对我自己的帮助也非常大，在和来自不同地区的讲师一起备课，学习中学习到了很多的东西，之前似是而非的一些概念也得到了纠正。</p>

<p><img src="http://abruzzi.github.com/images/2015/02/twu33-resized.png" alt="twu" /></p>

<h4>TWI</h4>

<p>TWI全称ThoughtWorks Immersion，面向有经验的社招同事，主要涉及的内容为公司文化（合作，沟通），专业服务（如何专业的解决客户的问题），软件开发流程，敏捷开发方法论等。</p>

<p>我在2012年时参加过TWI，并整理了几篇相关文章，可以参考<a href="http://icodeit.org/2012/08/thoughtworks-immersion-day-1/">这里</a>，<a href="http://icodeit.org/2012/08/thoughtworks-immersion-day-2/">这里</a>还有<a href="http://icodeit.org/2012/08/thoughtworks-immersion-day-3/">这里</a>。</p>

<p><img src="http://abruzzi.github.com/images/2015/01/twi-resized.png" alt="twi" /></p>

<h4>Session</h4>

<p>Office局限在ThoughtWorks办公室之内，内容随意，参加不参加随意，可以随时加入或随时离开。虽然内容没有限制，但是大多数时候分享的都是技术主题。比如<code>自动化部署</code>，<code>自动测试</code>，<code>Spring 4</code>，<code>Ruby中的构建工具</code>等等。</p>

<p>Sessoin的形式是主讲者找一个自己感兴趣的主题，一个人讲，其他参与者听，鼓励互动。时间一般控制在一个小时以内，所以一般选择在中午饭的时候，有的session会给大家订饭，一边吃一边听。</p>

<p>虽然大部分Sessoin的主题是技术相关的，但是并不局限于此。比如旅游见闻，历史，财务，摄影等等，都可以分享，有时候这些趣味性的Session的参与者更多。</p>

<p><img src="http://abruzzi.github.com/images/2015/01/session-resized.png" alt="session" /></p>

<h4>WorkShop</h4>

<p>Office之内，内容随意，以动手为主，讲解为辅。</p>

<ul>
<li>HTML/CSS</li>
<li>Testable JavaScript</li>
<li>设计工作坊</li>
<li>OO BootCamp</li>
<li>Ruby BootCamp</li>
</ul>


<p>一般来说，Workshop都会组成一个系列，通常会占用几天到几周不等。参与者需要带上电脑，在课堂上进行练习之外，课后还会有一些练习。</p>

<p><img src="http://abruzzi.github.com/images/2015/01/workshop-resized.png" alt="" /></p>

<p><a href="http://icodeit.org/3-pages-in-3-weeks/">3周3页面</a>和<a href="http://icodeit.org/lwweb/">可测试的JavaScript</a>是我去年做的两个Workshop。由于Workshop会在下班后或者中午的休息时间，公司会为每个参与者订饭，以节省时间。</p>

<h4>郑大晔校</h4>

<p>面向刚刚得到offer的毕业生，在上项目之前，我们希望学生的基本技术达到特定的水平，因此设置了一系列的练习。包括</p>

<ul>
<li>编程基础</li>
<li>开发流程</li>
<li>工作方式</li>
<li>公司文化</li>
</ul>


<p>等等。郑大晔校的周期为每周一次，一次一天。涉及的内容会与大多数项目上的要求一致，比如西安office的Java/Ruby项目居多，我们的课程安排就会涉及到<code>Java/Ruby</code>方面。当然，各种软技能如工作方式也会在课程中涉及，尽量的寓教于乐。</p>

<p>每期郑大晔校大概会有10周，学生入职之后有的会直接去TWU，有的则会在项目上工作一段时间再去TWU。</p>

<p><img src="http://abruzzi.github.com/images/2015/01/zhengda-resized.png" alt="" /></p>

<h4>组内培训</h4>

<p>各个组内自行组织，并不要求其他同事参加。比如某个项目需要一些<code>docker</code>的知识，或者需要<code>AngularJS</code>相关的培训，一方面是找自己组内的专家组织一次内部培训，，另一种是找办公室内相关的专家来进行培训，形式比较灵活。</p>

<ul>
<li>项目中已经在使用的技术</li>
<li>项目中将要使用的技术</li>
<li>请别的组的专家来咨询</li>
</ul>


<p><img src="http://abruzzi.github.com/images/2015/01/group-resized.png" alt="group learn" /></p>

<h4>社区</h4>

<ul>
<li>OpenParty</li>
<li>Rails Girl</li>
</ul>


<p><img src="http://abruzzi.github.com/images/2015/02/rails-girl-session-resized.png" alt="rails girl" /></p>

<h4>问题</h4>

<ul>
<li>谁当讲师</li>
<li>活动经费</li>
<li>内容如何持久化（人，内部知识分享系统）</li>
<li>如何保证效果（宽松）</li>
</ul>


<p>由于对任何的话题都没有限制，也没有对参与者的限制，因此任何人只要感兴趣都可以作为讲师。而又由于没有任何的强制措施，参与者和主讲者都凭着自己的热情来组织，这也算是比较独树一帜的事情。</p>

<p>而关于内容的持久化，更多的是为参与者打开一扇新的窗户，或者说洒下一些火星，而至于火星如何形成燎原之势，则完全在参与者自己的自觉。好多次和客户分享了我们的培训机制之后，被问到最多的问题是如何<code>强迫</code>参与者产生热情？</p>

<p>这个问题在ThoughtWorks不是问题，我们在一个人进入公司的最开始，也就是面试的时候，就考察了他的热情，如果在热情上有缺陷，则很可能会直接拒掉，免得破坏我们好不容易构建起来的学习氛围。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高亮剪贴板里的代码片段]]></title>
    <link href="http://abruzzi.github.com/2015/01/copy-code-with-style/"/>
    <updated>2015-01-24T00:17:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/01/copy-code-with-style</id>
    <content type="html"><![CDATA[<h3>高亮剪贴板里的代码片段</h3>

<p>我前几天在准备一个培训的slides的时候，想在Keynote中粘贴一段代码，默认的粘贴板中的内容并没有样式，粘进去之后就是纯文本，没有语法高亮不说，默认的，代码的字体会采用Keynote默认的字体，非常难看。</p>

<p>之前在Intellij中有个插件<code>'Copy' on steroids</code>，这个插件可以将Intellij的编辑器中的高亮过的文本拷贝到剪贴板，然后就可以在Keynote中使用了。</p>

<p>我就想能不能有对应的命令行工具，结果还真的找到一个，就叫<code>highlight</code>，<a href="http://www.andre-simon.de/doku/highlight/en/highlight.php">主页在这里</a>。（这里略微吐槽一下，这个官方页面的风格以今天的眼光来看，无论是配色还是样式布局等，都非常难看，完全是10年前的风格，不过这个小工具确实很好用）。</p>

<h4>基本使用</h4>

<p>在Mac下，安装非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install highlight
</span></code></pre></td></tr></table></div></figure>


<p><code>highlight</code>支持很多格式，<code>HTML</code>，<code>RTF</code>甚至还有<code>LaTeX</code>。不过如果要在Keynote或者PowerPoint中使用，用<code>RTF</code>(Rich Text Format)就可以了。</p>

<p>选择要高亮的文件，比如<code>app.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack/contrib&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./model/plants&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FrontendApplication</span> <span class="o">&lt;</span> <span class="no">Sinatra</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后使用命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>highlight -O rtf app.rb | pbcopy
</span></code></pre></td></tr></table></div></figure>


<p>即可将高亮过的内容复制到剪切板中，然后只需要<code>CMD+V</code>就可以粘贴了：</p>

<p><img src="http://abruzzi.github.com/images/2015/01/ruby-highlight-resized.png" alt="app.rb" /></p>

<p>如果要生成HTML格式，只需要指定:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>highlight -O html app.rb &gt; app.rb.html
</span></code></pre></td></tr></table></div></figure>


<h4>自定义语言（扩展）</h4>

<p>如果遇到不支持的语言时，默认的<code>highlight</code>会报错，要查看所有支持的语言，可以使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>highlight -p
</span></code></pre></td></tr></table></div></figure>


<p>所有的<code>highlight</code>内置的语言高亮配置都存储在本地的一个目录中，比如在我的机器上，存储位置为<code>/usr/local/Cellar/highlight/3.18_1/share/highlight/langDefs/</code>。</p>

<p>还以Java为例，该目录下会有一个文件，名为<code>java.lang</code>，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">Description</span><span class="o">=</span><span class="s2">&quot;Java&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Keywords</span><span class="o">={</span>
</span><span class='line'>  <span class="o">{</span> <span class="nv">Id</span><span class="o">=</span>1,
</span><span class='line'>    <span class="nv">List</span><span class="o">={</span><span class="s2">&quot;abstract&quot;</span>, <span class="s2">&quot;default&quot;</span>, <span class="s2">&quot;if&quot;</span>, <span class="s2">&quot;private&quot;</span>, <span class="s2">&quot;this&quot;</span>, <span class="s2">&quot;do&quot;</span>, <span class="s2">&quot;implements&quot;</span>,
</span><span class='line'><span class="s2">&quot;protected&quot;</span>, <span class="s2">&quot;throw&quot;</span>, <span class="s2">&quot;break&quot;</span>, <span class="s2">&quot;import&quot;</span>, <span class="s2">&quot;public&quot;</span>, <span class="s2">&quot;throws&quot;</span>, <span class="s2">&quot;else&quot;</span>,
</span><span class='line'><span class="s2">&quot;instanceof&quot;</span>, <span class="s2">&quot;return&quot;</span>, <span class="s2">&quot;transient&quot;</span>, <span class="s2">&quot;case&quot;</span>, <span class="s2">&quot;extends&quot;</span>, <span class="s2">&quot;try&quot;</span>, <span class="s2">&quot;catch&quot;</span>, <span class="s2">&quot;final&quot;</span>,
</span><span class='line'><span class="s2">&quot;interface&quot;</span>, <span class="s2">&quot;static&quot;</span>, <span class="s2">&quot;finally&quot;</span>, <span class="s2">&quot;strictfp&quot;</span>, <span class="s2">&quot;volatile&quot;</span>, <span class="s2">&quot;class&quot;</span>, <span class="s2">&quot;native&quot;</span>,
</span><span class='line'><span class="s2">&quot;super&quot;</span>, <span class="s2">&quot;while&quot;</span>, <span class="s2">&quot;const&quot;</span>, <span class="s2">&quot;for&quot;</span>, <span class="s2">&quot;new&quot;</span>, <span class="s2">&quot;switch&quot;</span>, <span class="s2">&quot;continue&quot;</span>, <span class="s2">&quot;goto&quot;</span>,
</span><span class='line'><span class="s2">&quot;package&quot;</span>, <span class="s2">&quot;synchronized&quot;</span>, <span class="s2">&quot;as&quot;</span>, <span class="s2">&quot;in&quot;</span>, <span class="s2">&quot;def&quot;</span>, <span class="s2">&quot;property&quot;</span><span class="o">}</span>, <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> <span class="nv">Id</span><span class="o">=</span>2,
</span><span class='line'>    <span class="nv">List</span><span class="o">={</span><span class="s2">&quot;boolean&quot;</span>, <span class="s2">&quot;double&quot;</span>, <span class="s2">&quot;byte&quot;</span>, <span class="s2">&quot;int&quot;</span>, <span class="s2">&quot;short&quot;</span>, <span class="s2">&quot;void&quot;</span>, <span class="s2">&quot;char&quot;</span>, <span class="s2">&quot;long&quot;</span>, <span class="s2">&quot;float&quot;</span><span class="o">}</span>,
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'> <span class="o">{</span> <span class="nv">Id</span><span class="o">=</span>3,
</span><span class='line'>    <span class="nv">Regex</span><span class="o">=[[</span>@<span class="se">\w</span>+<span class="o">]]</span>,
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> <span class="nv">Id</span><span class="o">=</span>4,
</span><span class='line'>    <span class="nv">Regex</span><span class="o">=[[(</span><span class="se">\w</span>+<span class="o">)</span><span class="se">\s</span>*<span class="se">\(</span><span class="o">]]</span>,
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Strings</span><span class="o">={</span>
</span><span class='line'>  <span class="nv">Delimiter</span><span class="o">=[[</span><span class="err">&quot;</span>|<span class="err">&#39;</span><span class="o">]]</span>,
</span><span class='line'>  <span class="nv">Escape</span> <span class="o">=</span> <span class="o">[[</span> <span class="se">\\</span>u<span class="se">\d</span><span class="o">{</span>4<span class="o">}</span>|<span class="se">\\</span>x?<span class="se">\d</span><span class="o">{</span>3<span class="o">}</span>|<span class="se">\\\w</span>|<span class="se">\\</span><span class="o">[</span><span class="se">\&#39;\\\&quot;</span><span class="o">]</span> <span class="o">]]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">IgnoreCase</span><span class="o">=</span><span class="nb">false</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Comments</span><span class="o">={</span>
</span><span class='line'>  <span class="o">{</span> <span class="nv">Block</span><span class="o">=</span><span class="nb">false</span>,
</span><span class='line'>    <span class="nv">Delimiter</span><span class="o">=</span> <span class="o">{</span> <span class="o">[[</span><span class="se">\/\/</span><span class="o">]]</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> <span class="nv">Block</span><span class="o">=</span><span class="nb">true</span>,
</span><span class='line'>    <span class="nv">Nested</span><span class="o">=</span><span class="nb">false</span>,
</span><span class='line'>    <span class="nv">Delimiter</span><span class="o">=</span> <span class="o">{</span> <span class="o">[[</span><span class="se">\/\*</span><span class="o">]]</span>,<span class="o">[[</span><span class="se">\*\/</span><span class="o">]]</span>,<span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Operators</span><span class="o">=[[</span><span class="se">\(</span>|<span class="se">\)</span>|<span class="se">\[</span>|<span class="se">\]</span>|<span class="se">\{</span>|<span class="se">\}</span>|<span class="se">\,</span>|<span class="se">\;</span>|<span class="se">\.</span>|<span class="se">\:</span>|<span class="se">\&amp;</span>|&lt;|&gt;|<span class="se">\!</span>|<span class="se">\=</span>|<span class="se">\/</span>|<span class="se">\*</span>|<span class="se">\%</span>|<span class="se">\+</span>|<span class="se">\-</span>|<span class="se">\|</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">EnableIndentation</span><span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本上，这些配置都是自解释的，比如关键字列表的定义，字符串的正则pattern，是否区分大小写，注释的格式，操作符的格式，是否启用缩进等。</p>

<p>我在准备Slide的时候，想要加入一段<code>Cucumber</code>的feature文件，然后发现并不支持，于是就参照着Java的定义新建了一个文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">Description</span><span class="o">=</span><span class="s2">&quot;Gherkin&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Keywords</span><span class="o">={</span>
</span><span class='line'>  <span class="o">{</span> <span class="nv">Id</span><span class="o">=</span>1,
</span><span class='line'>    <span class="nv">List</span><span class="o">={</span><span class="s2">&quot;Feature&quot;</span>, <span class="s2">&quot;Scenario&quot;</span>, <span class="s2">&quot;Given&quot;</span>, <span class="s2">&quot;When&quot;</span>, <span class="s2">&quot;Then&quot;</span>, <span class="s2">&quot;And&quot;</span>, <span class="s2">&quot;World&quot;</span>, <span class="s2">&quot;Outline&quot;</span><span class="o">}</span>,
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Strings</span><span class="o">={</span>
</span><span class='line'>  <span class="nv">Delimiter</span><span class="o">=[[</span><span class="err">&quot;</span>|<span class="err">&#39;</span><span class="o">]]</span>,
</span><span class='line'>  <span class="nv">Escape</span> <span class="o">=</span> <span class="o">[[</span> <span class="se">\\</span>u<span class="se">\d</span><span class="o">{</span>4<span class="o">}</span>|<span class="se">\\</span>x?<span class="se">\d</span><span class="o">{</span>3<span class="o">}</span>|<span class="se">\\\w</span>|<span class="se">\\</span><span class="o">[</span><span class="se">\&#39;\\\&quot;</span><span class="o">]</span> <span class="o">]]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Comments</span><span class="o">={</span>
</span><span class='line'>  <span class="o">{</span> <span class="nv">Block</span><span class="o">=</span><span class="nb">false</span>,
</span><span class='line'>    <span class="nv">Delimiter</span><span class="o">=</span> <span class="o">{</span> <span class="o">[[</span><span class="c">#]] },</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">IgnoreCase</span><span class="o">=</span><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>将这个文件保存为<code>feature.lang</code>，这样我们就可以高亮下面这个<code>cucumber</code>的feature文件了（其实feature文件本身是有一个叫做Gherkin的语言编写的）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Feature:</span><span class="nf">  Connected Home Purchase</span>
</span><span class='line'>
</span><span class='line'><span class="nf"> </span><span class="k">Scenario:</span><span class="nf"> Purchase T-Broadband</span>
</span><span class='line'><span class="k">      Given </span><span class="nf">I am purchasing &quot;</span><span class="s">T-BROADBAND-50GB</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">     </span><span class="k">When </span><span class="nf">I go to checkout page</span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I am an existing telstra broadband customer</span>
</span><span class='line'><span class="nf">     </span><span class="k">When </span><span class="nf">I select &quot;</span><span class="s">Professional Installation</span><span class="nf">&quot; in Premium service and support</span>
</span><span class='line'><span class="nf">     </span><span class="c"># And I select &quot;None&quot; in Community Wifi</span><span class="nf"></span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I select &quot;</span><span class="s">None</span><span class="nf">&quot; in Optional extras</span>
</span><span class='line'><span class="nf">     </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Telstra Broadband 50GB</span><span class="nf">&quot; in my shopping cart</span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Professional Installation</span><span class="nf">&quot; in add on list</span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I should see the total price is &quot;</span><span class="s">$72.00</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf"> </span><span class="k">Scenario:</span><span class="nf"> Purchase Entertainerment Bundle</span>
</span><span class='line'><span class="k">      Given </span><span class="nf">I am purchasing &quot;</span><span class="s">Telstra Entertainer Supreme Bundle M</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">     </span><span class="k">When </span><span class="nf">I go to checkout page</span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I am an existing telstra broadband customer</span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I select &quot;</span><span class="s">Foxtel iQ3 ($125 one-off)</span><span class="nf">&quot; in Inclusions</span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I select &quot;</span><span class="s">Professional Installation</span><span class="nf">&quot; in Premium service and support</span>
</span><span class='line'><span class="nf">     </span><span class="c"># And I select &quot;None&quot; in Community Wifi</span><span class="nf"></span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I select &quot;</span><span class="s">None</span><span class="nf">&quot; in Optional extras</span>
</span><span class='line'><span class="nf">     </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Telstra Entertainer Supreme Bundle Entertainment M</span><span class="nf">&quot; in my shopping cart</span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Professional Installation</span><span class="nf">&quot; in add on list</span>
</span><span class='line'><span class="nf">     </span><span class="k">And </span><span class="nf">I should see the total price is &quot;</span><span class="s">$120.00</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2015/01/feature-highlight-resized.png" alt="cucumber feature" /></p>

<p>如果你经常写代码，喜欢分享自己学到的，并且喜欢以简短的代码来举例子，那么这个工具非常适合你。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写体面的UI测试]]></title>
    <link href="http://abruzzi.github.com/2015/01/page-object-with-site-prism/"/>
    <updated>2015-01-02T13:58:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/01/page-object-with-site-prism</id>
    <content type="html"><![CDATA[<h3>PageObject简介</h3>

<p><code>PageObject</code>是编写UI测试时的<a href="http://martinfowler.com/bliki/PageObject.html">一种模式</a>。简而言之，你可以将所有知道页面细节的部分放入到这个对象上，对于编写测试的人来说，一个<code>PageObject</code>代表了一个页面，或者页面上的一个区域（比如搜索框，搜索结果，侧边栏等都可能是一个独立的<code>Object</code>）。这样做的好处分为两个方面：</p>

<ol>
<li>封装了所有的实现细节（内部的HTML是如何组织的）</li>
<li>对外的接口非常清晰，从而代码更加语义化</li>
</ol>


<p>我们这里列举一个简单的例子来说明：</p>

<p>我们要测试的场景是：我们在一个搜索应用中，用户输入了<code>ThoughtWorks</code>，我们来判断搜索结果的第一页有<code>10</code>条结果。如果使用原生的<code>capybara</code>，代码大致会如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">visit</span> <span class="s1">&#39;/search&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fill_in</span> <span class="s1">&#39;Search&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;ThoughtWorks&#39;</span>
</span><span class='line'><span class="n">click_button</span> <span class="s1">&#39;#search&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#result&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;.tips&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;10&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们进入<code>/search</code>页面，然后在<code>Search</code>中输入了<code>ThoughtWorks</code>关键字，然后点击<code>#search</code>按钮，最后判断<code>#result .tips</code>下有<code>10</code>的字样。</p>

<p>如果使用<code>PageObject</code>，代码则会变成（<em>这个是伪代码</em>）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">search</span> <span class="o">=</span> <span class="no">SearchBox</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="no">SearchResult</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">search</span><span class="o">.</span><span class="n">type</span> <span class="s2">&quot;ThoughtWorks&quot;</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>site_prism 简介</h3>

<p><a href="https://github.com/natritmeyer/site_prism">site_prism</a>是一个构建在<a href="https://github.com/jnicklas/capybara">capybara</a>之上的用于建模<code>Page Object</code>的gem。使用<code>site_prism</code>可以很语义化的编写<code>Page Object</code>，可以使代码非常易读。</p>

<p>位于<code>顶层</code>的<code>Page</code>对象可以拥有多个<code>Section</code>对象，每个<code>Section</code>可以对应页面上的一些逻辑上的块，比如内容区域，边栏等。对于现在流行的<code>SPA</code>，我们只需要一个<code>Page</code>和若干个<code>Section</code>就足够了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MovingHome</span> <span class="o">&lt;</span> <span class="no">SitePrism</span><span class="o">::</span><span class="no">Page</span>
</span><span class='line'>  <span class="n">set_url</span> <span class="s1">&#39;http://localhost:8100/bundles/moving-home&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:container</span><span class="p">,</span> <span class="s2">&quot;#tmsCheckout&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">section</span> <span class="ss">:personal</span><span class="p">,</span> <span class="no">PersonalSection</span><span class="p">,</span> <span class="s2">&quot;#acc-personal&quot;</span>
</span><span class='line'>  <span class="n">section</span> <span class="ss">:contact</span><span class="p">,</span> <span class="no">ContactSection</span><span class="p">,</span> <span class="s2">&quot;#acc-contact&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>set_url</code>方法制定了如何到达当前页，也是<code>webdriver</code>会实际发送请求的<code>URL</code>。页面本身上可以用<code>element</code>方法来声明一个元素，以及该元素对应的CSS选择器，这样就可以通过元素的名称来访问该选择器对应的HTML元素了。</p>

<p>比如上例中的<code>container</code>，我们在测试中就可以这样来访问它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="vi">@moving</span> <span class="o">=</span> <span class="no">MovingHome</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@moving</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@moving</span><span class="o">.</span><span class="n">container</span><span class="o">.</span><span class="n">should</span> <span class="n">be_visible</span>
</span></code></pre></td></tr></table></div></figure>


<p>而对应的<code>section</code>元素，则声明了一个块的名称，块的类和块的选择器。这样我们就可以通过名称来应用该块了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">set</span> <span class="s2">&quot;Juntao&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="vi">@moving</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_personal</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="vi">@moving</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_contact</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>have_</code>前缀加块的名称，用来判断该块是否可见（比如display: block）。</p>

<h3>一个项目上的实例</h3>

<p>目前项目上有一个页面需要添加一些新的特性，对应的需要添加一些UI测试。之前的所有代码都是面向过程的，代码非常多，重复代码都通过抽成一个函数来组织，无法和实际的页面模块对应起来。因此我使用<code>site_prism</code>做了一些尝试。</p>

<p>业务场景是这样的：用户想要办理移机业务（比如搬家了，相应的宽带/有线电视要办理移机），这时候用户需要填写一些个人信息，联系方式，老地址，新地址等，这样我们就可以联系到他并帮他完成移机。而目前的页面也已经按照这些信息的关联度组织成了这样的形式：</p>

<p><img src="http://abruzzi.github.com/images/2015/01/moving-home-resized.png" alt="moving home" /></p>

<p>可以看到，页面本身的组织已经比较清晰了，这非常方便我们抽取<code>PageObject</code>：每一个<code>块</code>都可以抽取为一个<code>Section</code>类的子类。</p>

<h4>第一次尝试</h4>

<p>比如对于个人信息这一个块：</p>

<p><img src="http://abruzzi.github.com/images/2015/01/personal-resized.png" alt="personal" /></p>

<p>这个块包含称呼，姓名，出生日期等几部分，我们可以很容易找到对应的页面元素，并抽取为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">PersonalSection</span> <span class="o">&lt;</span> <span class="no">SitePrism</span><span class="o">::</span><span class="no">Section</span>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:myservice</span><span class="p">,</span> <span class="s2">&quot;#personal-my-services&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:title</span><span class="p">,</span> <span class="s2">&quot;#personal</span><span class="se">\\</span><span class="s2">.title&quot;</span>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:first</span><span class="p">,</span> <span class="s2">&quot;#personal</span><span class="se">\\</span><span class="s2">.firstName&quot;</span>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:last</span><span class="p">,</span> <span class="s2">&quot;#personal</span><span class="se">\\</span><span class="s2">.lastName&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:dob_day</span><span class="p">,</span> <span class="s2">&quot;#personal</span><span class="se">\\</span><span class="s2">.dobDay&quot;</span>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:dob_month</span><span class="p">,</span> <span class="s2">&quot;#personal</span><span class="se">\\</span><span class="s2">.dobMonth&quot;</span>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:dob_year</span><span class="p">,</span> <span class="s2">&quot;#personal</span><span class="se">\\</span><span class="s2">.dobYear&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:summary</span><span class="p">,</span> <span class="s2">&quot;.tms-accordion-summary-content&quot;</span>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:next</span><span class="p">,</span> <span class="s2">&quot;.tms-btn-next&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>最直接的使用方法就是直接调用<code>set</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">fulfill_personal</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">myservice</span><span class="o">.</span><span class="n">set</span> <span class="s2">&quot;MINE&quot;</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">select</span> <span class="s2">&quot;Mr&quot;</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">set</span> <span class="s2">&quot;Juntao&quot;</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">set</span> <span class="s2">&quot;Qiu&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">dob_day</span><span class="o">.</span><span class="n">select</span> <span class="s2">&quot;21&quot;</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">dob_month</span><span class="o">.</span><span class="n">select</span> <span class="s2">&quot;Jan&quot;</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">dob_year</span><span class="o">.</span><span class="n">select</span> <span class="s2">&quot;1985&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在<code>Cucumber</code>测试中就可以写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Given</span> <span class="sr">/I am on moving home page/</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@moving</span> <span class="o">=</span> <span class="no">MovingHome</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="vi">@moving</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/I fulfill my personal information/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">fulfill_personal</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>面向对象</h4>

<p>这样的代码事实上已经沦为了面向过程的方式了，更好的做法是讲fulfill_personal放入<code>Personal</code>本身中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">fulfill</span><span class="p">(</span><span class="n">personal</span><span class="p">)</span>
</span><span class='line'>  <span class="n">myservice</span><span class="o">.</span><span class="n">set</span> <span class="n">personal</span><span class="o">[</span><span class="s2">&quot;myservice&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">title</span><span class="o">.</span><span class="n">select</span> <span class="n">personal</span><span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">first</span><span class="o">.</span><span class="n">set</span> <span class="n">personal</span><span class="o">[</span><span class="s2">&quot;first&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">last</span><span class="o">.</span><span class="n">set</span> <span class="n">personal</span><span class="o">[</span><span class="s2">&quot;last&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">dob_day</span><span class="o">.</span><span class="n">select</span> <span class="n">personal</span><span class="o">[</span><span class="s2">&quot;dob_day&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">dob_month</span><span class="o">.</span><span class="n">select</span> <span class="n">personal</span><span class="o">[</span><span class="s2">&quot;dob_month&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">dob_year</span><span class="o">.</span><span class="n">select</span> <span class="n">personal</span><span class="o">[</span><span class="s2">&quot;dob_year&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">next_button</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，外部的使用者只需要调用即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">fixture</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">::</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;fixtures/moving.yml&#39;</span><span class="p">)</span>
</span><span class='line'><span class="vi">@moving</span><span class="o">.</span><span class="n">personal</span><span class="o">.</span><span class="n">fulfill</span><span class="p">(</span><span class="n">fixture</span><span class="o">[</span><span class="s2">&quot;personal&quot;</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的<code>moving.yml</code>文件定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">personal</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">myservice</span><span class="p-Indicator">:</span> <span class="s">&quot;MINE&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;Mr&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">first</span><span class="p-Indicator">:</span> <span class="s">&quot;Juntao&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">last</span><span class="p-Indicator">:</span> <span class="s">&quot;Qiu&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">dob_day</span><span class="p-Indicator">:</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">dob_month</span><span class="p-Indicator">:</span> <span class="s">&quot;Jan&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">dob_year</span><span class="p-Indicator">:</span> <span class="s">&quot;1985&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Misc</h4>

<p>为了达到视觉效果，UI上通常会有一些延迟的效果。比如点击一个按钮，在100ms之后弹出一个对话框，但是这种效果会导致测试的<code>随机</code>失败。</p>

<p>为了解决这个问题，我们可以通过给元素添加<code>wait_until_</code>前缀来等待。比如我们的测试中，在点击了下一步的按钮之后，预期有一个<code>查看收费详情</code>的对话框出现。根据一般的实现方式，这个对话框是预先写在页面上的，然后在合适的实际通过<code>JavaScript</code>将其显示在页面上（这样我们就不能通过查看该元素<em>是否存在</em>在页面上来编写断言了）。</p>

<p><img src="http://abruzzi.github.com/images/2015/01/lightbox-resized.png" alt="lightbox" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">element</span> <span class="ss">:lightbox_view_fees</span><span class="p">,</span> <span class="s2">&quot;#tmsLBViewFees&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Then</span> <span class="sr">/I can see the lightbox View Fees shows up/</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">wait_until_lightbox_view_fees_visible</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>最后的结论</h3>

<p>通常，我们的UI测试会和<code>特性描述</code>写在一起，以<code>Cucumber</code>为例，在<code>feature</code>文件中，我们会编写诸如这样的描述：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Feature</span><span class="p">:</span> <span class="no">Platinum</span> <span class="no">Move</span>
</span><span class='line'>  <span class="no">Scenario</span><span class="p">:</span> <span class="no">Platinum</span> <span class="no">Move</span>
</span><span class='line'>      <span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">on</span> <span class="n">moving</span> <span class="n">home</span> <span class="n">page</span>
</span><span class='line'>      <span class="no">When</span> <span class="n">I</span> <span class="nb">select</span> <span class="n">to</span> <span class="n">move</span> <span class="n">my</span> <span class="n">service</span> <span class="s2">&quot;Foxtel from Telstra&quot;</span>
</span><span class='line'>      <span class="no">And</span> <span class="n">I</span> <span class="nb">select</span> <span class="n">a</span> <span class="s2">&quot;Telstra technician install&quot;</span>
</span><span class='line'>      <span class="no">Then</span> <span class="n">I</span> <span class="n">can</span> <span class="n">see</span> <span class="n">the</span> <span class="n">lightbox</span> <span class="s2">&quot;View Fees&quot;</span> <span class="n">shows</span> <span class="n">up</span>
</span></code></pre></td></tr></table></div></figure>


<p>而一个良好的<code>实现</code>，我是说，像<code>feature</code>描述一样清晰的实现，可能是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Given</span> <span class="sr">/I am on moving home page/</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@moving</span> <span class="o">=</span> <span class="no">MovingHome</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="vi">@moving</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/I select to move my telstra service &quot;([^&quot;]*)&quot;/</span> <span class="k">do</span> <span class="o">|</span><span class="n">selected</span><span class="o">|</span>
</span><span class='line'>  <span class="n">setup_data</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">service</span><span class="o">.</span><span class="n">fulfill</span> <span class="n">selected</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/I can see the installation form/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="vi">@moving</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_move_service</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/I cannot see the installation form/</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">move_service</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_visible</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">And</span> <span class="sr">/I select a &quot;([^&quot;]*)&quot;/</span> <span class="k">do</span> <span class="o">|</span><span class="n">install</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">move_service</span><span class="o">.</span><span class="n">select_install</span> <span class="n">install</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/I can see the lightbox &quot;([^&quot;]*)&quot; shows up/</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@moving</span><span class="o">.</span><span class="n">lightbox</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_visible</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本上，每个<code>step</code>仅仅对应1行（或者很少的几行）代码，而这些代码背后有一组组织良好的<code>PageObject</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2014]]></title>
    <link href="http://abruzzi.github.com/2014/12/my-2014/"/>
    <updated>2014-12-27T23:56:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/12/my-2014</id>
    <content type="html"><![CDATA[<p>依照惯例，我每年在元旦时候都会写一篇回顾，总结过去，展望未来。不过很少跟上一年指定的<code>计划</code>真正去比较，一般都是列举一下这一年做的事情。</p>

<p>大致分下来，可以分为上半年和下半年两部分，这当然不是废话。因为上半年和下半年分别在两个完全不同的项目上工作。</p>

<h3>技术咨询项目</h3>

<p>上半年在一个国内咨询项目上，主要做的事情有（其实我是作为前端专家加入的，不过后来工作重心发生了改变）：</p>

<ol>
<li>GIS平台</li>
<li>大数据平台</li>
</ol>


<p>关于GIS最后的产出是一系列博客，而且还在<a href="http://www.infoq.com/cn/articles/visualization-of-the-global-seismic-system">InfoQ</a>上发表了一篇。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-earthquake-resized.png" alt="earthquake" /></p>

<p>而后来我又根据我iPhone上照片的经纬度信息，汇总出了一个热力图（使用<a href="http://qgis.org/en/site/">QGis</a>）：</p>

<p><img src="http://abruzzi.github.com/images/2014/12/places-resized.png" alt="heat map" /></p>

<p>大数据相关的所有东西都在<a href="https://gist.github.com/abruzzi">我的gist上</a>，还没有时间整理。</p>

<h3>硬件</h3>

<p>回到办公室之后，发现了硬件小组提供的一大堆有意思的工具和器件，包括<code>3D打印机</code>，<code>Arduino</code>的一些芯片等，为了纪念我的GIS项目，我还打印了一个瓦片：</p>

<p><img src="http://abruzzi.github.com/images/2014/12/tile-resized.png" alt="tile" /></p>

<p>不断将我拖延了4年的机器小车组装了起来，而且还使用舵机，蓝牙，超声波等模块制作了一个实际的雷达：</p>

<p><img src="http://abruzzi.github.com/images/2014/12/radar-resized.png" alt="radar" /></p>

<h3>Sessions &amp; Workshop</h3>

<p>5月底回到办公室后，我发现Office的气氛其实比我来的时候低落了很多，ThoughtWorks的感觉非常淡了。</p>

<p>一方面是新人太多，而来新的项目所在的11楼由于客户的关系（我自以为），同事们的积极性极低。一个最容易看到的信号就是Session变得很少，我尝试做一些改变。</p>

<p>分别做了一些关于自动化测试，JavaScript方面的Session和Workshop，下面是《可测试的JavaScript》的Workshop。这是我第一次组织比较大的，而且时间比较长的Workshop。</p>

<p><img src="http://abruzzi.github.com/images/2014/12/testable-javascript-resized.png" alt="testable-javascript" /></p>

<p>有了上一次的Feedback，在年底的时候，我又组织了一次为期3周的Workshop，受众更是扩大到了各种角色，包括BA，UX，UIDev，QA等等。</p>

<p><img src="http://abruzzi.github.com/images/2014/12/3-pages-resized.png" alt="3 pages" /></p>

<h3>写作</h3>

<p>今年的博客数量减少了，一个原因是我在编写我的第二本书<a href="http://icodeit.org/lwweb/">《轻量级Web应用开发》</a>，经过几个月的坚持和努力，这本书已经编写完成，应该会在明年(2015年)年初与读者见面。</p>

<p>另外，在休年假的时候（3周3页面之后），我将Workshop的内容做了整理，并加入了一些<code>设计</code>相关的内容，形成了一本电子书，名为<a href="http://juntao.gitbooks.io/3-web-designs-in-3-weeks/">《3 web designs in 3 weeks》</a>。</p>

<h3>其他</h3>

<p>我正在努力的向<code>UX</code>角色的转变，所谓<code>千里之行，始于足下</code>。我在休年假期间，买了一大堆UX相关的书籍。目前正在努力学习画画：</p>

<p><img src="http://abruzzi.github.com/images/2014/12/drawing-resized.png" alt="两点透视" /></p>

<p>在今天的CST的创新课上，我们一起设想了几个场景，下面是我自己画的图：</p>

<p><img src="http://abruzzi.github.com/images/2014/12/scenario-resized.png" alt="场景" /></p>

<p>最后是一张我自己设计的自己的名片：</p>

<p><img src="http://abruzzi.github.com/images/2014/12/my-card-resized.png" alt="name card" /></p>

<p>希望来年可以在自己努力的路上看到一些成果吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Sublime Text中设置JavaScript构建]]></title>
    <link href="http://abruzzi.github.com/2014/12/setup-sublime-as-javascript-development-env/"/>
    <updated>2014-12-21T18:52:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/12/setup-sublime-as-javascript-development-env</id>
    <content type="html"><![CDATA[<p>我在编写<a href="http://book.douban.com/subject/24165880/">《JavaScript核心概念及实践》</a>一书的时候，为了保证读者学习时可以比较专注语言本身，专门用Swing开发了一个小工具<a href="https://github.com/abruzzi/jsevaluator">JSEvaluator</a>。</p>

<p>这个工具可以当做JavaScript的简单的IDE，有一个编辑区域，有一些按钮(打开，保存，执行等)，执行之后还可以将结果显示在一个面板上。书出版后不断有读者问我如何将这个工具运行起来（我自己写这个工具的时候，并没有release的概念，而且最初的几个版本可用之后，就再也没有花心思维护），单独回复比较耗时，今天早上又收到一位热心读者的邮件，就在这里统一回复一下。</p>

<p>其实JSEvaluator的思想和其他的IDE一样：将一个编辑器和命令行工具结合在一起，编辑器提供编辑功能，然后IDE可以将编辑器中的文本发送给命令行工具执行（使用Rhino），将结果重定向到界面上。</p>

<p><a href="http://www.sublimetext.com/3">Sublime Text</a>提供的<code>Build</code>功能也可以做到这一点，并且可以使用它更加强大的其他编辑特性，因此推荐各位读者使用这里介绍的方式。</p>

<h3>Sublime Text编辑器</h3>

<p><a href="http://www.sublimetext.com/3">Sublime Text</a>是一个文本编辑器，非常轻量级，并且有丰富的插件机制。虽然它不是一个免费软件，但是如果不注册还是可以无限试用下去，除了不定时的弹出一个对话框之外。它在现在的前端开发中非常流行，我作为一个<code>Vim</code>的忠实粉丝，也已经花费了很多时间在Sublime Text上了。</p>

<p>在写书的时候，JavaScript已经比较火了，但是更多的是在Web端。在本地开发的支持上还是比较薄弱。但是现在就不一样了，各个操作系统平台上都已经有了许多本地的JavaScript执行环境。比如Mac自带的<code>jsc</code>，跨平台的<a href="http://nodejs.org/">node</a>等。</p>

<h4>准备工作</h4>

<p>如果你在使用Mac OS X，请直接跳到下一步。如果你在使用Windows，请先安装node.js的Windows版本，然后保证<code>node.exe</code>在系统的PATH环境变量中。</p>

<h4>自定义build</h4>

<p>在Sublime Text中，点击<code>Tools</code> -> <code>Build System</code> -> <code>New build system...</code>，Sublime会打开一个文件，我们来编辑这个文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;jsc&quot;</span><span class="p">,</span> <span class="s2">&quot;$file&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;selector&quot;</span><span class="p">:</span> <span class="s2">&quot;source.js&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上边这个命令指定了这个build使用的命令是<code>jsc</code>。如果你在Windows下使用<code>node</code>，那么对应的这个文件应该写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;node&quot;</span><span class="p">,</span> <span class="s2">&quot;$file&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;selector&quot;</span><span class="p">:</span> <span class="s2">&quot;source.js&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果<code>node.exe</code>不在环境变量PATH中，请保证将其加入。完成这个文件的编辑之后，将其保存为<code>JavaScript.sublime-build</code>文件（Sublime会提示你输入文件名，因此输入JavaScript即可）。</p>

<h4>开始开发</h4>

<p>接下来你就可以在Sublime中开发并编译JavaScript代码了，应该注意的是，如果你使用的是<code>jsc</code>，那么<code>console.log</code>这样的函数式不能直接使用的，不过你可以很容易的将其重新定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">console</span> <span class="o">=</span> <span class="nx">console</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="nx">debug</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>debug</code>是<code>Sublime</code>提供的输出函数，它将会把结果输出在Sublime的控制台上。</p>

<p><img src="http://abruzzi.github.com/images/2014/12/sublime-text-jsc-resized.png" alt="Sublime Text Build JavaScript" /></p>

<p>运行构建的快捷键，在Mac OS X下为(<code>Cmd+B</code>)，Windows下为(<code>Ctrl+B</code>)。运行之后，可以看到在编辑器的底部会有一个小的窗口打开，里边的内容就是执行结果了。</p>

<h4>其他资料</h4>

<ol>
<li>这里有一个<a href="http://calebgrove.com/articles/js-console-sublime-text">英文版</a>，这里是<a href="http://www.wikihow.com/Create-a-Javascript-Console-in-Sublime-Text">另一个</a></li>
<li>这里有一个<a href="https://cnodejs.org/topic/51ee453af4963ade0ebde85e">中文版</a>，以及它的<a href="http://www.hacke2.cn/nodeJS-sublime-3/">补充</a></li>
</ol>


<p>Note：由于我自己不使用<code>Windows</code>平台，也不推荐其他开发者使用，因此关于Windows的部分并没有经过认真测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[现代Web页面开发流程]]></title>
    <link href="http://abruzzi.github.com/2014/11/modern-ui-development-workflow/"/>
    <updated>2014-11-25T14:11:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/11/modern-ui-development-workflow</id>
    <content type="html"><![CDATA[<h3>现代Web页面开发流程</h3>

<p>通常来说，Web页面开发的流程大致是这样的：设计师（设计师不是美工，就像程序员不是码农一样）提供设计稿，通常是图片格式。然后前端的开发人员（在ThoughtWorks我们称之为UI Dev）来手工的将图片转换为对应的HTML+CSS，往往还需要在各个浏览器中调试等。</p>

<p>大多数时候，设计师会提供色卡，或者至少前景色/背景色/高亮色的值给开发人员。如果没有的话，开发人员会用到一些工具如<code>colorpicker</code>, <code>ruler</code>之类来确保最终的效果和设计稿是一致的。</p>

<p>如果你观察过UI Dev的工作流程的话，你会发现基本的上是这样的：使用编辑器（或者IDE）编写HTML代码，CSS代码，保存修改内容，切换到浏览器窗口，按<code>F5</code>或者<code>Ctrl-R</code>刷新，然后对比设计稿和实现，如果发现不一致的地方，再切换到编辑器中修改代码，如是往复。</p>

<h4>避免手工劳动</h4>

<p>纯手工的方式来编辑HTML/CSS会非常耗时，特别是作为标记语言的HTML，开发者需要时刻关注关闭已经打开的标签。比如一个标题元素，你需要：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>This is the page title<span class="nt">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>几乎从一开始，人们就想到了各种办法来避免自己重复的键入，比如Vim的<a href="https://github.com/ervandew/supertab">SuperTab</a>以及<a href="https://github.com/garbas/vim-snipmate">Snipmate</a>插件，可以通过输入<code>标签名</code>+<code>Tab</code>来补全所有的标签等，又或者DreamWaver提供的<code>代码生成</code>的方式来简化这一流程。</p>

<p>Sublime的编辑器上的著名插件<a href="https://sublime.wbond.net/packages/Emmet">Emmet</a>可以帮助开发人员飞速的开发HTML/CSS，这里有一个小例子。假设我们需要实现的页面是这样的：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/web-design-resized.png" alt="web design" /></p>

<p>那么对应的HTML结构可能会是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;feature&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;number&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>            <span class="nt">&lt;i&gt;&lt;/i&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h4&gt;&lt;/h4&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p&gt;&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用Emmet，则只需要给出表达式，然后按一下<code>Tab</code>键就可以补全为上述的结构了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ul&gt;li*3&gt;.feature&gt;span.number+i+h4+p
</span></code></pre></td></tr></table></div></figure>


<p>上边的这条命令可以读作：&#8221;创建一个UL，该UL下有3个LI，每个LI下有一个class为feature的DIV（不指定元素名称的话，默认生成div），每个DIV内，有一个类为.number的SPAN，一个i元素，一个H4元素和一个P元素&#8221;</p>

<p>完整的技巧可以参看<a href="http://docs.emmet.io/cheat-sheet/">官方文档</a>。</p>

<h4>避免重复劳动</h4>

<p>上边提到的频繁的F5刷新，可以通过<code>LiveReload+Guard</code>两个工具的组合来解决。<a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei">LiveReload</a>是一个浏览器的插件，通过协议与后台的服务器进行通信。当后台文件发生变化时，LiveReload会自动刷新页面。</p>

<p><a href="https://github.com/guard/guard">Guard</a>会使用操作系统的API来感知本地文件的变化，当文件变化后，它可以通知LiveReload进行刷新，当然Guard可以做其他一些事情，比如等SCSS发生变化时，自动编译CSS等。</p>

<p>两者结合之后，就可以节省我们大量的时间，而把精力主要投放在开发这件事情本身上。</p>

<h4>样板工程</h4>

<p>我在Github上公开了一个样板工程，这是一个开箱即用的工程，其中提供了这样一些配置：</p>

<ol>
<li>SCSS的编译环境（使用compass）</li>
<li>Guard配置（当你的SCSS文件或者HTML文件修改之后，自动通知LiveReload来刷新浏览器）</li>
<li>一个标准的HTML5样板文档</li>
<li>一个基本的style.scss</li>
</ol>


<p>Guardfile的配置中，如果<code>index.html</code>发生变化，或者<code>stylesheets</code>中的css文件发生变化，或者<code>scripts</code>目录中的js文件发生变化，都会触发<code>livereload</code>任务（通知浏览器）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">guard</span> <span class="s1">&#39;livereload&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{stylesheets/.+\.(css)}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{scripts/.+\.(js)}</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">guard</span> <span class="ss">:compass</span>
</span></code></pre></td></tr></table></div></figure>


<p>你只需要简单的将这个工程克隆到本地：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git@github.com:abruzzi/design-boilerplate.git mydesign
</span></code></pre></td></tr></table></div></figure>


<p>然后在该目录中执行<code>bundle install</code>即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>mydesign
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>这里有两点假设：
1.  你已经安装了<a href="http://rvm.io/">rvm</a>
2.  你已经使用rvm安装了某个版本的ruby，即<code>bundler</code>这个gem</p>

<h4>开发流程</h4>

<p>我通常会启动两个终端，一个用来运行<code>Guard</code>，另一个用来运行<code>HTTP Server</code>，然后是一个浏览器：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/workflow-resized.png" alt="workflow" /></p>

<p>当在编辑器中进行编辑之后，保存文件，浏览器会自动刷新，这样的快速反馈可以告诉我下一步应该如何修改：将背景色调整的再淡一点，还是把会h2的字体变得更大，或者图片和文字的上边缘没有对齐等等。</p>

<p>这种开发流程和后台开发人员进行TDD的方式非常类似：<code>实时反馈，小步前进</code>！如果你的桌子上有两个显示器的话，那就更好了，你可以在一台显示器上显示设计稿，另一台上分屏显示编辑器和浏览器，这样就可以非常舒服的进行UI开发了：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/two-displays-resized.png" alt="two displays" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[发布你的Web设计]]></title>
    <link href="http://abruzzi.github.com/2014/11/publish-your-web-design/"/>
    <updated>2014-11-21T22:24:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/11/publish-your-web-design</id>
    <content type="html"><![CDATA[<h3>Github的<code>主页服务</code></h3>

<p>Github提供了<a href="https://help.github.com/articles/user-organization-and-project-pages/">Github Pages</a>的服务来帮助你为自己的项目提供<code>主页</code>。目前，这种主页服务分为两种：<code>用户主页</code>和<code>项目主页</code>。其中<code>用户主页</code>已经称为广大开发者的标配，有很多的开发者已经将自己的博客迁移到了Github上，其中所用到的核心机制就是<code>Github Pages</code>。</p>

<p>这篇文章主要介绍如何使用<code>项目主页</code>。<code>项目主页</code>，顾名思义，就是你项目的主页，本来设计的初衷是为你的项目编写介绍文档，不过Github只提供对静态内容的托管。如果需要添加评论，可以使用<a href="https://disqus.com/home/">disqus</a>的服务，而和微博，flickr等集成都有现成的JavaScript片段，这里也不做详细讨论。</p>

<p>你现在正在看的我的博客正是托管在Github上，不过我对域名进行了自定义而已，如何做到这一点可以<a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">查看此处</a>的文档。</p>

<p>我之前发布的一个<code>我去过的地方</code>就使用了<code>项目主页</code>的服务，该项目的<a href="https://github.com/abruzzi/placesihavebeen">地址在此</a>，<a href="http://icodeit.org/placesihavebeen/">最终的页面</a>在这里。</p>

<p><img src="http://abruzzi.github.com/images/2014/11/places-i-have-been-resized.png" alt="places I have been" /></p>

<h4>Web设计样板工程</h4>

<p>我在Github上创建了一个<a href="https://github.com/abruzzi/design-boilerplate">设计样板工程</a>，你可以使用这个工程快速的搭建一个完整的样板工程，其中包含了：</p>

<ol>
<li>一个基本的HTML5的文档</li>
<li>SCSS环境</li>
<li>Guard环境，可以与LiveReload集成</li>
</ol>


<p>具体的操作可以<a href="https://github.com/abruzzi/design-boilerplate/blob/master/README.md">参看文档</a>。</p>

<h4>发布你的Web设计</h4>

<p>Github提供的<code>项目主页服务</code>可以帮助你快速将设计发布，你所需要做的就是为项目创建一个名叫<code>gh-pages</code>的分支，然后将<code>HTML/CSS/JS</code>放在这个分支上即可。</p>

<p>假设你在github上的用户名为<code>wumai</code>(一时间想不到好名字，看看窗外，就叫<strong>雾霾</strong>吧)，那么根据惯例，你的Github地址为<code>https://github.com/wumai</code>。这时候，假设你的项目（repo）的名称为<code>design-1</code>，则你的<code>项目主页地址</code>为<code>https://wumai.github.io/design-1</code>。</p>

<p>知道了你的<code>项目主页地址</code>，你就需要为这个页面添加内容了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git@github.com:abruzzi/design-boilerplate.git design-1
</span></code></pre></td></tr></table></div></figure>


<p>克隆了<code>design-boilerplate</code>之后，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>design-1
</span><span class='line'><span class="nv">$ </span>git remote -v
</span></code></pre></td></tr></table></div></figure>


<p>你可以看到当前的项目是和<code>git@github.com:abruzzi/design-boilerplate.git</code>关联的，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>origin git@github.com:abruzzi/design-boilerplate.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>origin    git@github.com:abruzzi/design-boilerplate.git <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>你需要先和这个样板工程解除绑定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git remote remove origin
</span></code></pre></td></tr></table></div></figure>


<p>然后你需要在Github上创建一个新的Repo，假设命名为<code>design-1</code>，这时候，将这个新创建的Repo作为你本地的remote：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git remote add -u origin git@github.com:wumai/design-1.git
</span></code></pre></td></tr></table></div></figure>


<p>与远程连接之后，我们可以开始实际的设计了，不过在这之前，需要先创建一个<code>gh-pages</code>分支：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git checkout -b gh-pages
</span></code></pre></td></tr></table></div></figure>


<p>这条命令会创建<code>gh-pages</code>分支，并切换到该分支，这样后续的修改都会在该分支进行，这也正是我们想要的。开发调试之后，就可以将这个分支push到Github：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git push -u origin gh-pages
</span></code></pre></td></tr></table></div></figure>


<p>好了，现在打开地址<code>http://wumai.github.io/design-1</code>，应该就可以看到你自己的设计了。</p>

<p><img src="http://abruzzi.github.com/images/2014/11/web-design-resized.png" alt="web design" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从一个小例子学习TDD]]></title>
    <link href="http://abruzzi.github.com/2014/11/tdd-step-by-step/"/>
    <updated>2014-11-09T15:07:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/11/tdd-step-by-step</id>
    <content type="html"><![CDATA[<h3>示例的需求描述</h3>

<p>今天我们需要完成的需求是这样的：</p>

<p>对于一个给定的字符串，如果其中<code>元音</code>字母数目在整个字符串中的比例超过了30%，则将该<code>元音</code>字母替换成字符串<code>mommy</code>，额外的，在替换时，如果有连续的元音出现，则仅替换一次。</p>

<p>如果用<code>实例化需求</code>(<a href="http://specificationbyexample.com/">Specification by Example</a>)的方式来描述的话，需求可以转换成这样几条实例：</p>

<ol>
<li><code>hmm</code>经过处理之后，应该保持原状</li>
<li><code>she</code>经过处理之后，应该被替换为<code>shmommy</code></li>
<li><code>hear</code>经过处理之后，应该被替换为<code>hmommyr</code></li>
</ol>


<p>当然，也可以加入一些边界值的检测，比如包含数字，大小写混杂的场景来验证，不过我们暂时可以将这些场景抛开，而仅仅关注与TDD本身。</p>

<h4>为什么选择这个<code>奇怪的</code>例子</h4>

<p>我记得在学校的时候，最害怕看到的就是书上举的各种离<code>生活</code>很远的例子，比如国外的书籍经常举汽车的例子，有引擎，有面板，但是作为一个只是能看到街上跑的车的穷学生，实际无法理解其中的关联关系。</p>

<p>其实，另外一种令人不那么舒服的例子是那种纯粹为了示例而编写的例子，现实世界中可能永远都不可能见到这样的代码，比如我们今天用到的例子。</p>

<p>当然，这种纯粹的例子也有其存在的价值：在脱离开复杂的细节之后，尽量的让读者专注于某个方面，从而达到对某方面练习的目的。因为跟现实完全相关的例子往往会变得复杂，很容易让读者转而去考虑复杂性本身，而忽略了对实践/练习的思考。</p>

<h4>TDD步骤</h4>

<p>通常的描述中，<code>TDD</code>有三个步骤：</p>

<ol>
<li>先编写一个测试，由于此时没有任何实现，因此测试会失败</li>
<li>编写实现，以最快，最简单的方式，此时测试会通过</li>
<li>查看实现/测试，有没有改进的余地，如果有的话就用重构的方式来优化，并在重构之后保证测试通过</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2014/11/tdd.png" alt="tdd" /></p>

<p>它的好处显而易见：</p>

<ol>
<li>时时关注于实现功能，这样不会跑偏</li>
<li>每个功能都有测试覆盖，一旦改错，就会有测试失败</li>
<li>重构时更有信心，不用怕破坏掉已有的功能</li>
<li>测试即文档，而且是不会过期的文档，因为一旦实现变化，相关测试就会失败</li>
</ol>


<p>使用<code>TDD</code>，一个重要的实践是<code>测试先行</code>。其实在编写任何测试之前，更重要的一个步骤是<code>任务分解</code>(Tasking)。只有当任务分解到恰当的粒度，整个过程才可能变得比较顺畅。</p>

<p>回到我们的例子，我们在知道整个需求的前提下，如何进行任务分解呢？作为<code>实现优先</code>的程序员，很可能会考虑诸如空字符串，元音比例是否到达30%等功能。这当然没有孰是孰非的问题，不过当需求本身就很复杂的情况下，这种直接面向实现的方式可能会导致越走越偏，考虑的越来越复杂，而耗费了几个小时的设计之后发现没有任何的实际进度。</p>

<p>如果是采用<code>TDD</code>的方式，下面的方式是一种可能的任务分解：</p>

<ol>
<li>输入一个非元音字符，并预期返回字符本身</li>
<li>输入一个元音，并预期返回<code>mommy</code></li>
<li>输入一个元音超过30%的字符串，并预期元音被替换</li>
<li>输入一个元音超过30%，并且存在连续元音的字符串，并预期只被替换一次</li>
</ol>


<p>当然，这个任务分解可能并不是<code>最好的</code>，但是是一个比较清晰的分解。</p>

<h3>实践</h3>

<h4>第一个任务</h4>

<p>在本文中，我们将使用JavaScript来完成该功能的编写，测试框架采用了<a href="http://jasmine.github.io/2.0/introduction.html">Jasmine</a>，这里有一个<a href="https://github.com/abruzzi/tdd-boilerplate">模板项目</a>，使用它你可以快速的启动，并跟着本教程一起实践。</p>

<p>根据任务分解，我们编写的第一个测试是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;mommify&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return h when given h&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="s2">&quot;h&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">mommify</span><span class="p">(</span><span class="s2">&quot;h&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个测试中有三行代码，这也是一般测试的标准写法，简称<code>3A</code>：</p>

<ol>
<li>组织数据（Arrange）</li>
<li>执行需要被测的函数（Action）</li>
<li>验证结果（Assertion）</li>
</ol>


<p>运行这个测试，此时由于还没有实现代码，因此Jasmine会报告失败。接下来我们用最快速的方法来编写实现，就目前来看，最简单的方式就是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mommify</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;h&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可能有人觉得这种实现太过狡猾，但是从<code>TDD</code>的角度来说，它确实能够令测试通过。这时候，我们需要编写另外一个测试来<code>驱动</code>出正确的行为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return m when given m&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="s2">&quot;m&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">mommify</span><span class="p">(</span><span class="s2">&quot;m&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，我们的实现就不能仅仅返回一个&#8221;h&#8221;了，就现在来看，最简单的方式是输入什么就返回什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mommify</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">word</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很好，这样我们的第一个<code>任务</code>已经完成了！我们已经经历了<code>失败-成功</code>的循环，这时候需要<code>review</code>一下代码，以保证代码是干净的：实现上来说，并没有可以优化的地方，但是我们发现两个测试用例其实测试的是同一件事情，因此可以删掉一个。</p>

<p>是的，测试代码也是代码，我们需要小心的维护它，以保证所有的代码都是干净的。</p>

<h4>第二个任务</h4>

<p>我们可以开始元音字母的子任务了，很容易想到的一个测试用例为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return mommy when given a&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">mommify</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试失败之后，能想到的最快速的方式是做一个简单的判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mommify</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">word</span> <span class="o">==</span> <span class="s2">&quot;a&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">word</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样测试又会通过，接下来就是重复5个元音的场景，不过使用JavaScript可以很容易的将这5个场景归为一组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return mommy when given a vowel&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;o&quot;</span><span class="p">,</span> <span class="s2">&quot;u&quot;</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">mommify</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>而实现则对一个的会变成（记住，用最简单的方式）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mommify</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">word</span> <span class="o">==</span> <span class="s2">&quot;a&quot;</span> <span class="o">||</span> <span class="nx">word</span> <span class="o">==</span> <span class="s2">&quot;e&quot;</span> <span class="o">||</span> <span class="nx">word</span> <span class="o">==</span> <span class="s2">&quot;i&quot;</span> <span class="o">||</span> <span class="nx">word</span> <span class="o">==</span> <span class="s2">&quot;o&quot;</span> <span class="o">||</span> <span class="nx">word</span> <span class="o">==</span> <span class="s2">&quot;u&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">word</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，测试通过了。又是进行重构的时间了，现在看看实现，简直不忍卒读，我们使用JavaScript的字符串的<code>indexOf</code>方法可以简化这段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mommify</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="s2">&quot;aeiou&quot;</span><span class="p">.</span><span class="nx">indedOf</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">word</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好多了！我想你现在已经或多或少的体会到了<code>TDD</code>中<code>任务分解</code>的好处了：进度可以掌握，而且目标非常明确，每一步都有相应的产出。</p>

<h4>第三个任务</h4>

<p>和之前一样，我们还是从测试开始：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should mommify if the vowels greater than 30%&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="s2">&quot;shmommy&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">mommify</span><span class="p">(</span><span class="s2">&quot;she&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在有一点点挑战了，因为我们的实现上一直都是单一的字符串，现在有多个了，不过没有关系，我们先按照最简单的方式来实现就对了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mommify</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="s2">&quot;aeiou&quot;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">count</span><span class="o">/</span><span class="nx">word</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mf">0.30</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="s2">&quot;aeiou&quot;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">str</span> <span class="o">+=</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">str</span> <span class="o">+=</span> <span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">str</span> <span class="o">=</span> <span class="nx">word</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>无论如何，测试通过了，我们首先计算了<code>元音</code>所占的比重，如果超过30%，则替换对应的字符，否则直接返回传入的字符串。</p>

<p>从现在来看，函数<code>mommify</code>中已经有了较多的逻辑，而且有一些重复的判断出现了（<code>"aeuio".indedOf</code>），是时候做一些重构了。</p>

<p>首先将相对独立的计算元音比重的部分抽取成一个函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">countVowels</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="s2">&quot;aeiou&quot;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，将重复的<code>"aeiou".indexOf</code>部分抽取为一个独立函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">isVowel</span><span class="p">(</span><span class="nx">character</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;aeiou&quot;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">character</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样本来的代码就被简化成了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mommify</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">countVowels</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">count</span><span class="o">/</span><span class="nx">word</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mf">0.30</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">isVowel</span><span class="p">(</span><span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">str</span> <span class="o">+=</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">str</span> <span class="o">+=</span> <span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">str</span> <span class="o">=</span> <span class="nx">word</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果细细读下来，就会发现发现对于元音是否超过30%的判断比较突兀，这里确实了一个<code>业务概念</code>，就是说，此处的<code>if</code>判断并不表意，更好的写法是讲它抽取为一个函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">shouldBeMommify</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">countVowels</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">count</span><span class="o">/</span><span class="nx">word</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mf">0.30</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且，替换元音的部分，我们也可以从主函数中挪出来，得到一个小函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">replace</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">isVowel</span><span class="p">(</span><span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">str</span> <span class="o">+=</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">str</span> <span class="o">+=</span> <span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，主函数得到了进一步的简化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mommify</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">shouldBeMommify</span><span class="p">(</span><span class="nx">word</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">replace</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">word</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>太好了，现在<code>mommify</code>就更加清晰了，并且每个抽取出来的函数都有了更具意义的名字，更清晰的职责。</p>

<h4>第四个任务</h4>

<p>经过了第三步，相信你已经对如何进行<code>TDD</code>有了很好的认识，而且也更有信心进行下一个任务了。同样，我们需要先编写测试用例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should not mommify if there are vowels sequences&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="s2">&quot;shmommyr&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">mommify</span><span class="p">(</span><span class="s2">&quot;shear&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在的问题关键是需要判断一个字符串中的前一个是否元音，由于我们之前已经做了足够的重构，现在需要修改的函数就变成了<code>replace</code>子函数，而不是主入口<code>mommify</code>了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">replace</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">isVowel</span><span class="p">(</span><span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">isVowel</span><span class="p">(</span><span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">str</span> <span class="o">+=</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">str</span> <span class="o">+=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">str</span> <span class="o">+=</span> <span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试通过之后，我们可以大胆的进行重构，抽取新的函数<code>next</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">next</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="nx">previous</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">isVowel</span><span class="p">(</span><span class="nx">current</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">isVowel</span><span class="p">(</span><span class="nx">previous</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">next</span> <span class="o">=</span> <span class="s2">&quot;mommy&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">next</span> <span class="o">=</span> <span class="nx">current</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">replace</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">str</span> <span class="o">+=</span> <span class="nx">next</span><span class="p">(</span><span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">word</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，如果你想看完整的/最新的代码，可以<a href="https://github.com/abruzzi/mommifier">在github上</a>找到。</p>

<h4>结束（？）</h4>

<p>重构是一个永无止境的实践，你可以不断的抽取，简化，重组。比如上例中对于常量的使用，对于JavaScript中的for的使用等，都可以更进一步。但是你需要权衡，适可而止，如果不小心做的太过，则可能引起过渡设计：引入太过的概念，过于简化的接口等。</p>

<p><code>TDD</code>是一种容易付诸实践的开发方式，在小的，简单的例子上如此，在大的，复杂的场景下也是如此。它优美且高效的地方在于：不假设任何人可以一次就写出完善的应用，而是鼓励小步前进，快速反馈，快速迭代。而演化到最后，得到的往往就是孜孜以求的优美设计。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命令行制作黑白+单色照片]]></title>
    <link href="http://abruzzi.github.com/2014/11/splash-color-in-black-and-white-photo/"/>
    <updated>2014-11-08T12:59:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/11/splash-color-in-black-and-white-photo</id>
    <content type="html"><![CDATA[<h3>黑白+单色照片</h3>

<p>有很多摄影师通过后期制作出了非常独特的<code>黑白+单色</code>照片，并由此来强调被拍摄主题，绿叶中的红花，紫色花朵的黄色花蕊等；的另一方面，这种照片可以强调背景的灰色，比如雾霾中的交通灯。</p>

<p>比如原图是这样的：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/flower-resized.jpg" alt="image" /></p>

<p>经过处理之后，最终的效果是这样的：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/flower-final-resized.jpg" alt="image" /></p>

<p>网络上已经有很多的教程来做到这一点，不过都需要使用<code>photoshop</code>来完成颜色的抽取，反色，灰化等。当然，作为程序员，特别是命令行控，自然会想到的是使用<a href="http://www.imagemagick.org/">图片编辑神器ImageMagick</a>来处理。</p>

<h4>基本原理</h4>

<p>我们都知道，彩色图片都是由3个通道（红，绿，蓝三个）叠加在一起的（如果图片带有透明通道的话，会有4个通道，我们这里略过）形成的。每个通道都是一张灰度图，并且会根据图片实际的色彩，在不同程度上有明暗差异。</p>

<p>比如上图的花朵，如果我们将jpg本身的RGB分离开，就会得到3张不同的灰度图：</p>

<p>红色通道灰度图：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/flower-red-resized.jpg" alt="red" /></p>

<p>绿色通道灰度图：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/flower-green-resized.jpg" alt="green" /></p>

<p>蓝色通道灰度图：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/flower-blue-resized.jpg" alt="blue" /></p>

<p>由于原图绿色和紫红色为主要色彩，所以在红色通道中，花朵比较偏向白色，蓝色通道中花朵也会偏向白色，因为紫红色包含红色和蓝色的亮度都比较高，而在绿色通道中，叶子的颜色则更偏向白色一些。</p>

<h4>图片的加减</h4>

<p>有了灰度图，我们就可以通过不同通道的加减来加强某些色彩，比如蓝色通道和红色通道相减之后，绿色就会被过滤掉，因为绿色在红色和蓝色通道中都表现为灰色：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/flower-minus-resized.jpg" alt="minus" /></p>

<p>这时候，我们已经有了花瓣的轮廓，但是还是有些模糊，我们还需要将其二值化。这样做出来的图片被称为<code>mask</code>，这个<code>mask</code>和最终的图片叠加之后，才会将我们关注的部位凸现出来。</p>

<p><img src="http://abruzzi.github.com/images/2014/11/flower-mask-resized.jpg" alt="mask" /></p>

<h3>实现</h3>

<p>ImageMagick提供的命令行工具<code>convert</code>非常强大，我们这里只是用其中很简单的几个：</p>

<pre><code>1.  图片通道的分离
2.  图片相加减
3.  叠加多个图片为一个
</code></pre>

<p>要分离一张RGB的图片，只需要指定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>convert flower.jpg -separate flower_rgb_%d.jpg
</span></code></pre></td></tr></table></div></figure>


<p>这条命令会把图片flower.jpg分离成三张图片，命令中的<code>%d</code>占位符会自动被展开为<code>1,2,3</code>这样的数字，这样这条命令会生成3章图片：flower_rgb_0.jpg,flower_rgb_1.jpg,flower_rgb_2.jpg。</p>

<p>图片的相减也很方便，使用命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>convert flower_rgb_2.jpg flower_rgb_0.jpg -compose minus <span class="se">\</span>
</span><span class='line'>-composite flower_minus.jpg
</span></code></pre></td></tr></table></div></figure>


<p>来完成。得到差值文件之后（已经具备了基本轮廓，如果不理想，可以换一个通道试试），就可以进一步二值化了。</p>

<p>命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>convert flower_minus.jpg -level 10%,30% flower_mask.jpg
</span></code></pre></td></tr></table></div></figure>


<p>用来生成<code>mask</code>文件，其中10%表示亮度低于10%的点会被认为是黑色，而30%则表示亮度高于30%的点会被认为是白色，这样的出来的图片就是只有黑白两种颜色了。</p>

<p>最后，我们需要将不同的图片合并在一起，形成最终的结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>convert flower_rgb_2.jpg flower.jpg flower_mask.jpg -composite flower_final.jpg
</span></code></pre></td></tr></table></div></figure>


<p>注意这里的次序，先是蓝色通道，然后是原图，最后是<code>mask</code>。这样<code>composite</code>的结果就是我们最开始看到的了：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/flower-final-resized.jpg" alt="image" /></p>

<p>再来看另外一张用同样方式生成的图片：</p>

<p><img src="http://abruzzi.github.com/images/2014/11/bird-final-resized.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用node-webkit构建桌面应用程序]]></title>
    <link href="http://abruzzi.github.com/2014/09/get-started-with-node-webkit/"/>
    <updated>2014-09-21T17:12:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/09/get-started-with-node-webkit</id>
    <content type="html"><![CDATA[<h3>Web前端的现状</h3>

<p>目前的Web前端的现状较之5-6年前，简直不能同日而语：从所使用的技术、工具、框架到开发一个产品所需要付出的工作量，从前端开发从业人员的数量到Web应用的数量，从企业对于Web前端的重要程度的认识到Web实际上为企业带来的回报，一切都有了翻天覆地的变化。</p>

<p>借助HTML5+CSS3的普及，加上一些开箱即用的CSS框架（如bootstrap，foundation等）支持，人们已经可以非常容易的从零开始搭建一个Web应用的前端。一个在UI方面非常业余的程序员也可以很快的做出一个像模像样的用户界面。而另一方面，基于操作系统原生API，要想设计并实现一个桌面应用，需要的付出则远远超过超过同水平的Web界面。</p>

<h3>webkit浏览器内核</h3>

<p><a href="https://www.webkit.org/">Webkit</a>作为最受欢迎的<em>浏览器内核</em>，自然有非常多的port。比如GTK+对它的port &#8211; <a href="http://webkitgtk.org/">WebkitGTK</a>，以及构建在WebkitGTK之上的Python的<a href="https://code.google.com/p/pywebkitgtk/">bind</a>。使用WebkitGTK的Python版本，开发人员可以用HTML+CSS来开发应用，然后写一点Python脚本，最后将其运行在桌面上。</p>

<p>这里有个早期的例子来教你<a href="http://arstechnica.com/information-technology/2009/07/how-to-build-a-desktop-wysiwyg-editor-with-webkit-and-html-5/1/">如何写一个所见即所得的编辑器</a>。桌面应用开发中，对于用户界面的复杂性一直是一个难题，而这种方式可以减轻很多的用户界面开发的复杂性，将界面开发交给另外更加灵活，更加容易编写和调试方式：HTML+CSS。</p>

<p>这种模式下基本的开发流程是编写一个HTML页面（作为程序入口），然后在这个页面上引入额外的CSS（界面风格）和JavaScript（动作），然后将这些资源交给工业级浏览器内核Webkit来渲染 &#8211; 这个过程和在浏览器中访问该文件并无二致，但是有两个额外的好处：</p>

<ol>
<li>页面运行在一个“桌面应用程序”中</li>
<li>没有地址栏，状态栏，菜单栏等，看起来更像是一个桌面应用</li>
<li>用户界面开发的复杂性被“外包”给一个更简单的环境</li>
</ol>


<p>这就是传说中的混合（hybrid）开发模式，比如现在移动开发中的cordova就是采用这种模式，使得本来被视为天堑的原生的用户界面开发变为坦途。</p>

<h4>node-webkit</h4>

<p><a href="https://github.com/rogerwang/node-webkit">node-webkit</a>是一个基于<a href="http://www.chromium.org/">chromium</a>和node.js的应用程序开发工具。它不但支持你使用传统的HTML5+CSS3+JS方式来开发你的应用程序，还支持无缝的与Node.js集成，也就是说，所有的Node支持的与操作系统交互的功能，如网络连接，文件系统，操作系统资源访问等，以及Node之上的第三方库都可以在node-webkit中进行使用。</p>

<p>更好的是，node-webkit是一个跨平台的工具，你可以使用它构建出运行在Mac OS，Linux以及Windows下的应用程序。应用程序通过Node.js来进行与系统相关的访问，而用HTML5+CSS3进行用户界面部分的设计。</p>

<p>node-webkit未必是未来桌面应用的唯一方式，但是却是一个非常好的选择，特别对于已经熟知Web前端开发技术栈的众多开发者来说，无需学习一门新的语言，一切都被很大程度的简化了。</p>

<h4>第一个node-webkit应用程序</h4>

<p>开发node-webkit应用程序非常简单。在<a href="https://github.com/rogerwang/node-webkit">这里下载</a>系统对应的版本。并确保对应的二进制文件(nwnw.exe)在系统的PATH之中。</p>

<p>创建一个新的目录，然后在该目录中创建一个<code>package.json</code>文件和一个<code>index.html</code>文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir -p hello-node-webkit
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>hello-node-webkit
</span><span class='line'><span class="nv">$ </span>touch package.json index.html
</span></code></pre></td></tr></table></div></figure>


<p><code>package.json</code>文件的内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;hello-node-webkit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;main&quot;</span><span class="o">:</span> <span class="s2">&quot;index.html&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>index.html</code>文件的内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Hello node-webkit<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Hello node-webkit<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后将这两个文件打在一个<code>zip</code>格式压缩包中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip -r hello-node-webkit.zip *
</span></code></pre></td></tr></table></div></figure>


<p>然后将这个文件重命名为<code>hello-node-webkit.nw</code>，最后使用node-webkit来启动这个应用程序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span> ~/Tools/node-webkit.app/Contents/MacOS/node-webkit hello-node-webkit.nw
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2014/09/hello-node-webkit-resized.png" alt="image" /></p>

<h4>添加外部JS/CSS</h4>

<p>接下来我们为这个页面添加一些外部的引用：CSS/JavaScript文件。首先创建两个目录<code>style</code>和<code>script</code>，然后分别创建文件如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>├── index.html
</span><span class='line'>├── package.json
</span><span class='line'>├── script
</span><span class='line'>│   ├── app.js
</span><span class='line'>│   └── jquery.min.js
</span><span class='line'>└── style
</span><span class='line'>    └── style.css
</span></code></pre></td></tr></table></div></figure>


<p>其中，style.css定义了<code>h1</code>的简单样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#999999</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而app.js则注册了一个简单的事件处理器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Heading 1 is clicked&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时的index.html修改如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Hello node-webkit<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;style/style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Hello node-webkit<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;script/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;script/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还是按照上一小节的命令完成打包，改名，启动之后。点击<code>h1</code>元素时，会弹出对话框如下：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/node-webkit-clicked-resized.png" alt="image" /></p>

<p>在这个例子中，我们使用了外部的<code>css</code>文件来添加样式，还引入了<code>jQuery</code>作为访问DOM元素的工具，最后还使用了一段调用<code>jQuery</code>的JavaScript代码。</p>

<h4>构建脚本</h4>

<p>你可能已经注意到了，使用node-webkit开发非常方便。但是这一系列的动作（修改HTML+CSS，压缩打包，改名，启动）等有一部分重复工作，我们可以将其自动化。</p>

<p>好在已经有了一个很好用的<code>grunt</code>的插件：<a href="https://github.com/mllrsohn/grunt-node-webkit-builder">grunt-node-webkit-builder</a>，这个插件可以帮助我们自动执行压缩打包这些动作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install grunt-node-webkit-builder
</span></code></pre></td></tr></table></div></figure>


<p>然后定义一个Gruntfile.js，这个文件中指定源文件（所有的HTML，JavaScript代码，CSS文件）所在目录，目标文件所在目录，需要构建的应用程序指定的操作系统平台等：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">nodewebkit</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">platforms</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;osx&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="nx">buildDir</span><span class="o">:</span> <span class="s1">&#39;builds&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;app/**/*&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-node-webkit-builder&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;nodewebkit&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，我们修改之后，就可以很简单的执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>grunt
</span></code></pre></td></tr></table></div></figure>


<p>来进行打包了。比如在Mac下，构建出来的应用位于<code>builds/&lt;app-name&gt;/osx</code>目录下，要启动该应用只需要在命令行输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>open builds/hello-node-webkit/osx/hello-node-webkit.app
</span></code></pre></td></tr></table></div></figure>


<p>或者在Finder中双击打开即可。</p>

<p>可以看到上例中的应用程序还有浓重的浏览器痕迹，比如地址栏，刷新按钮，甚至还有一个<code>DevTools</code>的按钮。我们可以通过修改<code>package.json</code>来指定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;hello-node-webkit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;main&quot;</span><span class="o">:</span> <span class="s2">&quot;index.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;window&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;toolbar&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;width&quot;</span><span class="o">:</span> <span class="mi">800</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;height&quot;</span><span class="o">:</span> <span class="mi">600</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的界面就更像是一个桌面应用了：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/hello-without-address-resized.png" alt="image" /></p>

<p>到目前为止，这个小的<em>应用程序</em>并没有什么有趣的特性，用户界面也毫无美感，但是有了这些基本知识和工具之后，我们就可以开始更进一步的开发。除了使用既有的CSS框架来完成用户界面的美化，我们还会使用node.js访问系统资源来构建真实的应用程序。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个简单的午餐推荐脚本]]></title>
    <link href="http://abruzzi.github.com/2014/09/simple-idea-and-simple-script/"/>
    <updated>2014-09-18T21:55:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/09/simple-idea-and-simple-script</id>
    <content type="html"><![CDATA[<h3>千古谜题 &#8212; 中午吃啥？</h3>

<p>如果要列出一些日常最频繁的会问/被问的问题的一个列表，<strong><em>吃啥？</em></strong>绝对会排在前三位，对于程序员来说，一样频繁的还有诸如<strong><em>这是谁写的？</em></strong>，<strong><em>这尼玛啥意思啊？</em></strong>之类。</p>

<p><strong>吃啥</strong>作为一个每天都会面对的问题，我们自然而言会想很多办法，比如随大流，其他人去哪儿我们跟着就行，但是这种方法最大的问题是：大部分人其实都没有很好的想法，大家都很迷茫。作为程序员，一个非常直观的想法就是找出一个列表，然后随机/伪随机的从这个列表中拿出一条来作为推荐。</p>

<h4>基本思路</h4>

<p>一个基本的思路是这样的，或者说，要开发的软件应该满足这几个基本的需求</p>

<ol>
<li>维护一个饭店/饭菜的列表</li>
<li>随机的从这个列表中取出一项</li>
<li>每天定时的触发，比如<strong>11:30</strong>准时提醒</li>
<li>这个工具最终要以弹出窗口等方式来提醒</li>
</ol>


<p>饭店/饭菜的列表比较容易，比如一个静态的JSON文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;关中客大碗面&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;王华峰肉夹馍&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;傻得帽冒菜&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;蒸饺&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;樊家肉夹馍&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;马奴哈羊肉泡馍&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;子午路张记肉夹馍&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;东滩水盆&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们需要一个小程序来读取这段JSON，并已随机/伪随机的方式返回一个推荐：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: UTF-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">first</span>
</span><span class='line'>    <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;food.json&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">)</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s2">&quot;name&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;今天去吃</span><span class="si">#{</span><span class="n">first</span><span class="si">}</span><span class="s2">吧?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试一下，将上边这个ruby程序运行几次，可以得到一下结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ruby lunch.rb
</span><span class='line'>今天去吃东滩水盆吧?
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ruby lunch.rb
</span><span class='line'>今天去吃子午路张记肉夹馍吧?
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ruby lunch.rb
</span><span class='line'>今天去吃傻得帽冒菜吧?
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ruby lunch.rb
</span><span class='line'>今天去吃马奴哈羊肉泡馍吧?
</span></code></pre></td></tr></table></div></figure>


<p>效果不错，最起码它可以在控制台上打印比较随机的一个推荐了。</p>

<h4>界面</h4>

<p>最开始界面当然会考虑用诸如Sinatra做一个Web页面，然后吃饭前大家派代表去摇一下，然后听天由命。但是这样的弊端是不直观，用户需要打开该网站，然后主动的获取信息。</p>

<p>我们更想要的是<strong>推送</strong>的方式来获得这个信息，经过简单的测试，发现Mac系统自带的<code>osascript</code>比较适合，这个工具可以执行苹果的脚本语言<a href="https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html">AppleScript</a>，当然还可以执行<a href="https://developer.apple.com/library/mac/documentation/applescript/conceptual/applescriptx/concepts/osa.html">OSA</a>，不过这篇的重点并不是这个，我们可以在另一篇文件中讨论这个主题。</p>

<p>比如一个很简单的<code>osascript</code>脚本是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="nb">display</span> <span class="nv">notification</span> <span class="s2">&quot;Hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在命令行输入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>osascript hello.osa
</span></code></pre></td></tr></table></div></figure>


<p>来执行这个脚本，这时你会看到一个弹出窗口：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/hello-osa-resized.png" alt="image" /></p>

<p>可以通过指定title来设置弹出窗口的标题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="nb">display</span> <span class="nv">notification</span> <span class="s2">&quot;Hello, world&quot;</span> <span class="nv">with</span> <span class="na">title</span> <span class="s2">&quot;This is Title&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2014/09/hello-osa-with-title-resized.png" alt="image" /></p>

<p>这样我们的实现就比较容易了，一个最简单的版本如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">chisha</span><span class="o">=</span><span class="sb">`</span>ruby lunch.rb<span class="sb">`</span>
</span><span class='line'>osascript -e <span class="s2">&quot;display notification \&quot;${chisha}\&quot; with title \&quot;Chisha?\&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先执行<code>ruby lunch.rb</code>得到一个推荐的饭店，然后将这个饭店名称传入osascript来生成通知：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/chisha-resized.png" alt="image" /></p>

<h4>定时任务</h4>

<p>有了这个脚本，我们可以很容易的使用<code>crontab</code>将其作为定时任务，比如将上述的脚本保存为<code>lunch.sh</code>，然后定义一个<code>crontab</code>脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>crontab -l
</span><span class='line'>30 11 * * 1-5 /Users/jtqiu/develop/ruby/chisha/lunch.sh
</span></code></pre></td></tr></table></div></figure>


<p>这个脚本会在每周的周一到周五的中午11点30分执行一次，对于<a href="http://en.wikipedia.org/wiki/Cron">crontab的语法</a>请参考此处。</p>

<p>一个直观的图示如下：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/crontab-syntax.gif" alt="image" /></p>

<p>图片来源(http://www.webenabled.com/sites/default/files/crontab-syntax.gif)</p>

<p>对应的<a href="https://github.com/abruzzi/chisha">代码都放在Github上</a>，而且这个README是我目前写的最详细的一个，:)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个关于时间的神奇Bug]]></title>
    <link href="http://abruzzi.github.com/2014/09/a-bug-about-time/"/>
    <updated>2014-09-04T22:37:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/09/a-bug-about-time</id>
    <content type="html"><![CDATA[<h3>一个神奇的Bug</h3>

<p>目前项目是一个非常传统的Web应用，其中有个页面需要用户填写自己的个人信息，包括姓名和出生日期。非常简单的一个小片段，UI看起来是这个样子的：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/personal-resized.png" alt="image" /></p>

<p>没有使用现成的<code>datepicker</code>，某个开发人员只是简单的自己收集了一下年，月，日信息，然后在JavaScript中根据填写的值来<code>new</code>了一个Date对象。</p>

<p>然后某天我在做测试的时候，顺手填写了一个日期<code>1986年5月4日</code>，然后奇怪的事情发生了：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/invalid-date-resized.png" alt="image" /></p>

<p><strong>WTF?</strong>，这日期怎么会是非法的呢？于是我又尝试了<code>1986年5月3日</code>和<code>1986年5月5日</code>，一切正常！好奇之下，我找到对应的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">dobDay</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#personal\\.dobDay&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dobMonth</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#personal\\.dobMonth&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dobYear</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#personal\\.dobYear&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Note month is not zero based.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dob</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">dobDay</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">dobMonth</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">dobYear</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dob</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">dobYear</span><span class="p">,</span> <span class="nx">dobMonth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">dobDay</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">dob</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">dob</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()</span> <span class="o">!==</span> <span class="nx">dobDay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">valid</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#dob-error&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">formMessages</span><span class="p">.</span><span class="nx">invalidDate</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从界面上获取用户输入的年，月，日信息，然后根据这三个数字创建一个JavaScript对象。但是奇怪的是，这里有一条判断<code>dob.getDate() !== dobDay</code>。</p>

<h3>JavaScript的日期类</h3>

<p>JavaScript中的日期类比较奇葩，你可以通过将年月日传入<code>new Date()</code>来构造出一个新的日期类型，奇葩之处在于，年和日都是从1开始计数，但是月份是从0开始计数的，比如<code>new Date(2014, 1, 2)</code>表示2014年<strong>2月</strong>2日。</p>

<p>那么，我们可以在Chrome的Console中查看一下神奇的<code>1986年5月4日</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">1986</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="nx">Sat</span> <span class="nx">May</span> <span class="mi">03</span> <span class="mi">1986</span> <span class="mi">23</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0800</span> <span class="p">(</span><span class="nx">CST</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>WTF? 我好好的5月4日怎么变成5月3日了呢？加上时分秒之后，逐步缩小排查范围：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">1986</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nx">Sat</span> <span class="nx">May</span> <span class="mi">03</span> <span class="mi">1986</span> <span class="mi">23</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">59</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0800</span> <span class="p">(</span><span class="nx">CST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">1986</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="nx">Sun</span> <span class="nx">May</span> <span class="mi">04</span> <span class="mi">1986</span> <span class="mi">01</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">CDT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候发现，当秒针通过<code>1986年5月3日的23点59分59秒</code>之后，时间就变成了<code>1986年5月4日的1点0分0秒</code>了！这个奇葩至极的问题是由于传说中的<strong>夏令时</strong>所致！</p>

<h3>夏令时</h3>

<p>其实常年和澳洲客户打交道，对日光节约时间(Daylight saving time)已经不陌生，不过澳洲在南半球冬夏正好和中国相反，因此完全没有将其当成日常的一部分。</p>

<p>维基上的解释比较专业：</p>

<blockquote><p>夏时制或夏令时间（英语：Summer time），又称日光节约时制、日光节约时间（英语：Daylight saving time），是一种为节约能源而人为规定地方时间的制度，在这一制度实行期间所采用的统一时间称为“夏令时间”。一般在天亮早的夏季人为将时间提前一小时，可以使人早起早睡，减少照明量，以充分利用光照资源，从而节约照明用电。各个采纳夏时制的国家具体规定不同。</p></blockquote>

<p>即，在夏天的某天（天亮的比较早），将时钟调快一个小时，以便大家起床更早，然后可以节省一些照明用电，然后在冬天的时候（天亮的比较晚）又调回去</p>

<p><img src="http://abruzzi.github.com/images/2014/09/dst.png" alt="image" /></p>

<p>根据百度百科上的描述：</p>

<blockquote><p>1986年至1991年，中华人民共和国在全国范围实行了六年夏令时，每年从4月中旬的第一个星期日2时整（北京时间）到9月中旬第一个星期日的凌晨2时整（北京夏令时）。除1986年因是实行夏令时的第一年，从5月4日开始到9月14日结束外，其它年份均按规定的时段施行。夏令时实施期间，将时间调快一小时。1992年4月5日后不再实行。</p></blockquote>

<p><code>1986年的5月4日</code>这个特别的日期终于显现出了其特殊之处了。</p>

<p>有了这个认识，我将系统时间设置为了澳洲标准时间，然后测试:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nx">Sun</span> <span class="nx">Oct</span> <span class="mi">05</span> <span class="mi">2014</span> <span class="mi">01</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">59</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">1000</span> <span class="p">(</span><span class="nx">EST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="nx">Sun</span> <span class="nx">Oct</span> <span class="mi">05</span> <span class="mi">2014</span> <span class="mi">03</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">1100</span> <span class="p">(</span><span class="nx">EST</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果观察足够细致的话会发现GMT后边的这个数字的变化，GMT是(Greenwish Mean Time)格林尼治标准时间的缩写，它最初是国际公认的时间基准线，地理上位于其东方的各个时区会加上一个偏移量，比如中国就是GMT+8，而澳洲就是GMT+10，而一旦进入夏令时，由于时钟拨快了一个小时，因此就会变成GMT+9/GMT+11。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">1986</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nx">Sat</span> <span class="nx">May</span> <span class="mi">03</span> <span class="mi">1986</span> <span class="mi">23</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">59</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0800</span> <span class="p">(</span><span class="nx">CST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">1986</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="nx">Sun</span> <span class="nx">May</span> <span class="mi">04</span> <span class="mi">1986</span> <span class="mi">01</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">CDT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如今年的巴西：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span>
</span><span class='line'><span class="nx">Sat</span> <span class="nx">Oct</span> <span class="mi">18</span> <span class="mi">2014</span> <span class="mi">23</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0300</span> <span class="p">(</span><span class="nx">BRT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他</h3>

<p>大部分实行夏令时的国家都会将这个调整放到凌晨两点，而不是零点，其中的一个原因应该就是避免出现这种状况。但是由于巴西还是将这个调整放到了凌晨，那么这个日期还是会出现<code>非法日期</code>这样的错误：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/invalid-date-brasil-resized.png" alt="image" /></p>

<h3>解决方法</h3>

<p>最简单的解决方法就是存储最简单，而且无歧义的年月日字符处，比如&#8217;1986-05-04&#8217;，而不是通过保存成一个JavaScript的Date对象的方式。</p>

<p>或者也可以使用一个Datepicker控件来获取日期字符串，然后保存：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/date-picker-resized.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速搭建IE测试环境（Virtualbox+ievms）]]></title>
    <link href="http://abruzzi.github.com/2014/09/setup-ie-series-testing-enviroments/"/>
    <updated>2014-09-01T18:16:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/09/setup-ie-series-testing-enviroments</id>
    <content type="html"><![CDATA[<h3>IE下的测试</h3>

<p>作为一个有追求的程序员，应该尽可能的远离Windows系统。不论从专业开发者的角度，还是仅仅作为最终用户从使用体验上来说，Windows都可以算是垃圾中的战斗机：<code>没有shell</code>、<code>响应极慢</code>（比如从开机到可用需要多久，再对比一下Mac下的体验）、大部分操作都强依赖于鼠标，没有对应的快捷键、各类<code>病毒</code>等等。</p>

<p>但是，最为一个职业的程序员，又很难绕开Windows这个<code>猥琐</code>而又事实上很现实的存在，毕竟Windows在非专业市场上的占有率还是不容小觑的。一般而言，开发人员可以很轻松的使用现代的操作系统，编辑器，开发工具完成实际的业务需求，这部分工作很可能占整个交付工作的40%，但是又不得不在多个浏览器（IE的各个版本）中花费另外的60%。</p>

<p>既然很难抛开，那么我们就需要想办法简化对其的使用，比如将Windows隔离为一个纯粹的测试环境（不安装任何其他的软件，并且一旦<code>感染病毒</code>之后可以快速恢复）。</p>

<ol>
<li>将Windows安装到虚拟机中</li>
<li>使用工具将诸如下载镜像，安装系统，安装特定版本的IE等操作简化为一条命令</li>
<li>可以很容易的创建一个干净，纯粹，稳定的Windows环境</li>
</ol>


<p><a href="https://github.com/xdissent/ievms">ievms</a>正是这样一个工具，它提供安装了各种版本IE的Windows操作系统的镜像，支持IE6到IE11。默认的，用户可以安装从IE6到IE11的所有镜像，但是很可能你无须所有的环境，ievms也提供对应的参数来确保只下载某一个。</p>

<p>不过对于一个团队来讲，可以安装所有的镜像到团队的某台公共的机器上，供所有人来进行跨IE浏览器的各个版本的测试。</p>

<p>这些虚拟机镜像都是虚拟磁盘<code>vmdk</code>文件，因此你需要先安装<a href="(https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>)。</p>

<h4>安装ievms</h4>

<p>安装ievms非常容易，只需要下载一个脚本即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -s https://raw.githubusercontent.com/xdissent/ievms/master/ievms.sh -L
</span></code></pre></td></tr></table></div></figure>


<p>github会将该请求重定向，所以加上<code>-L</code>参数来跳转到实际的地址。下载之后，执行该脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>chmod +x ievms.sh
</span><span class='line'><span class="nv">$ </span>./ievms.sh
</span></code></pre></td></tr></table></div></figure>


<p>默认的<code>ievms</code>会下载所有的虚拟机镜像，可以通过参数<code>IEVMS_VERSIONS</code>来选择特定版本的虚拟机：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./ievms.sh <span class="nv">IEVMS_VERSIONS</span><span class="o">=</span><span class="s2">&quot;7 8 9&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，也可以将这些命令合并为一行命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -s https://raw.githubusercontent.com/xdissent/ievms/master/ievms.sh -L | <span class="nv">IEVMS_VERSIONS</span><span class="o">=</span><span class="s2">&quot;7 8 9&quot;</span> bash
</span></code></pre></td></tr></table></div></figure>


<h4>用法</h4>

<p>安装之后，一个新的虚拟机会被添加到VirtualBox中，只需要启动这个虚拟机即可：</p>

<p><img src="http://abruzzi.github.com/images/2014/09/ie8-prepaid-resized.png" alt="image" /></p>

<p>另外，在这个虚拟机中，可以很方便的连接到宿主机。比如在宿主机上的12306端口运行了某个Web应用，那么通过地址：http://10.0.2.2:12306 来访问这个应用。</p>

<p><code>注意</code>: 由于是整个虚拟磁盘的形式发布，因此这些镜像的体积都非常大，所有的镜像安装之后，会占用37G的空间，对于任何一个开发机来说，这个尺寸过于庞大，但是对于整个团队来说，应该还是可以接受的。</p>

<p>官方给出的尺寸列表如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>du -ch *
</span><span class='line'> 11G    IE10 - Win7-disk1.vmdk
</span><span class='line'> 11G    IE11 - Win7-disk1.vmdk
</span><span class='line'>1.5G    IE6 - WinXP-disk1.vmdk
</span><span class='line'>1.6G    IE7 - WinXP-disk1.vmdk
</span><span class='line'>1.6G    IE8 - WinXP-disk1.vmdk
</span><span class='line'> 11G    IE9 - Win7-disk1.vmdk
</span><span class='line'> 37G    total
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVN中合并分支]]></title>
    <link href="http://abruzzi.github.com/2014/08/how-to-merge-branches-in-svn/"/>
    <updated>2014-08-25T22:42:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/08/how-to-merge-branches-in-svn</id>
    <content type="html"><![CDATA[<h3>分支策略</h3>

<p>本来准备整理一篇版本管理中，关于分支的维护策略。后来看到阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">这篇文章</a>，觉得非常清晰，这里给出一个链接供参考。</p>

<p>另外一个有意思的<a href="http://codicesoftware.blogspot.com/2008/08/4-steps-to-make-version-control-shine.html">链接在这里</a>，也可以一并参看。</p>

<p>本文就仅仅简单的描述一下，使用svn的命令行工具，如何具体完成合并的操作：</p>

<h3>在Svn中合并分支</h3>

<p>在svn中，要合并两个分支（通常是将某个分支b合并到trunk上，不过另一种模式下也可以将trunk合并到b上）非常简单，我们以一个简单的例子来说明其步骤。</p>

<p>比如我们要将trunk上的修改合并到分支b上，操作可以分为4步：</p>

<ol>
<li>切换到分支b上（之前执行过<code>svn co /path/branches/b</code>之后的目录）</li>
<li>使用<code>svn log --stop-on-copy</code>命令得到该分支的最早版本号</li>
<li>使用<code>svn merge --dry-run -rXXX:HEAD /path/trunk</code>来预览合并列表</li>
<li>合并</li>
</ol>


<p>在第二步中，一个典型的输出是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>svn log --stop-on-copy
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>r231625 | juntao | 2014-07-10 13:33:36 +1000 <span class="o">(</span>Thu, 10 Jul 2014<span class="o">)</span> | 1 line
</span><span class='line'>
</span><span class='line'>Juntao Change the version in pom.xml
</span><span class='line'>------------------------------------------------------------------------
</span><span class='line'>r231623 | abruzzi | 2014-07-10 13:22:00 +1000 <span class="o">(</span>Thu, 10 Jul 2014<span class="o">)</span> | 1 line
</span><span class='line'>
</span><span class='line'>Spike on data structure of c-wifi, a workable prototype
</span><span class='line'>------------------------------------------------------------------------
</span><span class='line'>r231610 | juntao | 2014-07-10 12:29:01 +1000 <span class="o">(</span>Thu, 10 Jul 2014<span class="o">)</span> | 1 line
</span><span class='line'>
</span><span class='line'>Create a new branch <span class="k">for </span>c-wifi
</span><span class='line'>------------------------------------------------------------------------
</span></code></pre></td></tr></table></div></figure>


<p>一旦有了这个修订号(231610)，就可以开始合并了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>svn merge --dry-run -r231610:HEAD /path/trunk
</span></code></pre></td></tr></table></div></figure>


<p>这个命令会列出从修订好r231610到当前版本之中，trunk和分支b之间的所有需要合并的文件列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>--- Merging r235763 through r236311 into <span class="s1">&#39;src/test/java&#39;</span>:
</span><span class='line'>U    src/test/java/tcom/checkout/CheckoutServiceTest.java
</span><span class='line'>U    src/test/java/bundles/checkout/accordion/AppointmentTest.java
</span><span class='line'>U    src/test/java/common/service/ServiceHandlerTest.java
</span><span class='line'>...
</span><span class='line'>Summary of conflicts:
</span><span class='line'>  Text conflicts: 2
</span></code></pre></td></tr></table></div></figure>


<p>最后，svn会给出冲突信息（如果有的话），这时，我们来决定是否合并，以及合并哪些修订号区间的修改。如果预览之后觉得可以直接合并，则可以直接运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>svn merge -r231610:HEAD /path/trunk
</span></code></pre></td></tr></table></div></figure>


<p>过程中，遇到冲突的情况，svn会询问采取哪种方式来处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Select: <span class="o">(</span>p<span class="o">)</span> postpone, <span class="o">(</span>df<span class="o">)</span> diff-full, <span class="o">(</span>e<span class="o">)</span> edit,
</span><span class='line'>        <span class="o">(</span>mc<span class="o">)</span> mine-conflict, <span class="o">(</span>tc<span class="o">)</span> theirs-conflict,
</span><span class='line'>        <span class="o">(</span>s<span class="o">)</span> show all options: p
</span></code></pre></td></tr></table></div></figure>


<p>如果拿不准，可以使用<code>p</code>子命令，然后等到最后在IDE或者编辑器中合并，如果想要丢弃自己的修改，使用<code>tc</code>子命令；如果要丢弃别人的修改，使用<code>mc</code>子命令。</p>

<p>最后，在编辑器中修改完了这些冲突之后，使用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>svn resolved pom.xml
</span><span class='line'>Resolved conflicted state of <span class="s1">&#39;pom.xml&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>来标记该冲突已经被解决。最后，运行测试并提交本次修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mvn clean <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>svn ci -m <span class="s2">&quot;Merge branch b with trunk&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的第一个Arduino机器人]]></title>
    <link href="http://abruzzi.github.com/2014/06/my-4w-robot-built-on-top-of-arduino/"/>
    <updated>2014-06-01T15:21:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/06/my-4w-robot-built-on-top-of-arduino</id>
    <content type="html"><![CDATA[<h3>我的第一个机器人</h3>

<p>以我的视角拍摄的机器人</p>

<p><embed src="http://player.youku.com/player.php/sid/XNzIwNzE4NjYw/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>以机器人自身的视角拍摄的</p>

<p><embed src="http://player.youku.com/player.php/sid/XNzIwNzI4NDQw/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>虽然迟了4年，但是我终于完成了我的第一台机器人的安装和配置。</p>

<ol>
<li>基于Arduino的<a href="http://arduino.cc/en/Main/arduinoBoard">Duemilanove开发板</a></li>
<li>可以躲开障碍物继续前进（有距离探测器，与障碍物的距离小于20cm时会自动转向）</li>
<li>4轮驱动</li>
</ol>


<p>我回忆了一下，这块板子和外设是我2010年3月在昆明的时候买的，那段时间对硬件突然有了极高的热情，但是买了之后准备开始之际，发现了几点困难：</p>

<ol>
<li>当时航空管制，电池不能空运，因此网购的小车没有电池</li>
<li>缺乏基本的硬件常识，四个电机如何接在两个电机端口上</li>
<li>不会焊接电机</li>
<li>没有买杜邦线，没有测试用的面包板</li>
</ol>


<p>基于这些困难，又加上我当时在找工作，准备面试之类，机器人的制造就放了下来。结果一放就是4年，中途从昆明搬家回到西安，不过细心的孙曼思将那一大包的零部件都打包好带了回来，多亏她认真负责的态度，才让这个机器人的产生有了可能。</p>

<h4>ThoughtWorks西安硬件小组</h4>

<p>2013年，在ThoughtWorks的西安Office有了硬件小组，他们研究开源硬件，以及这些小芯片在实际环境中的应用。比如RCA的高亮，做出了一个“半自动”地移动上的story的产品。2014年Hackday的时候，CASA团队又做出了一个看房机器人Dora，dora可以在房间中移动，由于装置了一个摄像头，因此可以实时的看到它看到的东西，而且Dora有安装了无线模块，你可以在远程操控它并得到实时图像。</p>

<p>好了，这么多铺垫事实上是有意义的，如果没有西安Office的硬件小组，我的这个机器人的诞生可能又需要若干年。它给我提供了丰富的资源，比如：</p>

<ol>
<li>有丰富硬件经验的张新宇，高亮，王超，可以让我很容易问问题并得到答案</li>
<li>张新宇帮我焊了一个电源的接头</li>
<li>王超提供了一个7.2V的电池</li>
<li>高亮的百宝箱中有一个9V电池盒</li>
<li>CASA团队桌子上开发Dora的一些下脚料</li>
<li>杜邦线，热缩管，电烙铁，松香，镊子，钳子，各种螺丝刀等等</li>
</ol>


<h4>4年 vs 4天</h4>

<p>虽然拖的时间很长（4年），但是事实上加起来搭建它的所有时间差不多是4天。</p>

<ol>
<li>单独测试URM模块</li>
<li>单独测试电机驱动L298N模块</li>
</ol>


<p>我发现，其实硬件开发和软件一样，化分模块，小步前进，测试，持续集成等等概念可以很好的运用其中，而且效果极好，比如我的小车基本上可以划分为这样几个小功能的逐步实现：</p>

<ol>
<li>测距模块的单独启动</li>
<li>测距模块控制一个LED（距离小于5cm，点亮一个LED）</li>
<li>电机的单独启动（正转，反转）</li>
<li>测距模块控制电机（距离小于5cm，转动电机）</li>
<li>多个电机联合（如何联线）</li>
<li>测距模块控制多个电机</li>
</ol>


<p>当到达最后一步时，基本上所有要验证的功能都已经就绪了，只需要拼装在小车的底座上，进行集成测试即可。其实，当划分好任务之后，每一个小的任务都不会花费很多时间。</p>

<h4>故障</h4>

<p>当我兴高采烈的去掉USB线，加上一个7.2V的电池给整个系统时，URM37测距模块伴随着浓郁的电器焦味中烧坏了，就是因为一个跳线的连接不当。这个系统中，电机需要单独加电，但是由于我自己电气知识的匮乏，导致了这个悲剧的发生。</p>

<p>不过，我又在Office的CASA团队的桌子上发现了另外一个测距模块，不过这次只经过了15分钟就完成了替换掉了老板子，换上了新的测距模块。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;NewPing.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TRIGGER_PIN  12  </span><span class="c1">// 12端口</span>
</span><span class='line'><span class="cp">#define ECHO_PIN     11  </span><span class="c1">// 11端口</span>
</span><span class='line'><span class="cp">#define MAX_DISTANCE 400</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">ledpin</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">NewPing</span> <span class="n">sonar</span><span class="p">(</span><span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="n">ECHO_PIN</span><span class="p">,</span> <span class="n">MAX_DISTANCE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span> <span class="c1">// Sets the baud rate to 9600</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">ledpin</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>   <span class="c1">//设置13号口为输出</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">uS</span> <span class="o">=</span> <span class="n">sonar</span><span class="p">.</span><span class="n">ping</span><span class="p">();</span> <span class="c1">// 把扫描时间转化成us</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">dis</span> <span class="o">=</span> <span class="n">uS</span> <span class="o">/</span> <span class="n">US_ROUNDTRIP_CM</span><span class="p">;</span> <span class="c1">//转成距离</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dis</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledpin</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledpin</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;Distance = &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">dis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">150</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>安装过程</h4>

<p>测距模块很早之前就<a href="http://icodeit.org/2012/01/arduino%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/">已经整理过</a>了，可以看看这里。不过我最后的成品已经没有使用URM37了，取而代之的是HC-SR04。</p>

<p>连接电机与电机驱动模块：</p>

<p><img src="http://abruzzi.github.com/images/2014/06/motor-resized.png" alt="image" /></p>

<p>第一次焊接电机，话说这种电机的触头也太粗糙了吧，不自己焊接的话，根本就用不成，完全没有进入模块化世界。</p>

<p><img src="http://abruzzi.github.com/images/2014/06/motor-repaired-resized.png" alt="image" /></p>

<p>连接之后
<img src="http://abruzzi.github.com/images/2014/06/motors-connected-resized.png" alt="image" /></p>

<p>装车
<img src="http://abruzzi.github.com/images/2014/06/4w-car-resized.png" alt="image" /></p>

<p><img src="http://abruzzi.github.com/images/2014/06/debug-car-resized.png" alt="image" /></p>

<h4>最终的代码</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;NewPing.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TRIGGER_PIN  12  </span><span class="c1">// 12端口</span>
</span><span class='line'><span class="cp">#define ECHO_PIN     11  </span><span class="c1">// 11端口</span>
</span><span class='line'><span class="cp">#define MAX_DISTANCE 400</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">E1</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">M1</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">E2</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">M2</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">ledpin</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>                  <span class="c1">// Sets the baud rate to 9600</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">ledpin</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>   <span class="c1">//设置13号口为输出</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">M1</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">M2</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledpin</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span> <span class="c1">//灭掉LED  </span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span> <span class="c1">//Give sensor some time to start up --Added By crystal  from Singapo, Thanks Crystal.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">advance</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">M1</span><span class="p">,</span><span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">M2</span><span class="p">,</span><span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E1</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E2</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">backoff</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">M1</span><span class="p">,</span><span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">M2</span><span class="p">,</span><span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E1</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E2</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">left</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">M1</span><span class="p">,</span><span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">M2</span><span class="p">,</span><span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E1</span><span class="p">,</span> <span class="mi">150</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E2</span><span class="p">,</span> <span class="mi">150</span><span class="p">);</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">right</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">M1</span><span class="p">,</span><span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">M2</span><span class="p">,</span><span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E1</span><span class="p">,</span> <span class="mi">150</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E2</span><span class="p">,</span> <span class="mi">150</span><span class="p">);</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">stop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">analogWrite</span><span class="p">(</span><span class="n">E2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">NewPing</span> <span class="n">sonar</span><span class="p">(</span><span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="n">ECHO_PIN</span><span class="p">,</span> <span class="n">MAX_DISTANCE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">uS</span> <span class="o">=</span> <span class="n">sonar</span><span class="p">.</span><span class="n">ping</span><span class="p">();</span> <span class="c1">// 把扫描时间转化成us</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">dis</span> <span class="o">=</span> <span class="n">uS</span> <span class="o">/</span> <span class="n">US_ROUNDTRIP_CM</span><span class="p">;</span> <span class="c1">//转成距离</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dis</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">stop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">left</span><span class="p">();</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledpin</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">advance</span><span class="p">();</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledpin</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;Distance = &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">dis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">150</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>体会</h4>

<ol>
<li>和开发软件一样，硬件开发也可以使用“敏捷开发”</li>
<li>实用主义，比如bluetip的使用，杜邦线拼接等</li>
<li>迭代开发，小步快跑</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web是怎么工作的: CGI脚本]]></title>
    <link href="http://abruzzi.github.com/2014/04/how-web-works-cgi/"/>
    <updated>2014-04-20T19:22:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/04/how-web-works-cgi</id>
    <content type="html"><![CDATA[<h4>CGI的一些背景</h4>

<p>Web在设计之初只是可以提供静态内容，用于诸如文档分享，论文引用这样的内容。但是很快人们就不满足于静态的内容了，根据UNIX系统的哲学，人们倾向于让不同的应用程序通过已有的机制（进程间通信如管道，UNIX域socket，以及TCP/IPsocket）连接起来。</p>

<p>在Web服务器，诸如Apache httpd中加入与外部应用程序的通信接口就显得非常自然了。<a href="http://en.wikipedia.org/wiki/Common_Gateway_Interface">CGI(Common Gateway Interface)</a>即是在这种背景下被发明的。</p>

<p>基本来说，CGI可以是任何的可执行程序，可以是Shell脚本，二进制应用，或者其他的脚本（Python脚本，Ruby脚本等）。CGI的基本流程是这样：</p>

<ol>
<li>Apache接收到客户端的请求</li>
<li>通过传统的fork-exec机制启动外部应用程序（cgi程序）</li>
<li>将客户端的请求数据通过环境变量和重定向发送给外部应用（cgi程序）</li>
<li>将cgi程序产生的输出写回给客户端（浏览器）</li>
<li>停止cgi程序（kill）</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2014/04/cgi.png" alt="image" /></p>

<h4>配置Apache支持CGI</h4>

<p>本文的所有示例都是在Mac OSX环境下编写和实验。</p>

<p>先创建一个cgi的运行目录<code>/Users/jtqiu/Sites/cgi-bin/</code>，然后创建一个空的文件<code>echo.cgi</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir -p /Users/jtqiu/Sites/cgi-bin/
</span><span class='line'><span class="nv">$ </span>touch echo.cgi
</span></code></pre></td></tr></table></div></figure>


<p>在这个文件中，添加一小段python代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Content-Type: text/html</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;&lt;b&gt;Hello, World&lt;/b&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改文件的执行权限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>chmod +x echo.cgi
</span></code></pre></td></tr></table></div></figure>


<p>这段python代码并无特别，如果在shell运行这个脚本，可以得到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Content-Type: text/html
</span><span class='line'>
</span><span class='line'>&lt;b&gt;Hello, World&lt;/b&gt;
</span></code></pre></td></tr></table></div></figure>


<p>这个可执行文件将作为我们的第一个CGI脚本，完成了这一步，我们需要配置Apache来支持CGI，首先，在目录<code>/etc/apache2/users/</code>中创建一个文件，文件名就是你的用户名称，如<code>jtqiu.conf</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo vi /etc/apache2/users/jtqiu.conf
</span></code></pre></td></tr></table></div></figure>


<p>添加以下配置，其中<code>/Users/jtqiu/Sites/cgi-bin/</code>目录就是所有cgi脚本所在的目录，在次配置中<code>AddHandler cgi-script .cgi</code>表示为所有后缀为cgi的添加<code>cgi-script</code>的<code>Handler</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Directory</span> <span class="err">&quot;/Users/jtqiu/Sites/cgi-bin/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    AddHandler cgi-script .cgi
</span><span class='line'>    Options +ExecCGI
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后重启apache:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apachectl restart
</span></code></pre></td></tr></table></div></figure>


<p>下面我们就通过<code>curl</code>来进行测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -v http://localhost/~jtqiu/cgi-bin/echo.cgi
</span></code></pre></td></tr></table></div></figure>


<h5>更进一步</h5>

<p>传统的CGI脚本的生命周期很短，Web服务器在接收到一次请求之后，会fork出一个进程来执行CGI脚本，一旦请求完成，这个进程就会被终止。</p>

<p>我们可以设置一个超时来查看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Content-Type: text/html</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;&lt;b&gt;Hello, World&lt;/b&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -v http://localhost/~jtqiu/cgi-bin/echo.cgi
</span></code></pre></td></tr></table></div></figure>


<p>再次通过curl脚本来查看，另起一个窗口，通过<code>ps -Af | grep cgi</code>来查看</p>

<p><img src="http://abruzzi.github.com/images/2014/04/cgi-ps-resized.png" alt="[image]" /></p>

<h5>一个稍微有点用的脚本</h5>

<p>Web服务器通过环境变量来和CGI脚本进行部分的数据传递，比如下面这个例子会打印所有的，来自Web服务器的环境变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Content-type: text/html</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;&lt;b&gt;Environment&lt;/b&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;&lt;ul&gt;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&quot;&lt;li&gt;</span><span class="si">%20s</span><span class="s">: </span><span class="si">%s</span><span class="s">&lt;/li&gt;&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">param</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="n">param</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;&lt;/ul&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<code>curl</code>来测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="o">/</span>\<span class="o">~</span><span class="n">jtqiu</span><span class="o">/</span><span class="n">cgi</span><span class="o">-</span><span class="nb">bin</span><span class="o">/</span><span class="n">echo</span><span class="o">.</span><span class="n">cgi</span>
</span></code></pre></td></tr></table></div></figure>


<p>会的到一个完整的环境变量列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;b&gt;</span>Environment<span class="nt">&lt;/b&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>VERSIONER_PYTHON_PREFER_32_BIT: no<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>     SERVER_SOFTWARE: Apache/2.2.26 (Unix) DAV/2 PHP/5.4.24 mod_ssl/2.2.26 OpenSSL/0.9.8y<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>         SCRIPT_NAME: /~jtqiu/cgi-bin/echo.cgi<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>    SERVER_SIGNATURE: <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>      REQUEST_METHOD: GET<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>     SERVER_PROTOCOL: HTTP/1.1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>        QUERY_STRING: <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>                PATH: /usr/bin:/bin:/usr/sbin:/sbin<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>     HTTP_USER_AGENT: curl/7.30.0<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>         SERVER_NAME: localhost<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>         REMOTE_ADDR: ::1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>         SERVER_PORT: 80<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>         SERVER_ADDR: ::1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>       DOCUMENT_ROOT: /Library/WebServer/Documents<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>     SCRIPT_FILENAME: /Users/jtqiu/Sites/cgi-bin/echo.cgi<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>        SERVER_ADMIN: you@example.com<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>           HTTP_HOST: localhost<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>         REQUEST_URI: /~jtqiu/cgi-bin/echo.cgi<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>         HTTP_ACCEPT: */*<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>   GATEWAY_INTERFACE: CGI/1.1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>         REMOTE_PORT: 64361<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>__CF_USER_TEXT_ENCODING: 0x46:0:0<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>VERSIONER_PYTHON_VERSION: 2.7<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>更进一步FastCGI</h4>

<p>传统的CGI脚本，生命周期很短，只会serve一次请求就终止了。如果有高并发的场景的话，显然服务器性能会收到极大的冲击。因此人们又设计了<a href="http://en.wikipedia.org/wiki/FastCGI">FastCGI</a>。FastCGI的生命周期很长，甚至可以被实现成一个TCP/IP的服务器，这样就会永远运行下去。</p>

<p>目前，Apache，Nginx等Web服务器都已经支持FastCGI。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全球地震信息的可视化（使用OpenLayers）]]></title>
    <link href="http://abruzzi.github.com/2014/04/render-geojson-by-using-openlayers/"/>
    <updated>2014-04-15T21:33:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/04/render-geojson-by-using-openlayers</id>
    <content type="html"><![CDATA[<h4>OpenLayers</h4>

<p>使用<a href="http://openlayers.org/">OpenLayers</a>可以很容易的搭建基于Web的GIS系统，OpenLayers支持不同的数据源(符合WMS协议的服务器，Google Maps API, Bing Maps，KML以及<a href="http://geojson.org/">GeoJSON</a>等等)。通过将不同的数据源的数据整合，我们可以开发出丰富而用户友好的GIS系统。</p>

<p>OpenLayers可以轻松的处理GeoJSON数据，并将其生成矢量层，我们可以将这个层叠加在其他数据源（比如OSM）提供的地图上，以得到一个完整的小应用。</p>

<p>最后的运行结果是这样的：</p>

<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-earthquake-resized.png" alt="image" /></p>

<h4>GeoJSON</h4>

<p><a href="http://www.usgs.gov/aboutusgs/">美国地理信息调查局</a>是一个科学组织，他公开了很多地球上的灾难信息，比如对地震的统计，并提供编程接口。它公开的地震统计信息，包含全世界各地报告过的地震，以及全美所有检测到的地震，并以多种周期（小时，天，周，月等），多种格式（GeoJSON，KML，Atom等），以便应用程序的开发者只用这些数据。</p>

<h4>实现</h4>

<h5>设置基本环境</h5>

<p>我们将借助bower来安装所有的代码依赖。首先，我们需要bower将所有的包都安装在<code>components</code>目录下，这个可以通过在当前目录的<code>.bowerrc</code>文件中制定<code>directory</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;directory&quot;</span><span class="p">:</span> <span class="s2">&quot;components&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后运行bower安装jquery以及openlayers：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bower install jquery
</span><span class='line'><span class="nv">$ </span>bower install openlayers
</span></code></pre></td></tr></table></div></figure>


<p>通过bower安装OpenLayers之后，可以通过OpenLayers自带的build工具将所有的源码合并压缩为一个文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>components/openlayers/build
</span><span class='line'><span class="nv">$ </span>./build.py <span class="c">#将会在当前目录下生成一个OpenLayers.js的文件</span>
</span><span class='line'><span class="nv">$ </span>mv OpenLayers.js ../
</span></code></pre></td></tr></table></div></figure>


<p>然后，创建一个简单的HTML文件，引用jquery.js和OpenLayers.js，以及我们的入口脚本app.js，本文所有的代码都只是修改这个文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Earthquake distribution<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;map&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;components/jquery/jquery.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;components/openlayers/OpenLayers.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;app.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以运行<code>bower init</code>来将生成<code>bower.json</code>，以方便别人使用我们的应用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">bower</span> <span class="nx">init</span>
</span></code></pre></td></tr></table></div></figure>


<h5>基本代码</h5>

<p>一个最简单的OpenLayers应用，只需要7行代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="s2">&quot;map&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">osm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Layer</span><span class="p">.</span><span class="nx">OSM</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">addLayers</span><span class="p">([</span><span class="nx">osm</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">zoomToMaxExtent</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码在id为<code>map</code>的HTML元素创建了一个地图，这个地图上有一个叫OSM的层（即<a href="http://www.openstreetmap.org/">OpenStreetMap</a>，一个开源，开放的地图平台），并将地图缩小到边界范围（以获得最大的视野）:</p>

<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-osm-resized.png" alt="image" /></p>

<h5>生成矢量层</h5>

<p>通过GeoJSON生成矢量图非常容易：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">geo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Layer</span><span class="p">.</span><span class="nx">Vector</span><span class="p">(</span><span class="s2">&quot;EarthQuake&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">strategies</span><span class="o">:</span> <span class="p">[</span><span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Strategy</span><span class="p">.</span><span class="nx">Fixed</span><span class="p">()],</span>
</span><span class='line'>    <span class="nx">protocol</span><span class="o">:</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">.</span><span class="nx">HTTP</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/all_day.geojson&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">format</span><span class="o">:</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Format</span><span class="p">.</span><span class="nx">GeoJSON</span><span class="p">({</span><span class="nx">ignoreExtraDims</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意此处的<a href="http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson">all_day.geojson</a>是从USGS网站上下载的，过去一天中世界各地的所有地震统计。</p>

<p>上边的代码创建了一个名称为<code>EarthQuake</code>的矢量层，<code>strategies</code>中的Fixed策略表示仅请求一次资源，然后缓存在前端，不再请求。<code>protocol</code>表明数据来源为<code>all_day.geojson</code>，格式为<code>OpenLayers.Format.GeoJSON</code>。由于USGS返回的地理信息除了经纬度还包含深度，而OpenLayers默认只处理经纬度的，因此需要此处的<code>ignoreExtraDims</code>来忽略那个额外的深度信息。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-geojson-resized.png" alt="image" /></p>

<h5>定制样式</h5>

<p>虽然我们已经加上了新的层，也可以看到很多表示地震的点信息，但是并不能看出哪些地震是严重的，比如里氏3级以下的地震，几乎没有危害，可以标注成一种颜色；而更高震级的可以标记成另外一种颜色。</p>

<p>OpenLayers可以很容易的做到这个定制化:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">style</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Style</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ruleLow</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Rule</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">filter</span><span class="o">:</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Filter</span><span class="p">.</span><span class="nb">Function</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">evaluate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">properties</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">mag</span> <span class="o">&lt;</span> <span class="mf">3.0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>  <span class="nx">symbolizer</span><span class="o">:</span> <span class="p">{</span><span class="nx">pointRadius</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">fillColor</span><span class="o">:</span> <span class="s2">&quot;green&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nx">fillOpacity</span><span class="o">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s2">&quot;black&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ruleHigh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Rule</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">filter</span><span class="o">:</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Filter</span><span class="p">.</span><span class="nb">Function</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">evaluate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">properties</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">mag</span> <span class="o">&gt;=</span> <span class="mf">3.0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>    <span class="nx">symbolizer</span><span class="o">:</span> <span class="p">{</span><span class="nx">pointRadius</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">fillColor</span><span class="o">:</span> <span class="s2">&quot;red&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nx">fillOpacity</span><span class="o">:</span> <span class="mf">0.7</span><span class="p">,</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s2">&quot;black&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">style</span><span class="p">.</span><span class="nx">addRules</span><span class="p">([</span><span class="nx">ruleLow</span><span class="p">,</span> <span class="nx">ruleHigh</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">geo</span><span class="p">.</span><span class="nx">styleMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">StyleMap</span><span class="p">(</span><span class="nx">style</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先创建一个Style对象，为Style添加两条规则Rule，然后将Style对象包装成StyleMap并赋值给表示地震的矢量层<code>earthquake</code>。</p>

<p>对于规则ruleLow，我们定义了，当一个feature的属性值mag(震级)小于三的时候后，使用绿色的，半径为3px的小圆圈来表示。而ruleHigh则定义了当震级大于等于三的时候，用红色，半径为5px的圆圈来表示。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-geojson-styling-resized.png" alt="image" /></p>

<h5>加上事件处理</h5>

<p>虽然我们已经可以直观的根据震级不同而看到不同颜色的点，但是整个应用仍然没有多少意义：它不具备于用户的交互能力。我们需要添加上事件处理，当用户点击地图上的一个圆点的时候，应该看到一个更详细的窗口。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectControl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Control</span><span class="p">.</span><span class="nx">SelectFeature</span><span class="p">(</span><span class="nx">geo</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">onSelect</span><span class="o">:</span> <span class="nx">onFeatureSelect</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">onUnselect</span><span class="o">:</span> <span class="nx">onFeatureUnselect</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">map</span><span class="p">.</span><span class="nx">addControl</span><span class="p">(</span><span class="nx">selectControl</span><span class="p">);</span>
</span><span class='line'><span class="nx">selectControl</span><span class="p">.</span><span class="nx">activate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onFeatureSelect</span><span class="p">(</span><span class="nx">feature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s2">&quot;&lt;span&gt;&quot;</span><span class="o">+</span><span class="nx">feature</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">title</span><span class="o">+</span><span class="s2">&quot;&lt;/span&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">popup</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Popup</span><span class="p">.</span><span class="nx">FramedCloud</span><span class="p">(</span><span class="s2">&quot;popup&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">feature</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">getBounds</span><span class="p">().</span><span class="nx">getCenterLonLat</span><span class="p">(),</span>
</span><span class='line'>            <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">html</span><span class="p">,</span>
</span><span class='line'>            <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>            <span class="kc">true</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">popup</span><span class="p">.</span><span class="nx">panMapIfOutOfView</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">popup</span><span class="p">.</span><span class="nx">autoSize</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">feature</span><span class="p">.</span><span class="nx">popup</span> <span class="o">=</span> <span class="nx">popup</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">addPopup</span><span class="p">(</span><span class="nx">popup</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onFeatureUnselect</span><span class="p">(</span><span class="nx">feature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">removePopup</span><span class="p">(</span><span class="nx">feature</span><span class="p">.</span><span class="nx">popup</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">feature</span><span class="p">.</span><span class="nx">popup</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">feature</span><span class="p">.</span><span class="nx">popup</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在地图上添加了一个<code>SelectFeature</code>元素，并注册了回调函数：当矢量层中的矢量被选中之后，函数<code>onFeatureSelect</code>将被执行，我们可以在这个函数中添加对弹出窗口的控制。当<code>onFeatureSelect</code>执行时，OpenLayers会将当前的Feature传递进来，我们可以动态的取得震级，标题，链接等信息，并展现给最终用户。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-geojson-popup-resized.png" alt="[image]" /></p>

<p>如果将数据源扩大到本周的所有地震：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">geo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Layer</span><span class="p">.</span><span class="nx">Vector</span><span class="p">(</span><span class="s2">&quot;EarthQuake&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">strategies</span><span class="o">:</span> <span class="p">[</span><span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Strategy</span><span class="p">.</span><span class="nx">Fixed</span><span class="p">()],</span>
</span><span class='line'>    <span class="nx">protocol</span><span class="o">:</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">.</span><span class="nx">HTTP</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/all_week.geojson&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">format</span><span class="o">:</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Format</span><span class="p">.</span><span class="nx">GeoJSON</span><span class="p">({</span><span class="nx">ignoreExtraDims</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-geojson-weekly-resized.png" alt="image" /></p>

<p>完整的代码示例<a href="https://github.com/abruzzi/earthquake-viz">可以看这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建地图服务器（使用Mapnik）]]></title>
    <link href="http://abruzzi.github.com/2014/04/setup-map-server-by-mapnik/"/>
    <updated>2014-04-12T14:07:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/04/setup-map-server-by-mapnik</id>
    <content type="html"><![CDATA[<h4>渲染引擎Mapnik</h4>

<p><a href="http://icodeit.org/2014/04/intro-map-gis/">上一篇文章</a>中大概介绍了<a href="https://github.com/mapnik">Mapnik</a>，它是一个渲染引擎，一般开发中都会使用他的python的bind做开发。</p>

<p>Mapnik的文档写的比较详细，我们这里只是做一些必要的介绍，详细的细节可以参看Mapnik在<a href="https://github.com/mapnik/mapnik/wiki">Github上的文档</a>。</p>

<p>在Mac下，安装Mapnik十分容易，使用brew即可，注意我们在此处带上<code>--with-postgresql</code>选项，使得Mapnik可以通过PostGIS来访问数据库：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install mapnik --with-postgresql
</span></code></pre></td></tr></table></div></figure>


<p>安装完成之后，可以通过一个小的python脚本来测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">mapnik</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Map</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">background</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Color</span><span class="p">(</span><span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">zoom_all</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">mapnik</span><span class="o">.</span><span class="n">render_to_file</span><span class="p">(</span><span class="nb">map</span><span class="p">,</span> <span class="s">&#39;red.png&#39;</span><span class="p">,</span> <span class="s">&#39;png&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段脚本可以在当前目录下生成一个红色的256x256的小图片。好了，有了渲染引擎，我们需要一些数据来进行渲染了。</p>

<h4>数据源</h4>

<p>最通用的数据格式为Shapefiles，目前有很多的免费地理信息供公共下载，我们可以从<a href="http://metro.teczno.com/">Metro的站点</a>上下载一些小的数据文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget http://osm-extracted-metros.s3.amazonaws.com/chengdu.osm2pgsql-shapefiles.zip
</span><span class='line'><span class="nv">$ </span>mkdir chengdu
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>chengdu
</span><span class='line'><span class="nv">$ </span>unzip chengdu.osm2pgsql-shapefiles.zip
</span></code></pre></td></tr></table></div></figure>


<p>这样就得到了一组文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>find . -name <span class="s2">&quot;*.shp&quot;</span>
</span><span class='line'>./chengdu.osm-line.shp
</span><span class='line'>./chengdu.osm-point.shp
</span><span class='line'>./chengdu.osm-polygon.shp
</span></code></pre></td></tr></table></div></figure>


<p>每一个shp文件都会对应几个其他类型的文件，比如投影信息，属性表等。仅仅查看shp的话，有表示所有点的文件chengdu.osm-line.shp，又表示所有线的chengdu.osm-line.shp，以及表示所有面（区域）的chengdu.osm-polygon.shp文件。</p>

<p>有了这些文件，我们就可以做一些测试了，比如我们首先加载所有的线条，并根据这些线条生成一个图层：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">mapnik</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Map</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">800</span><span class="p">)</span>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">background</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Color</span><span class="p">(</span><span class="s">&#39;#ffffff&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">style</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Style</span><span class="p">()</span>
</span><span class='line'><span class="n">rule</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Rule</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">point_symbolizer</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">PointSymbolizer</span><span class="p">()</span>
</span><span class='line'><span class="n">rule</span><span class="o">.</span><span class="n">symbols</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">point_symbolizer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">style</span><span class="o">.</span><span class="n">rules</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">rule</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">append_style</span><span class="p">(</span><span class="s">&#39;default&#39;</span><span class="p">,</span> <span class="n">style</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ds_point</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Shapefile</span><span class="p">(</span><span class="nb">file</span><span class="o">=</span><span class="s">&#39;chengdu.osm-point.shp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">point</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Layer</span><span class="p">(</span><span class="s">&#39;point&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">point</span><span class="o">.</span><span class="n">datasource</span> <span class="o">=</span> <span class="n">ds_point</span>
</span><span class='line'><span class="n">point</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;default&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">zoom_all</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">mapnik</span><span class="o">.</span><span class="n">render_to_file</span><span class="p">(</span><span class="nb">map</span><span class="p">,</span> <span class="s">&#39;chengdu.png&#39;</span><span class="p">,</span> <span class="s">&#39;png&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以得到：</p>

<p><img src="http://abruzzi.github.com/images/2014/04/chengdu-point.png" alt="points" /></p>

<p>这里介绍一下Mapnik中的一些概念：一个Map可以包含若干个层（Layer），每个层可以独立着色，即可以为每个层定制样式（Style），每个样式由若干个规则组成（Rule）。每个规则由是由若干个符号定制。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/chengdu-line.png" alt="lines" /></p>

<p>如果将两者重叠，则可以得到：</p>

<p><img src="http://abruzzi.github.com/images/2014/04/chengdu-point-and-line.png" alt="lines" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">polygon_symbolizer</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">PolygonSymbolizer</span><span class="p">(</span><span class="n">mapnik</span><span class="o">.</span><span class="n">Color</span><span class="p">(</span><span class="s">&#39;#c8102e&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">polygon_rule</span><span class="o">.</span><span class="n">symbols</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">polygon_symbolizer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ds_polygon</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Shapefile</span><span class="p">(</span><span class="nb">file</span><span class="o">=</span><span class="s">&#39;chengdu.osm-polygon.shp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">polygon</span> <span class="o">=</span> <span class="n">mapnik</span><span class="o">.</span><span class="n">Layer</span><span class="p">(</span><span class="s">&#39;polygon&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">polygon</span><span class="o">.</span><span class="n">datasource</span> <span class="o">=</span> <span class="n">ds_polygon</span>
</span><span class='line'><span class="n">polygon</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;polygon&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">polygon</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2014/04/chengdu-polygon.png" alt="image" /></p>

<p>将这三个层叠加在一起，会得到最终的结果：</p>

<p><img src="http://abruzzi.github.com/images/2014/04/chengdu-point-and-line-and-polygon.png" alt="lines" /></p>

<h4>数据转化</h4>

<p>在进一步之前，我们需要将数据存储在数据库中。我们可以将shapefile通过转化存入到数据库中。PostGIS本身自带了一个用于此作用的工具：<code>shp2pgsql</code>。可以通过这个工具来先将shapefile导入到数据库中。也可以直接导入别的开放数据，比如很多OSM格式的数据源，我们此处仅仅简单的从别的数据源将OSM格式的数据下载并导入到PostGIS中。</p>

<p>创建数据库<code>chengdu</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>createdb chengdu -O gis -E UTF8 -e
</span><span class='line'>CREATE DATABASE chengdu OWNER gis ENCODING <span class="s1">&#39;UTF8&#39;</span>;
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>psql -U gis -d chengdu
</span></code></pre></td></tr></table></div></figure>


<p>登陆PostGres，然后为数据库<code>chengdu</code>启动PostGIS扩展：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Enable PostGIS (includes raster)</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">postgis</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- Enable Topology</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">postgis_topology</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- fuzzy matching needed for Tiger</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">fuzzystrmatch</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- Enable US Tiger Geocoder</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">postgis_tiger_geocoder</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget http://osm-extracted-metros.s3.amazonaws.com/chengdu.osm.bz2
</span><span class='line'><span class="nv">$ </span>bunzip2 -d chengdu.osm.bz2
</span><span class='line'><span class="nv">$ </span>osm2pgsql -U gis -d chengdu -s -S ./default.style chengdu.osm
</span></code></pre></td></tr></table></div></figure>


<p>这个命令将chengdu.osm导入到了名称为<code>chengdu</code>的数据库中。</p>

<p>可以通过SQL命令查看其中的数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">ST_Extent</span><span class="p">(</span><span class="n">ST_Transform</span><span class="p">(</span><span class="n">way</span><span class="p">,</span><span class="mi">4326</span><span class="p">))</span> <span class="k">from</span> <span class="n">planet_osm_roads</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>                            <span class="n">st_extent</span>
</span><span class='line'><span class="c1">--------------------------------------------------------------------------</span>
</span><span class='line'> <span class="n">BOX</span><span class="p">(</span><span class="mi">103</span><span class="p">.</span><span class="mi">564165069794</span> <span class="mi">30</span><span class="p">.</span><span class="mi">3634139134986</span><span class="p">,</span><span class="mi">104</span><span class="p">.</span><span class="mi">554549945024</span> <span class="mi">30</span><span class="p">.</span><span class="mi">9869936005376</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>WMS服务器</h4>

<p>生成图片之后，我们还需要将这些图片切成瓦片，然后公开给外部以便使用。Mapnik提供了切图的功能，并且还提供一个实现了<a href="https://github.com/mapnik/OGCServer">WMS协议的服务器</a>，以便使用。</p>

<p>安装这个OGCServer服务器非常容易：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git@github.com:mapnik/OGCServer.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>OGCServer
</span><span class='line'><span class="nv">$ </span>sudo python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>但是OGCServer的启动，需要一个配置XML配置文件，这个配置文件可以由Mapnik提供的工具集生成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>svn co http://svn.openstreetmap.org/applications/rendering/mapnik/
</span></code></pre></td></tr></table></div></figure>


<p>这个svn仓库中包含了众多的小工具，generate_xml.py用于生成Mapnik的样式文件，generate_image.py用于生成图片，generate_tiles.py用于生成众多的瓦片。</p>

<p>此处我们将使用<code>generate_xml.py</code>来创建一个地图样式文件，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>svn.openstreetmap.org/applications/rendering/mapnik/
</span><span class='line'><span class="nv">$ </span>./generate_xml.py osm.xml chengdu.xml --dbname chengdu --user gis --accept-none
</span></code></pre></td></tr></table></div></figure>


<p>generate_xml.py根据osm.xml作为模板，生成<code>chengdu.xml</code>。这个文件即可用于测试OGCServer：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>OGCServer chengdu.xml
</span><span class='line'>Listening at 0.0.0.0:8000....
</span></code></pre></td></tr></table></div></figure>


<p>然后在浏览器中查看：</p>

<p><img src="http://abruzzi.github.com/images/2014/04/ogcserver-localhost-resized.png" alt="ogcserver" /></p>

<h4>使用OpenLayers测试</h4>

<p>有了一张图片，那么我们就需要有更多的图片组成的瓦片，这就需要使用引入GIS的前端利器OpenLayers了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">$(function</span><span class="o">(</span><span class="k">)</span> <span class="o">{</span>
</span><span class='line'>    var map, layer;
</span><span class='line'>    <span class="nv">map</span> <span class="o">=</span> new OpenLayers.Map<span class="o">(</span><span class="s1">&#39;map&#39;</span>, <span class="o">{})</span>;
</span><span class='line'>
</span><span class='line'>    <span class="nv">layer</span> <span class="o">=</span> new OpenLayers.Layer.WMS<span class="o">(</span><span class="s1">&#39;Tile Cache&#39;</span>,
</span><span class='line'>        <span class="s1">&#39;http://localhost:8000/?&#39;</span>, <span class="o">{</span>
</span><span class='line'>            layers: <span class="s1">&#39;__all__&#39;</span>,
</span><span class='line'>            format: <span class="s1">&#39;image/png&#39;</span>
</span><span class='line'>        <span class="o">})</span>;
</span><span class='line'>
</span><span class='line'>    map.addLayer<span class="o">(</span>layer<span class="o">)</span>;
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>!map.getCenter<span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        map.zoomToMaxExtent<span class="o">()</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-chengdu-resized.png" alt="openlayers" /></p>

<p><img src="http://abruzzi.github.com/images/2014/04/openlayers-chengdu-detail-resized.png" alt="openlayers" /></p>

<p>应该注意的是，此处在OpenLayers中使用了来自与OSM导入的数据，而并非Shapefile中的数据（Shapefile中仅有三个层次，point, line, polygon）。而OSM的数据则丰富的多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIS系统如何工作]]></title>
    <link href="http://abruzzi.github.com/2014/04/intro-map-gis/"/>
    <updated>2014-04-10T23:45:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/04/intro-map-gis</id>
    <content type="html"><![CDATA[<h4>GIS系统如何工作</h4>

<p>去年十二月中旬从RCA项目上下来之后，就一直在一个<a href="http://en.wikipedia.org/wiki/Geographic_information_system">GIS</a>项目上做咨询。在新的项目上，日常工作的重点主要是放在前端开发上（比如AngularJS，Grunt，Jamsine之类），对于业务（与GIS相关）方面，则完全没有涉及。</p>

<p>虽说之前也接触过<a href="http://icodeit.org/2013/03/guan-yu-hack-day/">一点GIS相关的开发</a>，比如Google Maps API，<a href="http://openlayers.org/">OpenLayers</a>之类，但是仅仅停留在使用别人的API搭建个小应用的层次。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/roads-resized.png" alt="image" /></p>

<p>直到最近，在GIS专家芦康平的指导下，才真正开始接触GIS，很快我就发现这是另一个十分好玩的新天地。简而言之，这个新的天地里，所有的东西都有一种似曾相识的感觉，但是又非常新鲜。比如地图服务器，渲染引擎，缓存，地理信息数据库等，都可以在其他的系统中找到对应。这种感觉好比收集硬币，或者收集邮票一样，当你看到新的有着不同花纹，大小，材质，年代的硬币时，那种既在意料之中又在意料之外的感觉简直太有意思了。</p>

<p>GIS系统，毋庸置疑可以帮助人们更加直观的分析数据，当数据与地理信息有所关联的时候，GIS系统会变得十分友好，也可以更充分的提供信息。</p>

<p>鉴于GIS对我来说是一个完全崭新的领域，那么学习之前，自然有很多的问题出现：</p>

<ol>
<li>地图的信息（建筑物，河流，街道）从何而来？</li>
<li>数据在服务器端以何种方式存储？</li>
<li>地图数据到底如何被渲染出来？</li>
<li>一个GIS系统的部署结构是什么样的？需要哪些组件？</li>
<li>业界的标准是什么，有哪些开源的项目和工具可供参考？</li>
</ol>


<p>等等。</p>

<h5>地图是如何被渲染的？</h5>

<p>通常来讲，我们看到的地图是由一个底图和若干个层的叠加来达到的最终结果。其中每个层次都会保存不同类型的地理信息，比如将所有的河流信息放在一个层，将建筑物放在另外一个层。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/elevation-map.jpg" alt="image" /></p>

<p>这些信息存储在数据文件中（<a href="http://en.wikipedia.org/wiki/Shapefiles">shapefiles</a>）或者数据库中，通过使用专门的工具来将这些地理信息转换成图片。由于每张图片都是透明的，这样叠加起来的最后效果就是如Google Maps之类应用的结果了。当然，叠加过程一般都发生在服务器端（有些简单应用则是在客户端完成某些层次的绘制，比如我之前发过的<a href="http://icodeit.org/placesihavebeen">我去过的地方</a>，这些热力图就是在客户端通过JavaScript加上去的。）。</p>

<p>地图在服务器端被渲染出来之后，尺寸一般会非常大。需要有工具将这些大图切分成很多组的小图，这些小图被称之为瓦片（tile）。为了给不同缩放级别的客户端提供不同的图片，这些瓦片被精心的分成了多个组，每个组都有编号。如果地图支持18级的缩放，就会现有18个分组。当然分组好越靠后，分组中的瓦片越多。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/tiles-resized.png" alt="image" /></p>

<p>比如当客户端请求缩放级别为10的地图时，客户端（比如OpenLayers）会根据经纬度计算好图片的边界，然后请求第10级的一些瓦片，并将这些瓦片排列在画布上。一般而言，这些瓦片都是正方形（256x256或者512x512）。</p>

<h5>WMS服务</h5>

<p><a href="http://en.wikipedia.org/wiki/Web_Map_Service">WMS(Web Map Service)</a>是一个基于HTTP的简单协议，客户端发送的请求中包含请求类型，地图的层次，边界等信息，服务器根据这个信息生成图片，并返回该图片：</p>

<p><img src="http://abruzzi.github.com/images/2014/04/wms-request.png" alt="image" /></p>

<p>当然，WMS本身支持多种请求，最常见的就是<code>GetMap</code>，细节可以参考OGC规范及具体服务器的实现。而对于后端的服务器来说，从请求中获取这些信息之后，会首先从数据库/数据文件中得到数据，并使用渲染引擎绘制图片，并最后将图片返回客户端。</p>

<h5>图片类型</h5>

<p>图片分为栅格类型和矢量类型两种。栅格图片一般的原始来源是航拍，遥感等，本质上来说是照片，照片必然会有大小，如果放大到某一个范围之外，就会模糊。而矢量图是数学上的抽象，比如在某个坐标系统中，在某处有一个点A，另一处有一个点B，两点之间有一条线连接。矢量图的特点是与缩放程度无关。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/bangor_oli_2014040_red_swir_tir_720.jpg" alt="栅格图" /></p>

<p>栅格图的特点是真实，矢量图的特点是抽象（存储方便，占用空间更少，也更容易修改）。但是为了绘制正确，完整的地图，两种类型的图片信息都是必要的：</p>

<p><img src="http://abruzzi.github.com/images/2014/04/polygon-resized.png" alt="矢量图" /></p>

<h5>常用文件格式</h5>

<p>Shapefiles是Esri公司开发出来的用于存储地理信息的文件格式。说是文件，其实是一个文件族，Shapefile包含了数种文件，其中有三种必须的(.shp，.shx，.dbf)。其他有一些可选的(.prj，.sbn/.sbx等等)。</p>

<p>OSM格式是由OpenStreetMap采用的文件格式，其实是一个XML。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;osm</span> <span class="na">version=</span><span class="s">&quot;0.6&quot;</span> <span class="na">generator=</span><span class="s">&quot;Osmosis 0.43.1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;bounds</span> <span class="na">minlon=</span><span class="s">&quot;144.26600&quot;</span> <span class="na">minlat=</span><span class="s">&quot;-38.55200&quot;</span> <span class="na">maxlon=</span><span class="s">&quot;145.81000&quot;</span> <span class="na">maxlat=</span><span class="s">&quot;-37.36500&quot;</span> <span class="na">origin=</span><span class="s">&quot;http://www.openstreetmap.org/api/0.6&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;node</span> <span class="na">id=</span><span class="s">&quot;579259&quot;</span> <span class="na">version=</span><span class="s">&quot;3&quot;</span> <span class="na">timestamp=</span><span class="s">&quot;2008-12-17T02:28:22Z&quot;</span> <span class="na">uid=</span><span class="s">&quot;57437&quot;</span> <span class="na">user=</span><span class="s">&quot;Canley&quot;</span> <span class="na">changeset=</span><span class="s">&quot;431325&quot;</span> <span class="na">lat=</span><span class="s">&quot;-37.9309048&quot;</span> <span class="na">lon=</span><span class="s">&quot;145.1282066&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;node</span> <span class="na">id=</span><span class="s">&quot;579260&quot;</span> <span class="na">version=</span><span class="s">&quot;5&quot;</span> <span class="na">timestamp=</span><span class="s">&quot;2009-12-03T21:42:45Z&quot;</span> <span class="na">uid=</span><span class="s">&quot;1679&quot;</span> <span class="na">user=</span><span class="s">&quot;andrewpmk&quot;</span> <span class="na">changeset=</span><span class="s">&quot;3284133&quot;</span> <span class="na">lat=</span><span class="s">&quot;-37.9388304&quot;</span> <span class="na">lon=</span><span class="s">&quot;145.1266866&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;node</span> <span class="na">id=</span><span class="s">&quot;579261&quot;</span> <span class="na">version=</span><span class="s">&quot;4&quot;</span> <span class="na">timestamp=</span><span class="s">&quot;2013-02-15T20:00:37Z&quot;</span> <span class="na">uid=</span><span class="s">&quot;79475&quot;</span> <span class="na">user=</span><span class="s">&quot;AlexOnTheBus&quot;</span> <span class="na">changeset=</span><span class="s">&quot;15043978&quot;</span> <span class="na">lat=</span><span class="s">&quot;-37.9404366&quot;</span> <span class="na">lon=</span><span class="s">&quot;145.1395848&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;node</span> <span class="na">id=</span><span class="s">&quot;579262&quot;</span> <span class="na">version=</span><span class="s">&quot;18&quot;</span> <span class="na">timestamp=</span><span class="s">&quot;2013-01-31T21:37:02Z&quot;</span> <span class="na">uid=</span><span class="s">&quot;79475&quot;</span> <span class="na">user=</span><span class="s">&quot;AlexOnTheBus&quot;</span> <span class="na">changeset=</span><span class="s">&quot;14864580&quot;</span> <span class="na">lat=</span><span class="s">&quot;-37.9295116&quot;</span> <span class="na">lon=</span><span class="s">&quot;145.1266366&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tag</span> <span class="na">k=</span><span class="s">&quot;highway&quot;</span> <span class="na">v=</span><span class="s">&quot;traffic_signals&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/node&gt;</span>
</span><span class='line'>  <span class="nt">&lt;node</span> <span class="na">id=</span><span class="s">&quot;579265&quot;</span> <span class="na">version=</span><span class="s">&quot;2&quot;</span> <span class="na">timestamp=</span><span class="s">&quot;2010-06-24T12:05:34Z&quot;</span> <span class="na">uid=</span><span class="s">&quot;57437&quot;</span> <span class="na">user=</span><span class="s">&quot;Canley&quot;</span> <span class="na">changeset=</span><span class="s">&quot;5065613&quot;</span> <span class="na">lat=</span><span class="s">&quot;-37.9369707&quot;</span> <span class="na">lon=</span><span class="s">&quot;145.140732&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/osm&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>技术栈</h4>

<p>和传统的三层架构一样，一个典型的GIS系统也是由三部分组成：客户端，服务器，存储。在实际的场景中，可能又会引入缓存服务器，负载均衡服务器等。</p>

<p><img src="http://abruzzi.github.com/images/2014/04/gis-stack-resized.png" alt="image" /></p>

<ol>
<li><a href="http://openlayers.org/">OpenLayers</a> / Leaflet</li>
<li><a href="http://mapnik.org/">Mapnik</a> / Mapnik::OGCServer</li>
<li><a href="http://www.postgresql.org/">Postgres</a> + <a href="http://postgis.net/">PostGIS</a> / OSM Data / Shapefiles</li>
</ol>


<p><a href="http://openlayers.org/">OpenLayers</a>是一个前端的JavaScript库，几乎可以算是前端的必选了，它提供众多的特性：与任意的后端地图服务集成（Google Maps，Bing Maps，OSM等等），对向量层的支持使得其非常方便的展示用户自定义的元素（多边形，点，InfoWindow等）。OpenLayers的API也非常清晰易用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="s1">&#39;map&#39;</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">layer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenLayers</span><span class="p">.</span><span class="nx">Layer</span><span class="p">.</span><span class="nx">WMS</span><span class="p">(</span><span class="s1">&#39;Tile Cache&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;tilecache?&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">layers</span><span class="o">:</span> <span class="s1">&#39;basic&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">format</span><span class="o">:</span> <span class="s1">&#39;image/png&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">addLayer</span><span class="p">(</span><span class="nx">layer</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>创建Map对象</li>
<li>创建Layer对象</li>
<li>将Layer添加到Map上</li>
</ol>


<p>即可完成基本的设置，并将地图展现在页面上。</p>

<p><a href="http://www.openstreetmap.org/">OSM</a>是Open Street Map的缩写，它本身是一个开源项目，全世界各地的贡献者可以很方便的编辑地图信息，并与其他人分享，整个运作方式非常像Wikipedia，任何人都可以对地图进行编辑。基于这个原因，OSM数据文件是基于XML的。</p>

<p>有很多组织都将OSM的数据下载下来，搭建自己的地图服务器，然后向外部提供<a href="http://en.wikipedia.org/wiki/Web_Map_Service">WMS(Web Map Service)</a>服务。</p>

<p>Mapnik是一个渲染引擎，它可以将地理数据渲染成图片。Mapnik支持来自多种数据源的数据，比如Shapefile，PostGIS中的数据等。而对于OSM数据（一种XML文件），可以使用<a href="https://github.com/openstreetmap/osm2pgsql">osm2postgis</a>工具将其导入到PostGIS数据库，然后使用。</p>

<p>Mapnik本身只是一个C++编写的渲染引擎，并提供很多编程语言的bind，最常用的时python版本的bind，接口非常清晰明了。使用Mapnik可以很容易的定制对地图层次的样式，比如地图中所有土地的颜色，河流的颜色，道路的颜色，标签的字体，属性等等都可以很方便的定制。</p>

<p>实际使用Mapnik+OpenLayers搭建自己的服务器将在下一篇文章中详细描述。</p>

<h5>一些数据源</h5>

<ol>
<li><a href="http://www.naturalearthdata.com/">Natural Earth</a></li>
<li><a href="http://download.geofabrik.de/osm/">GEO Fabrik</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
