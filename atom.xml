<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I code it]]></title>
  <link href="http://abruzzi.github.com/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2013-05-19T09:15:10+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Alfred简介及Alfred扩展编写]]></title>
    <link href="http://abruzzi.github.com/2013/05/create-a-alfred-extension-for-create-sinatra-project/"/>
    <updated>2013-05-18T20:04:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/05/create-a-alfred-extension-for-create-sinatra-project</id>
    <content type="html"><![CDATA[<h3>Alfred简介</h3>

<p><a href="http://www.alfredapp.com/">Alfred</a>是Mac下的一个小工具，可以极大的提高使用计算机的效率。Alfred提供非常丰富的功能集，比如：</p>

<ol>
<li>基本的文件/目录查找功能</li>
<li>应用程序加载器</li>
<li>快速的搜索（google，wikipedia）</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2013/05/alfred-find.png" alt="使用Alfred搜索" /></p>

<h4>powerpack</h4>

<p>Alfred本身是免费的，但是一些高级的功能，如：</p>

<ol>
<li>自定义扩展（<strong>非常有用</strong>）</li>
<li>剪贴板栈/代码片段管理（<strong>非常有用</strong>）</li>
<li>iTunes控制</li>
<li>近期访过的文档</li>
</ol>


<p>提供在<a href="http://www.alfredapp.com/powerpack/">powerpack</a>中，这个功能是要收费的，不过个人觉得绝对的物超所值。这些功能可以极大的提高我对计算机的使用效率，而且剪贴板栈功能可以节省我很多的时间。</p>

<p><img src="http://abruzzi.github.com/images/2013/05/alfred-clipboard.png" alt="image" /></p>

<h3>扩展编写</h3>

<p>经常会使用<a href="http://www.sinatrarb.com/">sinatra</a>编写一些简单的Web应用程序，以用作一些showcase和应用程序的原型搭建。但是由于sinatra并不是一个框架，并不会像rails那样自动生成目录结构等，而每个sinatra应用的目录结构和文件依赖都非常相似，因此完全可以考虑将这个过程自动化。</p>

<p>基本思路是：</p>

<ol>
<li>定义一个目录结构的模板</li>
<li>每次开始一个sinatra工程时，将个模板目录拷贝到新的工程下</li>
<li>一些库依赖的下载（bundle install以及JavaScript库的下载）</li>
<li>在编辑器中打开这个新的目录</li>
</ol>


<h4>一个sinatra工程的原型</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pwd
</span><span class='line'>/Users/twer/develop/templates/sinatra
</span><span class='line'>
</span><span class='line'>$ tree -a
</span><span class='line'>.
</span><span class='line'>├── .rvmrc
</span><span class='line'>├── Gemfile
</span><span class='line'>├── app.rb
</span><span class='line'>├── config.ru
</span><span class='line'>├── public
</span><span class='line'>│   ├── css
</span><span class='line'>│   └── scripts
</span><span class='line'>│       ├── app.js
</span><span class='line'>│       └── libs
</span><span class='line'>└── views</span></code></pre></td></tr></table></div></figure>


<h4>Extension shell script</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># create the project folder
</span><span class='line'>cd ~/develop/ruby && mkdir -p {query} && cd {query}
</span><span class='line'>
</span><span class='line'># cp info to folder
</span><span class='line'>cp -R ~/develop/templates/sinatra/ .
</span><span class='line'>
</span><span class='line'># grab jquery
</span><span class='line'>curl http://code.jquery.com/jquery.js &gt; public/scripts/libs/jquery.js
</span><span class='line'>
</span><span class='line'># open the project
</span><span class='line'>/Applications/MacVim.app/Contents/MacOS/Vim -g .</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2013/05/sinatra-ext-result.png" alt="image" /></p>

<p>执行完之后，<code>~/develop/ruby</code>下会生成一个新的目录，即<code>note</code>，这个目录中即为一个可以直接开始开发sinatra应用的工作目录了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在既有数据库中使用ActiveRecord]]></title>
    <link href="http://abruzzi.github.com/2013/05/using-active-record-as-a-standalone-orm/"/>
    <updated>2013-05-18T14:56:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/05/using-active-record-as-a-standalone-orm</id>
    <content type="html"><![CDATA[<h3>ActiveRecord</h3>

<p>作为rails中的ORM(object relation-db mapping)框架，ActiveRecord在初次出现之时带给了人们以无限的惊喜和热情，也使得很多不堪忍受其他语言中粗糙的ORM框架的开发者转而投入rials的怀抱。而有很多的其他语言也在不断尝试模仿ActiveRecord，比如著名的php框架<a href="http://codeigniter.org.cn/">codeigniter</a>。</p>

<p>在rails的后期版本中，ActiveRecord可以作为一个独立的库来在rails之外使用，这对使用ruby进行其他数据库应用开发的用户来说非常方便。</p>

<h4>在新的项目中使用ActiveRecord</h4>

<p>如果在一个全新的rails应用程序中使用ActiveRecord，那么关于数据库方面的一切都可以托管给它，开发者在初期可能连一行代码都不需要编写就可以让程序“像模像样”的运行起来。</p>

<h4>在已有的数据库上使用ActiveRecord</h4>

<p>现实世界中，最可能遇到的问题是数据库已经存在了（毕竟，对于关系型数据库而言，修改schema的影响太大）。这时候，我们仍然可以使用ActiveRecord来方便的访问数据库，得到ruby对象，而跳过冗长且容易出错的数据库访问层。</p>

<h3>一个例子</h3>

<h4>数据库结构</h4>

<p>数据库中有一个访客表(visitor)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+-----------------------+--------------+-----+
</span><span class='line'>| Field                 | Type         | Key |
</span><span class='line'>+-----------------------+--------------+-----+
</span><span class='line'>| visitor_uid           | varchar(32)  | PRI |
</span><span class='line'>| visitor_login_id      | varchar(128) | MUL |
</span><span class='line'>| visitor_password      | varchar(32)  |     |
</span><span class='line'>| visitor_name          | varchar(100) |     |
</span><span class='line'>| created_timestamp     | timestamp    |     |
</span><span class='line'>| password_expiration   | timestamp    |     |
</span><span class='line'>| last_used_timestamp   | timestamp    | MUL |
</span><span class='line'>| visitor_alias         | varchar(128) | MUL |
</span><span class='line'>| visitor_password_hash | binary(64)   |     |
</span><span class='line'>+-----------------------+--------------+-----+</span></code></pre></td></tr></table></div></figure>


<p>有一个访客浏览过的<code>分组</code>表(list_group)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+------------------+---------------------+-----+
</span><span class='line'>| Field            | Type                | Key |
</span><span class='line'>+------------------+---------------------+-----+
</span><span class='line'>| list_group_id    | bigint(20) unsigned | PRI |
</span><span class='line'>| list_type        | varchar(32)         | MUL |
</span><span class='line'>| visitor_uid      | varchar(32)         | MUL |
</span><span class='line'>| list_name        | varchar(128)        |     |
</span><span class='line'>| create_timestamp | timestamp           |     |
</span><span class='line'>+------------------+---------------------+-----+</span></code></pre></td></tr></table></div></figure>


<p>每个<code>分组</code>中，都有一些条目，具体到每个条目(list_group_item)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+---------------------+-----+
</span><span class='line'>| Field                | Type                | Key |
</span><span class='line'>+----------------------+---------------------+-----+
</span><span class='line'>| list_group_item_id   | bigint(20) unsigned | PRI |
</span><span class='line'>| list_group_id        | bigint(20) unsigned | MUL |
</span><span class='line'>| item_id              | varchar(128)        | MUL |
</span><span class='line'>| create_timestamp     | timestamp           |     |
</span><span class='line'>| last_use_timestamp   | timestamp           |     |
</span><span class='line'>| note                 | varchar(4000)       |     |
</span><span class='line'>+----------------------+---------------------+-----+</span></code></pre></td></tr></table></div></figure>


<p>三张表的关系如下：</p>

<p><img src="http://abruzzi.github.com/images/2013/05/active_record.png" alt="image" /></p>

<h4>示例程序的目录结构</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── Gemfile
</span><span class='line'>├── Gemfile.lock
</span><span class='line'>├── app.rb
</span><span class='line'>├── config
</span><span class='line'>│   └── database.yml
</span><span class='line'>├── debug.log
</span><span class='line'>└── model
</span><span class='line'>    ├── list_group.rb
</span><span class='line'>    ├── list_group_item.rb
</span><span class='line'>    └── visitor.rb</span></code></pre></td></tr></table></div></figure>


<h4>models</h4>

<p>使用ActiveRecord，只需要简单的在模块上声明模块见的关系即可：</p>

<p>visitor类的定义，读起来非常自然：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'active_record'
</span><span class='line'>
</span><span class='line'>class Visitor &lt; ActiveRecord::Base
</span><span class='line'>    has_many :groups, 
</span><span class='line'>        :class_name =&gt; 'ListGroup', 
</span><span class='line'>        :foreign_key =&gt; 'visitor_uid'
</span><span class='line'>
</span><span class='line'>    self.table_name  = 'visitor'
</span><span class='line'>    self.primary_key = 'visitor_uid'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>ListGroup类的定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ListGroup &lt; ActiveRecord::Base
</span><span class='line'>    self.table_name  = 'list_group'
</span><span class='line'>    self.primary_key  = 'list_group_id'
</span><span class='line'>
</span><span class='line'>    has_many :items, 
</span><span class='line'>        :class_name =&gt; 'ListGroupItem', 
</span><span class='line'>        :foreign_key =&gt; 'list_group_id'
</span><span class='line'>
</span><span class='line'>    belongs_to :visitor, 
</span><span class='line'>        :class_name =&gt; 'Visitor', 
</span><span class='line'>        :foreign_key =&gt; 'visitor_uid'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>最后是ListGroupItem的定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ListGroupItem &lt; ActiveRecord::Base
</span><span class='line'>    self.table_name = 'list_group_item'
</span><span class='line'>    self.primary_key = 'list_group_item_id'
</span><span class='line'>
</span><span class='line'>    belongs_to :list_group, 
</span><span class='line'>        :class_name =&gt; 'ListGroup', :foreign_key =&gt; 'list_group_id'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>这种比较复杂的层级关系在现实中经常见到，而大部分HelloWorld型的介绍又touch不到，因此就将代码全部列于此处，以便索引。</p>

<h4>使用这些model</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def main
</span><span class='line'>    attr = visitor_attr('juntao.qiu#thoughtworks.com')
</span><span class='line'>    visitor = Visitor.new attr
</span><span class='line'>    visitor.visitor_uid = attr[:visitor_uid]
</span><span class='line'>    visitor.save
</span><span class='line'>
</span><span class='line'>    visitors = Visitor.find(:all)
</span><span class='line'>    visitors.each do |visitor|
</span><span class='line'>        p visitor[:visitor_login_id]
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>这里即可任意的使用诸如new/save,find等ActiveRecord为我们包装起来的方法了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS中的before和after伪元素及其应用]]></title>
    <link href="http://abruzzi.github.com/2013/05/before-and-after-selector-in-css/"/>
    <updated>2013-05-16T15:29:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/05/before-and-after-selector-in-css</id>
    <content type="html"><![CDATA[<h3>before和after伪元素</h3>

<p>所谓伪元素，可以理解为浏览器为某元素附加的元素（根据名字，附加在这个元素之前/之后）。用来完成特定的效果，before/after需要和content属性一起使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.css-class:before {
</span><span class='line'>  content: " ";
</span><span class='line'>}
</span><span class='line'>.css-class:after {
</span><span class='line'>  content: " ";
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>通过使用before/after伪元素，可以做一些很有意思的效果。<a href="http://css-tricks.com/pseudo-element-roundup/">这里</a>有一些有意思的示例。</p>

<h3>四个三角形</h3>

<p>页面上经常会遇到小三角形这种视觉元素，比如表示一个可以<strong>打开/关闭</strong>的开关（将不会频繁使用的元素隐藏起来，点击可以展开/收起），或者一个模拟消息盒子（纯CSS实现），最早的做法是使用一个小的图片来完成，但是这个事实上可以通过纯CSS来实现。</p>

<p>原理是利用block元素的<code>border</code>属性，当<code>border</code>的值很小的时候，<code>border</code>之间的连接处并无异常，但是当<code>border</code>较大，而元素本身的尺寸小于<code>border</code>自身时，则每一个<code>border</code>都会呈现为梯形，而当元素的<code>width</code>和<code>height</code>都为0时，就会看到一个正方形，而每个边都变成了一个三角形：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.container .color-box {
</span><span class='line'>  content: " ";
</span><span class='line'>  width: 0;
</span><span class='line'>  height: 0;
</span><span class='line'>  border: 10px solid transparent;
</span><span class='line'>  border-left-color: #00ff00;
</span><span class='line'>  border-right-color: #000000;
</span><span class='line'>  border-top-color: #ff0000;
</span><span class='line'>  border-bottom-color: #0000ff;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2013/05/color-box.png" alt="image" /></p>

<h3>小三角形</h3>

<p>这时候，如果将其他的三条边隐藏起来（通过将<code>border</code>的颜色置为透明）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.container .color-box {
</span><span class='line'>  content: " ";
</span><span class='line'>  width: 0;
</span><span class='line'>  height: 0;
</span><span class='line'>  border: 10px solid transparent;//朝下的三角形
</span><span class='line'>  border-top-color: #ff0000;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2013/05/triggle.png" alt="image" /></p>

<p>先将所有的边都设置为透明色，然后根据需要显示某一个边，来完成三角形的指向。</p>

<h3>一个普通的消息框</h3>

<p>一个普通的消息框，通过设置<code>box-shadow</code>和<code>border-radius</code>之后，可以变得比较“好看”，但是如果可以给这个消息框加上一个小的三角形（可以指向用户的头像等）。</p>

<p>HTML代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;div class="container"&gt;
</span><span class='line'>      &lt;div class="chat-box"&gt;
</span><span class='line'>          &lt;p&gt;
</span><span class='line'>              Resque (pronounced like "rescue") is a Redis-backed library for creating background jobs, placing those jobs on multiple queues, and processing them later.
</span><span class='line'>          &lt;/p&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>  &lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>样式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.container .chat-box {
</span><span class='line'>  position: relative;
</span><span class='line'>  border: 1px solid #6b6b6b;
</span><span class='line'>  border-radius: 5px;
</span><span class='line'>  box-shadow: 1px 1px 4px #6b6b6b;
</span><span class='line'>  width: 300px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.container .chat-box p {
</span><span class='line'>  margin: 0;
</span><span class='line'>  padding: 10px;
</span><span class='line'>  font-size: 18px;
</span><span class='line'>  font-family: "Microsoft Yahei";
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2013/05/box.png" alt="image" /></p>

<h3>更fancy的消息框</h3>

<p>先通过before伪元素，在消息框的底部加上一个小的三角形：</p>

<p><img src="http://abruzzi.github.com/images/2013/05/box-triggle-gray.png" alt="image" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.container .chat-box:after, 
</span><span class='line'>.container .chat-box:before {
</span><span class='line'>  position: absolute;
</span><span class='line'>  content: " ";
</span><span class='line'>  width: 0;
</span><span class='line'>  height: 0;
</span><span class='line'>  border: solid transparent;
</span><span class='line'>  top: 100%;
</span><span class='line'>  left: 62%;
</span><span class='line'>} 
</span><span class='line'>
</span><span class='line'>.container .chat-box:before {
</span><span class='line'>  border-width: 10px;
</span><span class='line'>  border-top-color: #6b6b6b;
</span><span class='line'>  margin-left: -10px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>但是一个实心的灰色三角形比较难看，我们需要再改进一下，即通过在这个伪元素之上，再绘制一个白色（与消息框颜色相同）的伪元素，但是尺寸又小一个单位（单位与消息框本身的尺寸相同，这里为<code>1px</code>）。</p>

<p><img src="http://abruzzi.github.com/images/2013/05/box-triggle-both.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript核心概念及实践勘误表]]></title>
    <link href="http://abruzzi.github.com/2013/05/javascripthe-xin-gai-nian-ji-shi-jian-kan-wu-biao/"/>
    <updated>2013-05-16T11:29:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/05/javascripthe-xin-gai-nian-ji-shi-jian-kan-wu-biao</id>
    <content type="html"><![CDATA[<h3>《JavaScript核心概念及实践》勘误表</h3>

<p><a href="http://icodeit.org/jsccp/">JavaScript核心概念及实践</a>一书已经于2013年5月出版，由于时间原因以及作者的疏于检查，导致书中出现了一些错别字词等错误，现在将错误及更正列于此页，作者为对读者朋友带来的不便表示深深的歉意。</p>

<hr />

<p>第一章第12页</p>

<p>“则向控制台打印：goodbay” 应为 “则向控制台打印：<strong>goodbye</strong>”</p>

<hr />

<p>第二章第19页</p>

<p>“var y = x + &#8220;2&#8221;;// => 32” 注释中的数字32应为字符串类型 “var y = x + &#8220;2&#8221;;// => <strong>&#8220;32&#8221;</strong>”</p>

<hr />

<p>第三章第36页</p>

<p>“对函数customize(options)的调用 constomize” 应为 “<strong>customize</strong>”。</p>

<p>同一页，3.4小节
“反回给前端的仍然是 JSON 对象” 应为 “<strong>返回</strong>给前端的仍然是 JSON 对象”</p>

<hr />

<p><a href="http://book.douban.com/review/5960403/">这里有</a>一个非常仔细，质量很高的勘误表，由网友 @RednaxelaFX 整理。</p>

<hr />

<p>这个页面将维持更新，如果有新的错误被发现，我会第一时间更新书籍的电子版本，并在此页面上更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[proc in ruby]]></title>
    <link href="http://abruzzi.github.com/2013/05/proc-in-ruby/"/>
    <updated>2013-05-12T16:01:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/05/proc-in-ruby</id>
    <content type="html"><![CDATA[<h2>block in ruby</h2>

<p>block在ruby中，相当于JavaScript中的匿名函数，可以用来实现诸如高阶函数等。高阶函数最好用的一个特点就是它很好的将“动作”（action）本身抽象成了一个对象来传递。</p>

<p>block本身不是对象，但是可以被转换成Proc类的实例，然后以一种特别的方式执行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &gt; proc = lambda {puts "hello, world"}
</span><span class='line'> =&gt; #&lt;Proc:0x007ff11284d068@(irb):8 (lambda)&gt; </span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; proc = lambda do
</span><span class='line'>&gt;  puts "hello, world"
</span><span class='line'>&gt; end</span></code></pre></td></tr></table></div></figure>


<p>从irb打印的信息可以看出，<code>&lt;Proc:0x007ff11284d068@(irb):8 (lambda)&gt;</code>是一个Proc类的实例用lambda生成的block对象，看起来像一个ruby中定义的函数/方法一样，但是执行的时候需要特别的调用方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; proc.call
</span><span class='line'>hello, world
</span><span class='line'> =&gt; nil</span></code></pre></td></tr></table></div></figure>


<p>如果需要参数，可以这样指定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; proc = lambda {|a, b| a + b}
</span><span class='line'> =&gt; #&lt;Proc:0x007ff114843d40@(irb):14 (lambda)&gt; 
</span><span class='line'>&gt; proc.call(1,2)
</span><span class='line'> =&gt; 3 
</span><span class='line'>&gt; proc.call("hello, ","world")
</span><span class='line'> =&gt; "hello, world" </span></code></pre></td></tr></table></div></figure>


<h2>proc自身</h2>

<p>ruby中大名鼎鼎的rack应用程序，本质上就只是负责调用一个block来获得结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rack_proc = lambda {|env| [200, {}, ["&lt;h1&gt;Hello, world&lt;/h1&gt;"]]}
</span><span class='line'>rack_proc.call({})</span></code></pre></td></tr></table></div></figure>


<p>也可以使用proc来创建一个Proc：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; x = proc {puts "hello, world"}
</span><span class='line'> =&gt; #&lt;Proc:0x007ff114851698@(irb):18&gt; 
</span><span class='line'>&gt; x.call
</span><span class='line'>hello, world
</span><span class='line'> =&gt; nil </span></code></pre></td></tr></table></div></figure>


<p>也可以将proc实例返回出来，然后提供给其他函数使用，需要注意的是那个call方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def adder(number)
</span><span class='line'>  proc {|x| x + number}
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>add15 = adder(15)
</span><span class='line'>add15.call(10) == 25
</span><span class='line'>
</span><span class='line'>add10 = adder(10)
</span><span class='line'>add10.call(10) == 20</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重阳宫奇遇记]]></title>
    <link href="http://abruzzi.github.com/2013/04/chongyang-palase/"/>
    <updated>2013-04-28T10:32:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/04/chongyang-palase</id>
    <content type="html"><![CDATA[<h3>重阳宫简介</h3>

<p>重阳宫为道教三大祖庭之一，位于陕西户县祖庵镇，是全真祖师王重阳修道之地。重阳宫本由王重阳的弟子（全真七子，详见《射雕英雄传》）修建，始于金代，名为“灵虚观”，元初改名“重阳宫”。后山碑林存有众多用以记录全真教祖师及全真七子生平事迹的石碑，如《全真教祖碑》，《重阳祖师仙迹碑》，也有全真教其他掌教如孙德彧等的撰文碑。除了金元的碑以外，宫中还有明清时代的刻字，如《重阳子王真人全真教祖碑》碑阴的“天下祖庭”四字，为明朝正统二年所刻。</p>

<p><img src="http://abruzzi.github.com/images/2013/04/chongyang-01.resized.jpg" alt="全真祖庭" /></p>

<p>历史上由于年久失修，众多石碑层长散弃于露天，六、七十年代之后重修重阳宫，这些石碑被存入展厅，展厅有题名“重阳圣地”，其中大约有三十多通巨型金元石碑。</p>

<p><img src="http://abruzzi.github.com/images/2013/04/outside.resized.jpg" alt="年久失修" /></p>

<h3>甘河镇遇仙</h3>

<p>四月末的长安，已经很热。由于我去的这天是周末，而且是给五一调休的周末，因此宫中游人很少。除了我之外还有几个附近学校的学生，虽然殿外天气非常好，水绿山青，鸟语花香，但是在殿内，古朴的石碑传出的若隐若无的古老的气息，众多的由赑屃驮着的近一丈的大石碑使得展厅的气氛稍显压抑，所以很快整个展厅就剩下我一个人了。</p>

<p><img src="http://abruzzi.github.com/images/2013/04/bixis.resized.jpg" alt="碑林展厅" /></p>

<p>虽然殿外阳光明媚，但是触摸着这些实实在在的文物，让人彷佛有些穿越千年，回到宋末元初的感觉，这种感觉让人有种莫名的阴森。而碑文中不时闪现的诸如王重阳，丘处机，尹志平等人的名字更是和金庸笔下的众多人物相交错，穿越的感觉愈发强烈。</p>

<p>我信步走到一通石碑前，顺口默诵，看着王重阳在<strong>甘河镇遇仙</strong>一段，还在心中暗笑其故意装神弄鬼，但是当我转身到碑阴面，读到“天之道，损有余而补不足，是故虚胜实，不足胜有余”之时，不由得心头大震，接着向下看到“心死则神活，阳盛而阴消”之时，更是惊骇莫名。这通碑上分明记着宋末元初的武学秘籍《九阴真经》（详见《射雕英雄传》）。</p>

<p>我正待取出纸笔将这些内容抄录，忽觉殿内似乎多出一人来，我心头一震，以我的功力，竟然有人走到我身周三丈之内而不自知。我转过头去，只见一个道士站在重阳祖师画像碑旁，呆呆的出神。只听那老道口中喃喃有声：此碑为四绝碑之首，无梦令碑有不及也。</p>

<p><img src="http://abruzzi.github.com/images/2013/04/wumengling.resized.jpg" alt="无梦令碑" /></p>

<p>我连忙走上前去，问道：“上仙，这厢有礼，刚才听到上仙谈及四绝碑，敢问何为四绝碑？”，道士略微沉吟，说道：“所谓四绝，乃重阳祖师画像碑，祖师亲笔《无梦令》碑，以及赵孟頫大小照碑，是也”。说罢，袖手而去，我略一迟疑，道士已仙踪不见。</p>

<p>我又走回遇仙碑后，将《九阴真经》默默铭记，出殿时已经是一个时辰之后了，刚到殿门口，忽见之前遇见的那位道士正在门口徘徊，似乎在找什么东西。我恭敬的询问，道士一脸疑惑，操着一口地道的关中腔说道：“我的手机咋莫见啦？我记得我拿出来了么，可放到办公室里了？”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图书封面故事]]></title>
    <link href="http://abruzzi.github.com/2013/04/book-cover-story/"/>
    <updated>2013-04-13T15:57:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/04/book-cover-story</id>
    <content type="html"><![CDATA[<h2>虎符</h2>

<p>虎符本是春秋战国时期，用以中央政权和地方军事力量之间的一种凭证，信物。一般分剖为两半，一半留在京师（右半边，古代以右为尊），另一半留在军队驻地。对方上要有军事行动，必须向中央申请，中央同意后，会派遣专人前往，为了防止有人冒充中央，假传圣旨，需要有一种凭证。</p>

<p>当然，仅仅虎符本身并不足以调动军队，同虎符一起的，还要有诏书，及中央排除的特使。虎符作为凭证，而诏书中有详细的其他信息，比如官员的任命，军队部署之类。</p>

<h3>杜虎符</h3>

<p>杜虎符为1973年在西安南郊出土的，年代大约为战国时期，但是应在秦朝统一六国之前。</p>

<p><img src="http://abruzzi.github.com/images/2013/04/jscp-conver.jpg" alt="image" /></p>

<p>铭文为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>兵甲之符，右在君，左在杜，凡兴兵披甲，用五十人以上，必会君符，乃敢行之。燔燧之事，虽毋会符，行。</span></code></pre></td></tr></table></div></figure>


<p>虎符本身为铜铸，铭文的制作非常特殊：先刻以阴文，然后将金丝嵌入文字，再打磨光滑，因此虽历时久远，但是仍金光熠熠。</p>

<h3>阳陵虎符</h3>

<p>阳陵虎符相传在山东临城出土，由于铭文中有“皇帝”字样，时代当为秦统一六国之后。</p>

<p><img src="http://abruzzi.github.com/images/2013/04/yangling-tiger-seal.resized.jpg" alt="image" /></p>

<p>铭文为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>甲兵之符，右在皇帝，左在阳陵</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turning to a designer]]></title>
    <link href="http://abruzzi.github.com/2013/03/turning-to-a-designer/"/>
    <updated>2013-03-26T22:46:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/03/turning-to-a-designer</id>
    <content type="html"><![CDATA[<h4>Hack design的建议</h4>

<p>首先，design无处不在，它的目的是提高产品使用者的效率和易用性的。它不是一个“运用之妙，存乎一心”的东西，它是一个实实在在可以通过学习来获得的能力（正如编程或者写作或者厨艺一样，当然，如果一个人把精力和心血放在编程上，同样可以将编程做成一个“运用之妙，存乎一心”的东西。）</p>

<p>什么是一个好的设计？下面是设计师Dieter Rams给出的10条原则：</p>

<ol>
<li>创新性</li>
<li>使产品有用</li>
<li>美学</li>
<li>使产品可以被理解</li>
<li>不那么引人注目</li>
<li>诚实的设计</li>
<li>可持久的</li>
<li>彻底，纯粹</li>
<li>尽量做小的设计</li>
<li>环境友好</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2013/03/design-10-commandments.resized.png" alt="image" /></p>

<p>这里有<a href="http://startupsthisishowdesignworks.com/">原文的链接</a>，总而言之，设计不仅仅是一个web页面，一个海报，所有的产品都会有不同程度的设计包含在其中。</p>

<h4>Alex的建议</h4>

<p>想想你觉得“好看”的页面为什么好看，是字体，配色，背景色，布局还是其他？把这些记录下来，并在自己后续的设计中尝试使用。</p>

<p>多看一些优秀的设计，比如web页面，如果你发现上边有一些很感兴趣的特性，或者细节，比如这个菜单看着很漂亮，后者标签功能很炫，你可以用chrome的inspect来查看别人使用了什么样的HTML，又apply了那些CSS，做出了这样的效果。</p>

<p>如果在这个过程中，遇到一些没有见过的标签，或者标签的属性，那么去<a href="http://www.w3schools.com/">w3school</a>上查看一下这些标签/属性的含义，尽量使用这些Tag原始的意义（设计时的初衷）。</p>

<p>比如div，它是divider的缩写，本来是用来分割块的，那么就用它来做分割，比如p(paragraph)标签，用来分段，可以将文字放入其中。这些都是HTML标签的设计初衷，我们应该尽量遵循，在实现的时候，如果使用原始的标签很难实现，那么可以尝试一些比较trick的方式来绕过，但是毕竟并非正途。</p>

<p>最后，design和编程类似，你需要不断的练习，自己动手多尝试，在研究了别人的实现之后，自己最好做一个示例出来。</p>

<h4>其他人的建议</h4>

<p>最近读到的一篇写的<a href="http://somerandomdude.com/2012/01/10/transition-from-development-to-design/">非常好的文章</a>，作者也是一个有开发背景的设计师，因此有很多地方可以借鉴：</p>

<ol>
<li>在转向designer的同时，不要丢掉编程</li>
<li>按照一定的顺序来学习design（可用优先，性能优先）</li>
<li>设计一切见得到的东西</li>
<li>和其他人一起讨论设计，并聆听别人</li>
<li>尝试分享，尝试将自己的设计讲给别人</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Hack day]]></title>
    <link href="http://abruzzi.github.com/2013/03/guan-yu-hack-day/"/>
    <updated>2013-03-22T20:55:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/03/guan-yu-hack-day</id>
    <content type="html"><![CDATA[<h4>关于Hackday</h4>

<p>Hackday是一个技术活动，每三个月举行一次，每次正式时间为两天，每次的hackday都有一个主题，比如对某个业务模块的数据挖掘，关于某个模块的功能/执行效率的改进。</p>

<p>Hackday中的idea多是工作中接触到的痛点，但是又有一些挑战，很难在工作的时候将其完成，或者是一些有意思的主题，平时想做又不太合适（比如一些没有经过确认创新的点子）。</p>

<h4>Hackday 1st</h4>

<p>第一次Hackday是跟<a href="http://adams.co.tt/blog">Adam</a>一起做一个数据展现的idea，Adam是墨尔本Office里一个相当senior的咨询师，我们当时做的idea是根据系统中已有的数据信息，来做一些简单的数据分析，如：</p>

<ol>
<li>找出一个地区内的所有中介，看看哪些中介持有最多的房产资料</li>
<li>找出一个地区中，可以最快卖掉手中房产的中介</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2013/03/hackday-agent-info.resized.png" alt="image" /></p>

<p>我们的应用使用sinatra作为服务器；由于数据库系统已经存在，所以ORM需要做的是将对象和已存在的数据表关联，因此功能强大且可以独立使用的ActiveRecord就成了首选；模板使用haml；UI框架风格使用了BootStrap。</p>

<p>搭建环境大概只用了1到1.5个小时，在整个开发过程中，我学习到了一个专业的敏捷开发的流程：</p>

<ol>
<li>划分大的目标，使之称为小的task</li>
<li>小步前进，做完一个功能之后，进行快速的review（首先有一个可以工作的版本）</li>
<li>如果发现有潜在的问题，进行重构，以方便下一个小的task</li>
</ol>


<p>两天之后，当一个可以工作，并且很容易扩展的应用程序真实的放在我们面前的时候，我觉得十分有意思，这当然不是因为build something本身的乐趣，而是我看到一种理论在实际的生活中可以工作（而且是以一种非常有意思的方式），这个过程让我对这种开发方式产生了很多新的认识。</p>

<h4>Hackday 2nd</h4>

<p>第二次的idea是一个基于google map的应用，比如某人的公司在A地，老婆的公司在B地，他们最喜欢的超市在C地，然后他们想找一个离这三个地方距离都很近的房子。</p>

<p><img src="http://abruzzi.github.com/images/2013/03/hackday-neighborhood.resized.png" alt="image" /></p>

<p>同样也使用了Sinatra+haml+javascript。由于idea本身就是西安团队想出来的，所以这次的参与者都是西安office的，这样可以省去交流的成本，做起来肯快，但是问题也很严重，就是没有人做演示，别的团队也不清楚我们在干什么。</p>

<h4>Hackday 3rd</h4>

<p>经历了前两次，第三次的就非常official了，有story wall，有producer，有站会，有showcase，正好这段时间我们的一个客户designer在西安office出差，所以还设计了一些海报。</p>

<p><img src="http://abruzzi.github.com/images/2013/03/hackday-rango-stories.resized.png" alt="image" /></p>

<p>有了专业的designer参与，应用程序的外观立马得到了改善，看起来非常有产品的感觉：</p>

<p><img src="http://abruzzi.github.com/images/2013/03/hackday-rango-homepage.resized.png" alt="image" /></p>

<p>这次本来计划开发离线版本，使用浏览器的localStorage，但是静态网页在iPad上无法工作。team快速的做出了调整，使用sinatra（又一次）搭建了服务器，然后将应用部署在cloud上。</p>

<h4>总结</h4>

<p>虽然每次的“成果”都不大，但是整个hack的过程都非常有意思，每次都可以使用前几次活动中好的工作方式，而前几次中做的不好的则可以进行改进，技术仅仅是其中的一个方面，与团队成员的协作，对自己信心的加强，通过创新来给客户带来价值，这一系列的，不那么明显的“成果”才是更重要的。</p>

<p>另一个“成果”是，我对轻量级的框架如<a href="http://www.sinatrarb.com/">sinatra</a>，引擎<a href="http://haml.info/">haml</a>等有了非常浓厚的兴趣，用这些工具可以快速的搭建用于showcase的应用程序，而且非常容易改进，非常适合小步迭代的开发方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cycling]]></title>
    <link href="http://abruzzi.github.com/2013/03/cycling/"/>
    <updated>2013-03-10T15:34:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/03/cycling</id>
    <content type="html"><![CDATA[<h3>昆明骑行</h3>

<h4>首次骑行</h4>

<p>从城西出发，骑到城北长虫山，到龙凤公墓集合，然后沿着小哨，大哨，最后从金殿后山返回。</p>

<p><img src="http://abruzzi.github.com/images/2013/03/kunming-cycling-1st.resized.jpg" alt="image" /></p>

<p>整个路线大概80公里，山中时而风雨大作，时而阳光遍地，依稀记得中午休息时，山里某个农家乐里的带皮羊肉火锅滋味鲜美无比。</p>

<h4>东大花椒鸡</h4>

<p>云青青兮欲雨，水澹澹兮生烟。</p>

<p><img src="http://abruzzi.github.com/images/2013/03/kunming-cycling-dongda-2.resized.jpg" alt="image" /></p>

<p><img src="http://abruzzi.github.com/images/2013/03/kunming-cycling-dongda-chicken.resized.jpg" alt="image" /></p>

<h4>夜骑宝珠寺</h4>

<p>宝珠寺在昆明城西，寺在山脚下，整个骑行路线全是上坡，而且有好几公里的坡度巨大，算是一个骑行初级班和进阶班的分水岭。事实上，和同事骑行宝珠寺，从来没有去看过“宝珠寺”本身。</p>

<p><img src="http://abruzzi.github.com/images/2013/03/kunming-cycling-baozhu.resized.jpg" alt="image" /></p>

<p>宝珠寺山顶附近有了泉，有很多人开车去山上打泉水。我们曾用脉动的瓶子装了些，但是终于没有敢喝。在夜间骑行感觉非常诡异，山中非常黑，只有一条灰白色的公路，偶尔有车子开过，会有一点光闪过，由于坡度非常陡峭，可以听到头顶上有下坡朋友在单车上高声呼啸而过。骑到高处，俯瞰城市，山坳里的昆明城尽收眼底。</p>

<p>从山上起下来之后，去城西的烧烤摊上点一些酒肉，和朋友们扯扯淡，然后再沿着空旷的街道返回。</p>

<h4>卧云山</h4>

<p>从宝珠寺顶一直往西北，过了筇竹寺，然后一路往西，骑到卧云山下吃午饭，貌似每个地方的花椒鸡都各有特色，这种蘸着花椒蘸水的吃饭比东大的好吃一些：</p>

<p><img src="http://abruzzi.github.com/images/2013/03/kunming-cycling-woyun-chicken.resized.jpg" alt="image" /></p>

<p>到达卧云山顶，小转盘附近：</p>

<p><img src="http://abruzzi.github.com/images/2013/03/kunming-cycling-woyun.resized.jpg" alt="image" /></p>

<h3>西安骑行</h3>

<h4>沣峪口</h4>

<p>毫无疑问，西安骑行的经历是最糟糕的了：第一次是从南三环，沿太白南路往北，骑到老城墙，穿城而过，然后到北二环，再从城北骑回来；第二次路线和第一次差不多，不过是跟孙曼思一起，而且是和不过骑得更远，到了草滩附近；第三次是往南，跟孙曼思，还有三个同事，骑行沣峪口，恰遇极为严重的沙尘暴，当时PM2.5已经过千。</p>

<p><img src="http://abruzzi.github.com/images/2013/03/xian-cycling-3rd.resized.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install powerline (fancy status line) for vim in Mac OS]]></title>
    <link href="http://abruzzi.github.com/2013/02/install-powerline-fancy-status-line-for-vim-in-mac-os/"/>
    <updated>2013-02-19T10:53:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/02/install-powerline-fancy-status-line-for-vim-in-mac-os</id>
    <content type="html"><![CDATA[<h3>Powerline</h3>

<p><a href="https://github.com/Lokaltog/powerline">powerline</a>会将vim的status line变的非常漂亮，看起来像一个“主流”的编辑器那样，而又不会引入额外的“重量”。基本原理是使用字体将特殊字符展现成特殊形状（如三角形），额外的有一些漂亮的配色。</p>

<h4>效果</h4>

<p><img src="http://abruzzi.github.com/images/2013/02/vim-power-line-resized.png" alt="image" /></p>

<h4>安装</h4>

<p>有几个额外的点需要确保：</p>

<h5>保证你的vim包含了对python的支持</h5>

<p><code>vim --version | grep python</code>的结果应该包含<code>+python</code>，如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+path_extra -perl +persistent_undo +postscript +printer -profile +python/dyn </span></code></pre></td></tr></table></div></figure>


<p>如果没有的话，需要将vim重新编译，比如在Mac OS下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install macvim --env-std --override-system-vim</span></code></pre></td></tr></table></div></figure>


<h5>安装powerline</h5>

<p>最简单的方式是直接clone到本地，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/Lokaltog/powerline.git ~/PowerLine/</span></code></pre></td></tr></table></div></figure>


<h5>配置.vimrc</h5>

<p>为你的vimrc添加下面的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set rtp+={path_to_powerline}/powerline/bindings/vim
</span><span class='line'>set laststatus=2
</span><span class='line'>set noshowmode</span></code></pre></td></tr></table></div></figure>


<p>这时，如果你启动vim，应该已经可以看到powerline了，但是有可能有“乱码”的问题，幸运的是，已经有很多的预定义字体。</p>

<h3>Fonts</h3>

<p><a href="https://github.com/Lokaltog/powerline-fonts">这里</a>有许多额外的预定义fonts。选中需要的字体，安装到本地即可（双击字体文件或者拷贝到<code>~/Library/Fonts</code>下）。然后在.vimrc中使用这个字体，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set encoding=utf-8
</span><span class='line'>set guifont=Menlo\ for\ Powerline:h14</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get started with jQuery Mobile]]></title>
    <link href="http://abruzzi.github.com/2013/02/get-started-with-jquery-mobile/"/>
    <updated>2013-02-14T13:50:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/02/get-started-with-jquery-mobile</id>
    <content type="html"><![CDATA[<h3>jQuery mobile</h3>

<p><a href="http://jquerymobile.com/">jQuery Mobile</a>是一个基于jQuery/jQuery-ui的UI库，用于构建基于HTML5的应用程序，当然它主要针对移动设备平台，开发者使用它可以很容易的开发出运行在ios/android/windows phone上的应用，这些应用（尽管运行在不同的硬件/软件系统上）在界面上看起来几乎一致。</p>

<h3>基本元素</h3>

<h4>页面布局</h4>

<p>在移动设备上，一个页面一般由三部分组成（header区域，content区域，footer区域），当然，有的页面可能会缺失一部分（最常见的如：没有footer的长列表），jQuery Mobile通过在DOM元素上定义data-role来指定元素的归属：</p>

<ul>
<li>page 整个页面</li>
<li>header header区域</li>
<li>content content区域</li>
<li>footer footer区域</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div data-role='page'&gt;
</span><span class='line'>    &lt;div data-role='header'&gt;
</span><span class='line'>        &lt;h1&gt;This is header&lt;/h1&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>    &lt;div data-role='content'&gt;
</span><span class='line'>        &lt;p&gt;This is content&lt;/p&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>    &lt;div data-role='footer'&gt;
</span><span class='line'>        &lt;h1&gt;This is footer&lt;/h1&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2013/02/jquery-mobile-page.png" alt="image" /></p>

<h4>多个页面</h4>

<p>通常一个应用程序会有多个“页面”，在jQuery Mobile中，所有的“页面”都放在同一个html文件中，通过data-role为page的元素的id来指定一个页面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div data-role='page' id='edit-page'&gt;
</span><span class='line'>    &lt;div data-role='header'&gt;
</span><span class='line'>        &lt;h1&gt;Edit page&lt;/h1&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>    &lt;div data-role='content'&gt;
</span><span class='line'>        &lt;form&gt;
</span><span class='line'>          &lt;label for='desc'&gt;Description: &lt;/label&gt;
</span><span class='line'>          &lt;input type='text' value='' /&gt;
</span><span class='line'>        &lt;/form&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>在另一个页面中，可以通过link的href来引用这个id：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="#edit-page"&gt;Go to edit page&lt;/a&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2013/02/jquery-mobile-multi-page.png" alt="image" /></p>

<h4>列表元素</h4>

<p>列表可能是最常见的一种jQuery Mobile元素了，列表由HTML的ul-li组成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul data-role='listview' data-inset='true'&gt;
</span><span class='line'>  &lt;li&gt; &lt;a href="#"&gt;Tomorrow is another day&lt;/a&gt; &lt;/li&gt;
</span><span class='line'>  &lt;li&gt; &lt;a href="#"&gt;Michael is leaving&lt;/a&gt; &lt;/li&gt;
</span><span class='line'>  &lt;li&gt; &lt;a href="#"&gt;Tutorial of jQuery mobile&lt;/a&gt; &lt;/li&gt;
</span><span class='line'>  &lt;li&gt; &lt;a href="#"&gt;So, if you want something,...&lt;/a&gt; &lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://abruzzi.github.com/images/2013/02/jquery-mobile-list.png" alt="image" /></p>

<h3>一个小例子</h3>

<p>我在最近的一个开源项目<a href="https://github.com/abruzzi/feather">feather</a>中使用了jQuery Mobile来完成ios上的展现。</p>

<p><img src="http://abruzzi.github.com/images/2013/02/feather-mobile.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将应用程序部署到heroku]]></title>
    <link href="http://abruzzi.github.com/2013/01/developing-with-heroku/"/>
    <updated>2013-01-26T19:02:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/developing-with-heroku</id>
    <content type="html"><![CDATA[<h3>heroku</h3>

<p>使用heroku，开发人员可以很容易的将自己的应用程序公开给世界上的其他用户使用，heroku会为你提供一个url，一些预设的空间如数据库（postgresql）等。这对于需要频繁远程showcase的场景提供了非常好的方式，当然对于开发人员向其他的开发人员或者最终用户展现自己的框架的外观/行为等场景也会非常有用。</p>

<h3>在heroku上注册用户</h3>

<p>首先，当然是在heroku上<a href="https://api.heroku.com/signup/devcenter">注册一个开发账户</a>，如果你已经注册过，就请接着第二步</p>

<h3>下载heroku的本地Toolbox</h3>

<p>heroku提供了一个很好用的<a href="https://toolbelt.heroku.com/">工具包</a>，通过这个工具包，开发人员可以很容易的对部署在heroku上的应用程序做操作。</p>

<h3>在本地登陆heroku</h3>

<p>如果没有上传过key的话，heroku会提醒你创建一个新的ssh公钥，然后上传到heroku（这个过程与使用github非常类似）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku login
</span><span class='line'>Enter your Heroku credentials.
</span><span class='line'>Email: adam@example.com
</span><span class='line'>Password: 
</span><span class='line'>Could not find an existing public key.
</span><span class='line'>Would you like to generate one? [Yn] 
</span><span class='line'>Generating new SSH public key.
</span><span class='line'>Uploading ssh public key /Users/adam/.ssh/id_rsa.pub</span></code></pre></td></tr></table></div></figure>


<p>如果已经上传过key，则可以直接登陆</p>

<h3>准备工作</h3>

<p>在本地生成一个应用程序的基本结构，如：<code>Gemfile</code>，目录结构等。然后在本地配置好git环境，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "init"</span></code></pre></td></tr></table></div></figure>


<p>准备Procfile：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: bundle exec ruby app.rb -p $PORT -E production</span></code></pre></td></tr></table></div></figure>


<p><code>app.rb</code>相当于你的应用程序的主入口(main)，<code>-E</code>指定运行环境（此处指定为production），你的应用程序可能会根据次设置来进行一些资源的选择（数据库指向，资源文件位置等）</p>

<p>在上传之前，需要确保自己的应用程序可以在本地正常运行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foreman start</span></code></pre></td></tr></table></div></figure>


<p>应用程序将在本地的5000端口上运行，此时可以做一些简单的验证，保证应用程序运行正常。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "ready for deploy app to heroku"</span></code></pre></td></tr></table></div></figure>


<h3>上传你的App</h3>

<p>这时，可以很轻易的将App上传到heroku了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku create
</span><span class='line'>$ git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>当然，第一次上传可能会比较慢（取决于你应用程序的大小），如果一切正常，heroku将会尝试根据你的Gemfile来安装依赖，安装完成之后，会尝试根据Procfile中的配置启动你的应用程序。</p>

<p>如果你的应用程序会访问数据库（非postgresql的数据库），那么建议在Gemfile中指定当测试时使用该数据库，而在production环境中使用postgresql，因为heroku使用的正是postgresql：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>configure :test do
</span><span class='line'>    DataMapper.setup(:default, ENV['DATABASE_URL'] || "local-db-url")
</span><span class='line'>    DataMapper.finalize.auto_upgrade!
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>我的应用在本地使用sqlite，而在heroku中使用其提供的postgresql。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Google Code上的项目迁移到Github]]></title>
    <link href="http://abruzzi.github.com/2013/01/migrate-google-code-to-github/"/>
    <updated>2013-01-13T23:28:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/migrate-google-code-to-github</id>
    <content type="html"><![CDATA[<h3>一些闲话</h3>

<p>虽然对开源社区没有任何杰出的贡献，但是我自己在业余时间开发的很多小东西都是开源的，有部分放在google code上，可是除了一个<a href="http://code.google.com/p/stodo/">sTodo</a>有几个用户外，其他的工具几乎都纯属自娱自乐。虽然当时做的时候自己非常投入，会各种YY，假设用户会需要这个功能，会需要那个功能，用户会需要脚本化，自定义插件等等，但是到最后发现只有自己在使用，而再过一段时间，连自己也不会使用了。</p>

<p>我自己托管在google code上的，还算有点用处的项目有三个：</p>

<ul>
<li><a href="http://code.google.com/p/stodo/">sTodo</a> 一个简单的todo管理器</li>
<li><a href="http://code.google.com/p/phoc/">phoc</a> 一个可以用JavaScript脚本化的计算器</li>
<li><a href="http://code.google.com/p/utouch">utouch</a> 一个使用styledTextCtrl的编辑器</li>
</ul>


<p>虽然这种事情发生在几乎每一个喜欢写程序的家伙身上，但是整个过程对自我修炼来说，还是非常有现实意义的，首先专业技能得到了锻炼，而最重要的一点是：需求不是想象出来的！在没有和用户真正仔细的讨论之前，我们的假设和推断往往是错的。</p>

<p>Idea到处都是，有很多很酷且很有挑战的idea，但是它们不一定真的在解决人们的问题。这是一个很值得思考的问题，我最近在尝试组织一个活动，主题以及目标已经确定，上周找胡凯帮我把关，结果发现我又一次的进入了“帮助用户想需求”的老路上了。</p>

<h3>迁移</h3>

<h4>使用svn同步到本地</h4>

<p>根据google code的提示，将code从svn中的checkout到本地：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn checkout http://phoc.googlecode.com/svn phoc-read-only</span></code></pre></td></tr></table></div></figure>


<h4>去除掉.svn隐藏目录</h4>

<p>现使用<code>find</code>在当前目录下找到名称为.svn的目录，然后将其删除，这个过程是递归的，即可以清除掉当前目录及所有子目录中的.svn目录:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -name ".svn" -type d -exec rm -rf {} \;</span></code></pre></td></tr></table></div></figure>


<h4>初始化git的repo</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git ci -m "migrate of project xxx to github"</span></code></pre></td></tr></table></div></figure>


<p>然后对应的在github上创建repo，创建之后，需要将本地的remote指向github上的repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin git@github.com:project/project.git</span></code></pre></td></tr></table></div></figure>


<p>如果本地的master分支没有配置，可以在<code>.git/config</code>中进行配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[branch "master"]
</span><span class='line'>  remote = origin
</span><span class='line'>  merge = refs/heads/master</span></code></pre></td></tr></table></div></figure>


<p>最后将新的commit push到新的repo上即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull --rebase
</span><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<p>我已经把这个工具迁移到了github上<a href="https://github.com/abruzzi">abruzzi</a>，正式告别了google code。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[是时候慢下来了]]></title>
    <link href="http://abruzzi.github.com/2013/01/where-am-i/"/>
    <updated>2013-01-09T20:56:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/where-am-i</id>
    <content type="html"><![CDATA[<p>某个晚上，我在网上为自己挑选一个适合出差的行李箱，两个小时之后，我突然发现我停留在了一个瑞士军刀的淘宝店里；本来计划晚上看看AppleScript的资料，结果一个小时之后，我在用python写一个opencv的小程序，又过了一个小时，我停留在Alfred的powerpack的支付页面，面对着15英镑的价格陷入沉思。</p>

<p>而且周围好像每个人都有这样类似的经历。我咨询其他同事遇到类似的情况怎么处理，有人推荐使用Todo列表，而且Todo最好列在纸上。当列表中的Todo被消灭时，会激发你去写下更多的task。这当然是个好办法，我很早的时候就写过一个软件来完成Todo管理：<a href="http://code.google.com/p/stodo/">sTodo</a>。但是当打开电脑之后，时间就完全不受控制了，网络上总是有各种各样好玩的东西，新的框架，新的语言，某种颠覆式的CSS框架，新奇而好用的软件，可以大大提高用户体验的UI库，太多了……。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/stodo_edit.png" alt="sTodo" /></p>

<p>上周三的晚上，回家之后打开电脑，开始了“学习”，事实上是很盲目的在网络上游荡，当我意识到又要重蹈覆辙的时候，我毅然的合起了电脑，然后拿起一本纸质的《JavaScript: The good parts》。最后当我要睡觉时才发现，读了大概30多页，而且以前的一些概念也更加清楚了。而且事实上我并未因为没有打开计算机而有什么实质性的损失。</p>

<p>然后我突然意识到我之前的所谓的学习的方式有很大的问题，网络当然可以为你提供大量的信息，但是很多时候，这些呈碎片装的信息的作用并不如预期般的大。它会帮你解决手头的小问题，但是阻挡了你的视线，你本可以走的更远！</p>

<p>在网络上看资料，总是有一种紧迫感：这么多的东西都不会，落后于时代好多年。打开电脑，一个晚上过去了，你可能读了很多的东西，但是记下来的非常少，因为总是会被各种链接，图片等干扰，这个看似在学习的过程事实上完全是在浪费实践，一天之后，你前一个晚上看到的东西几乎被完全遗忘，然后周而复始。</p>

<p>所以，是时候慢下来，你不会因为没有浏览几个网页，或者少读几篇文章而落后于时代几十年的，你需要好多年才能积累起来的知识，别人同样需要好多年。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/todos.png" alt="image" /></p>

<p>合上电脑，捧起纸质的书籍，世界突然慢了下来，但是却会充盈很多。事实上，放慢脚步，消除网络带来的<strong><em>虚假的紧迫感</em></strong>，反而可以以更快的速度掌握一项技术，一个框架，也可以让印象更加深刻。晚上回家尽量不带电脑，我用trainng经费购买的10本书，现在才读完2.5本，去年5月买的书还有两本没有读完，这些亏欠都需要在脱离电脑的舒服之后才能想起来，也才有可能完成。</p>

<p>慢下来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用opencv进行数字识别]]></title>
    <link href="http://abruzzi.github.com/2013/01/basic-digits-recognization/"/>
    <updated>2013-01-05T22:51:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/basic-digits-recognization</id>
    <content type="html"><![CDATA[<p>最终的效果图是这样的：</p>

<p><img src="http://abruzzi.github.com/images/2013/01/result.resized.png" alt="识别效果" /></p>

<p>图中的一个小的窗口中为resize之后的所有找到的图片的列表，在这个case中，有三个数字。</p>

<p>数字识别即将图片中的数字通过计算机算法识别为文本。如果要从头写一个识别器，可能需要很多的实践，花费很大的精力，而且还需要有良好的数学功底才能完成，不过使用opencv提供的丰富的API和算法实现，可以比较容易的做到，而且也可以得到比较高的精确率。</p>

<p>数字识别是模式识别中的一个特例，我这里要讨论的是一个比较简单的实现，基于最简单也最容易理解的KNN算法(请参看<a href="http://icodeit.org/blog/2013/01/k-nearest-neighbour/">之前的一篇文章</a>)。</p>

<p>数字识别和其他的所有计算机视觉相关的应用都会分为两个步骤：ROI抽取和识别。</p>

<pre><code>1. ROI抽取即将感兴趣的区域从原始图像中分离初来，这个步骤包括二值化，噪点的消除等
2. 识别即通过一些分类器将第一步中的结果进行分类，事实上属于机器学习的一个典型应用
</code></pre>

<h3>图像预处理</h3>

<p>原始图片中会有大量与目标无关的信息，比如人脸检测中，背景中往往有诸如桌椅，墙壁上的画，或者在户外的树木，动物等等，这些与目标无关的信息被称为噪音或者噪点，应该在进行分类之前通过一些特定的步骤来消除，不但可以减少计算量，而且还可以提高准确率。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/865.origin.png" alt="原始图片" /></p>

<h4>灰度图</h4>

<p>通常的彩色图形由3个(RGB)或者4个(RGBA)通道组成，在计算机看来，一个彩色的图片是由3/4个矩阵组成，每个矩阵中包含若干个点(比如1024x768)，如果每个通道都参与运算的话，会引入太多的计算量，因此通常的做法是将彩色图像转换为灰度图，在opencv中，这一步非常容易：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def grayify(image):
</span><span class='line'>    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
</span></code></pre></td></tr></table></div></figure>


<h4>二值图</h4>

<p>灰度图较之原始图片，将三个维度的矩阵变成了一个维度，已经做了部分简化，但是算法来说，噪音并未消除，灰度图中，每个点仍然有8位来表示，每个点可能的灰度为0-255，二值图即将灰度图转换成黑白图，每个点只有两种可能：非黑即白，这样将大大简化计算。</p>

<p>opencv提供了阈值调节的API，可以将灰度图转换为二值图：高于某一个阈值的点被认为是白色，反之为黑色：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def thresholding_inv(image):
</span><span class='line'>    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
</span><span class='line'>
</span><span class='line'>    ret, bin = cv2.threshold(gray, 48, 255, cv.CV_THRESH_BINARY_INV)
</span><span class='line'>    bin = cv2.medianBlur(bin, 3)
</span><span class='line'>
</span><span class='line'>    return bin</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中，48即为阈值，如果灰度高于48，那么改点会被认为是255，否则为0。效果如下：
<img src="http://abruzzi.github.com/images/2013/01/865.thres.png" alt="二值图" /></p>

<p>由于轮廓检测算法需要从黑色的背景中搜索白色的轮廓，所有此处的<code>threshold</code>最后一项参数为<code>cv.CV_THRESH_BINARY_INV</code>，即反转黑白色。</p>

<h4>轮廓检测</h4>

<p>轮廓检测会将二值图中的可以连通的区域(一个多边形)用一系列的点描述，默认的轮廓检查会返回一个点的序列，比如用四个点描述一个矩形，但是可以通过设置精度来返回更多的点，这里我们只需要返回矩形即可：</p>

<p><img src="http://abruzzi.github.com/images/2013/01/865.contours.png" alt="轮廓检查" /></p>

<p>比较有意思的是这里的数字8，由于8这个形状中有两个圆圈，默认的轮廓检查会将这两个圆圈都检测到，那么8就会有三个轮廓，同样还可能出现这种情况的还有数字4,6,9。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>contours, heirs = cv2.findContours(thres.copy(), \
</span><span class='line'>cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)</span></code></pre></td></tr></table></div></figure>


<p>因此需要指定<code>findContours</code>函数仅搜索最外层的轮廓，而不关注内部可能出现的任何轮廓：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>contours, heirs = cv2.findContours(thres.copy(), \
</span><span class='line'>cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span></code></pre></td></tr></table></div></figure>


<h3>KNN分类算法</h3>

<p>KNN算法的原理可以参看之前的<a href="http://icodeit.org/blog/2013/01/k-nearest-neighbour/">一篇文章</a>。这里的实现主要参考了opencv的示例程序:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class KNearest(StatModel):
</span><span class='line'>    def __init__(self, k = 3):
</span><span class='line'>        self.k = k
</span><span class='line'>        self.model = cv2.KNearest()
</span><span class='line'>
</span><span class='line'>    def train(self, samples, responses):
</span><span class='line'>        self.model = cv2.KNearest()
</span><span class='line'>        self.model.train(samples, responses)
</span><span class='line'>
</span><span class='line'>    def predict(self, samples):
</span><span class='line'>        retval, results, neigh_resp, dists = \
</span><span class='line'>        self.model.find_nearest(samples, self.k)
</span><span class='line'>        return results.ravel()</span></code></pre></td></tr></table></div></figure>


<h4>数字的顺序</h4>

<p>另外一个有意思的事情是轮廓检测的时候，算法并不一定按照从左到右，从上到下的方向进行，我开始只是简单的按照迭代的顺序将结果插入到一个list中，但是这样list中的结果是乱的，下午得到了team中有图像处理背景的<a href="http://muggleyoung.info/">杨眉同学</a>的支持：搜索到轮廓的时候，将此时的position信息与轮廓一起记录下来，然后在搜索完成之后，将整个列表按照x坐标排序(卡上的数字是按照从左向右书写)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class PosImage(object):
</span><span class='line'>    def __init__(self, pos, image):
</span><span class='line'>        self.pos = pos
</span><span class='line'>        self.image = image
</span><span class='line'>
</span><span class='line'>    def get_position(self):
</span><span class='line'>        return self.pos
</span><span class='line'>
</span><span class='line'>    def get_image(self):
</span><span class='line'>        return self.image
</span></code></pre></td></tr></table></div></figure>


<p>然后在迭代中记录position信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cropped = gray[y:y+h, x:x+w]
</span><span class='line'>resized = cv2.resize(cropped, (20, 20))
</span><span class='line'>cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 3)
</span><span class='line'>pos_image = PosImage((x, y), resized)
</span><span class='line'>images.append(pos_image)</span></code></pre></td></tr></table></div></figure>


<p>最后做一次新的arrange：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def rearrange(images):
</span><span class='line'>    return sorted(images, cmp=lambda x, y:
</span><span class='line'>    cmp(x.get_position()[0], y.get_position()[0]))
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为octopress添加新的页面(page)]]></title>
    <link href="http://abruzzi.github.com/2013/01/add-new-page-to-octopress/"/>
    <updated>2013-01-03T17:38:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/add-new-page-to-octopress</id>
    <content type="html"><![CDATA[<p>我之前在wordpress中有一些页面(page)，在迁移到octopress之后都不见了，早就想把这些页面show出来了，最终都被我以各种理由拖到了今天。</p>

<h3>布局</h3>

<p>一个典型的octopress博客的source目录布局大概是这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source/
</span><span class='line'>├── _attachments
</span><span class='line'>├── _includes
</span><span class='line'>│   ├── asides
</span><span class='line'>│   ├── custom
</span><span class='line'>│   │   └── asides
</span><span class='line'>│   └── post
</span><span class='line'>├── _layouts
</span><span class='line'>├── _nav_menu_items
</span><span class='line'>├── _pages
</span><span class='line'>├── _posts
</span><span class='line'>├── blog
</span><span class='line'>│   └── archives
</span><span class='line'>├── font
</span><span class='line'>├── images
</span><span class='line'>│   ├── 2012
</span><span class='line'>│   │   ├── 01
</span><span class='line'>│   │   ├── 02
</span><span class='line'>│   ├── 2013
</span><span class='line'>│   │   └── 01
</span><span class='line'>│   ├── fancybox
</span><span class='line'>│   └── social
</span><span class='line'>├── javascripts
</span><span class='line'>│   ├── asides
</span><span class='line'>│   └── libs
</span><span class='line'>├── jsccp
</span><span class='line'>└── stylesheets
</span><span class='line'>    ├── bootstrap
</span><span class='line'>    └── syntax</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>对应的，当执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<p>时，source下面的markdown会被编译为html，并拷贝到public下，public目录下的结构跟source下一致，里边的内容为最终的静态页面。因此我们需要修改souce中的内容，然后generate/deploy即可。</p>

<h3>添加页面(page)</h3>

<p>在octopress中，已经有两个默认page，即blog/archives，我们可以参考它来完成自己的页面，首先在source中创建一个目录，比如叫做<strong>jsccp</strong>(<a href="http://abruzzi.github.com/jsccp">JavaScript Core Concepts and Practices</a>)，然后在这个目录中放入一个名叫index.markdown的文件即可。</p>

<p>将需要的内容放入这个文件即可完成页面(page)的编辑。但是我们还需要在首页上将这个页面的链接暴露出来，这一步需要编辑<code>source/_includes/custom/navigation.html</code></p>

<pre><code>&lt;ul class="main-navigation"&gt;
    &lt;li&gt;&lt;a href="http://abruzzi.github.com/"&gt;Blog&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://abruzzi.github.com/blog/archives"&gt;Archives&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://abruzzi.github.com/jsccp"&gt;JavaScript内核系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>我为这个文件添加了一个新行，指向新创建的目录(此处不需要指定到index.markdown或者index.html)，这样就设置完成了。</p>

<p>尝试<code>rake generate</code>然后<code>rake preview</code>，如果一起正常，就可以<code>rake deploy</code>部署到github上了。</p>

<h3>效果图</h3>

<p><img src="http://abruzzi.github.com/images/2013/01/navigation.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k-nearest-neighbour算法简介及示例]]></title>
    <link href="http://abruzzi.github.com/2013/01/k-nearest-neighbour/"/>
    <updated>2013-01-03T15:46:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/k-nearest-neighbour</id>
    <content type="html"><![CDATA[<h3>background</h3>

<p>元旦放假前，team的同事们想要一起学习一些技术，然后一起做些小东西，有人提到将物理墙上的卡，通过手机拍照，识别出其中的卡号，然后与电子墙同步状态。这是一个非常有意思的主题，会涉及到很多方面的知识，其实有好几个topic，只不过我对人工智能/机器学习等比较有兴趣而已，所以就先自己研究下。</p>

<p>几天下来，关于数字识别的基本的流程已经清晰了，关于图片的预处理及边界标定等都差不多就绪了，剩下比较重要的是<strong>识别</strong>本身了。在这个过程中，遇到了一些很有意思的算法，我自己也花费了好几天才弄明白，所以整理了一下，这一篇先介绍下第一个，也是最简单最好用的KNN算法。</p>

<h3>K-nearest-neighbour简介</h3>

<p>KNN是机器学习中<strong>最简单</strong>的一种无值守的学习方法，但是在实际场景中，效果却经常<strong>非常好</strong>。一般来说，在样本较多，分布均匀的空间中，KNN会收到很好的效果。但是由于KNN会计算空间中的每个点与需要标定的点的距离(甚至需要计算额外的权重信息)，所以计算量会较大。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>假设所有的点都均匀的分布在一个平面内，此时的平面密度(单位范围内的点的个数)非常大，而每个子平面内的点的分布与所有点在整个平面内的分布相当。在子平面S中，有一个点Y，则离点X(to be classified)最近的Y很可能与Y同在子平面S中。</span></code></pre></td></tr></table></div></figure>


<p>比如取出空间中与X距离最近的有5个点(K=5)，其中3个属于C1类，2个属于C2类，则根据少数服从多数原则，X点被归类为C1.这样的一个缺点就是如果空间内的点分布不均匀，那么会有一些误差，如果上面这个场景经常出现，那么分类会越来越偏离(有一个偏心的硬币，投掷100,000次，有90,000次正面)。这样就有引入了对KNN的另一个扩展方式，加入权重的KNN：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>当然这种形式的KNN不是很精确，由此引申出了带权重的KNN：可以为每个点都赋予一个权值，每个权值与新的点X的距离有关，通常会取距离的倒数，这样与X最近的点有较高的权重，而较远的点具有较低的权重，这样在投票(voting)阶段可以相对的提高精确度</span></code></pre></td></tr></table></div></figure>


<h3>KNN的一个python版本示例</h3>

<h4>背景(高斯分布)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import random
</span><span class='line'>
</span><span class='line'>def gauss_list(mu, sigma, count=100):
</span><span class='line'>    return [random.gauss(mu, sigma) for _ in range(count)]</span></code></pre></td></tr></table></div></figure>


<p>生成一个随机数数组，数组中的元素符合高斯分布，如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ran = gauss_list(-2, 1, 10)
</span><span class='line'>print ran</span></code></pre></td></tr></table></div></figure>


<p>运行结果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[-1.3277188634970218, -2.1034487392146817, -0.5924407591392826, -0.30376289085064045, -2.191337071105794, -1.9781081550478732, -3.7937155472105673, -2.538102349796847, -1.3728510997834549, -2.766669661625006]</span></code></pre></td></tr></table></div></figure>


<p>更进一步，我们可以用这种方式生成平面中的一些点，这些点可以根据分布情况分为两组，一组是以(-4,0)为重心的500个点，另一组是以(4,0)为重心的500个点：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def gauss_cluster(center, stdDev, count=500):
</span><span class='line'>    return [(random.gauss(center[0], stdDev),
</span><span class='line'>             random.gauss(center[1], stdDev)) for _ in range(count)]
</span><span class='line'>
</span><span class='line'>def make_random_data():
</span><span class='line'>    return gauss_cluster((-4, 0), 1) + gauss_cluster((4, 0), 1)
</span><span class='line'>
</span><span class='line'>data = make_random_data()
</span></code></pre></td></tr></table></div></figure>


<h4>绘制高斯分布</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data = make_random_data()
</span><span class='line'>
</span><span class='line'>x = map(lambda x: x[0], data)
</span><span class='line'>y = map(lambda x: x[1], data)
</span><span class='line'>
</span><span class='line'>plt.clf()
</span><span class='line'>
</span><span class='line'>plt.scatter(x, y, c=x, vmin=0, vmax=20, s=35, alpha=0.75)
</span><span class='line'>plt.colorbar()
</span><span class='line'>plt.grid(True)
</span><span class='line'>
</span><span class='line'>plt.show()</span></code></pre></td></tr></table></div></figure>


<p>通过使用matplotlib的绘图功能，将make_random_data生成的点通过图形的方式展现，效果更加直观，图中的两个点集分别表示两个不同的类别。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/gauss-distribution-resized.png" alt="image" /></p>

<h4>KNN</h4>

<p>我们定义KNN分类器，其中两点间的距离按照欧氏公式来求，先计算点集中离x点最近的k个点，然后取得对应的k个label，再按照label个数球max。</p>

<p>比如k=5时，求的的label集合为[&#8216;O&#8217;, &#8216;O&#8217;, &#8216;A&#8217;, &#8216;A&#8217;, &#8216;A&#8217;]，则我们认为这个点应该被分类为A(少数服从多数)。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def euclidean_distance(x, y):
</span><span class='line'>    return math.sqrt(sum([(a-b)**2 for (a,b) in zip(x,y)]))
</span><span class='line'>
</span><span class='line'>def makeKNNClassifier(data, labels, k, distance):
</span><span class='line'>    def classify(x):
</span><span class='line'>        closestPoints = heapq.nsmallest(k, enumerate(data),
</span><span class='line'>                                        key=lambda y: distance(x, y[1]))
</span><span class='line'>        closestLabels = [labels[i] for (i, pt) in closestPoints]
</span><span class='line'>        return max(set(closestLabels), key=closestLabels.count)
</span><span class='line'>
</span><span class='line'>    return classify</span></code></pre></td></tr></table></div></figure>


<h4>测试一下</h4>

<p>创建1000个随机点，前500个分类为A(Apple)，后500个分类为O(Orange)，k值为3。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data = make_random_data()
</span><span class='line'>labels = ['A'] * 500 + ['O'] * 500
</span><span class='line'>
</span><span class='line'>fitter = makeKNNClassifier(data, labels, 3, euclidean_distance)
</span><span class='line'>
</span><span class='line'>print fitter((-3, 1))
</span><span class='line'>print fitter((4, 2))</span></code></pre></td></tr></table></div></figure>


<p>图中的两个红色的点分别为P1(-3, 1)和P2(4, 2)。它们都已经被正确的分类。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/knn-plant-resized.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么每个开发人员都应该使用Mac系统]]></title>
    <link href="http://abruzzi.github.com/2013/01/why-every-dev-should-try-mac-os/"/>
    <updated>2013-01-01T22:41:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/why-every-dev-should-try-mac-os</id>
    <content type="html"><![CDATA[<h2>为什么每个开发人员都应该使用Mac系统</h2>

<p>在使用了Mac系统大概10个月之后，我已经深深的喜欢上了在其上做开发的体验，精美的界面，人性化的设计，强大的硬件系统，安全而稳定的软件系统，下面我将会用Mac系统和Windows做一个简单的对比，最后会有一些推荐的工具列表。</p>

<h3>Mac系统的一些好处</h3>

<pre><code>1. 系统非常稳定，很少发生死机或者运行缓慢之类问题
2. 即使在休眠之后，也可以飞速(与windows相比)启动
3. 内置的命令行工具非常强大
4. 大量内置的优秀软件
</code></pre>

<p>基本上来说，Mac系统就是一个比Windows的UI漂亮，又比Linux的命令行好用的操作系统。苹果之前的广告说他们的系统是世界级的优秀系统，这一点毫无夸张，Mac OS确实是<strong>世界上最好</strong>的操作系统，没有之一。</p>

<p>个人感觉，使用Mac OS能明显提高开发效率，使得用于解决真正问题的时间提高，而折腾的时间减少，使用windows系统，有很多的时间是在与系统做斗争，或者在等待系统如蜗牛般的加载，说起windows的多任务简直就是笑话，而且有很多无耻的进程在甚至在任务管理器中都不能完全杀死，更不要提病毒之类的话题了。</p>

<p>人们使用计算机的一个典型过程应该是：<em>命令->响应</em>，如是循环，这也是用Mac系统的典型过程。但是使用windows的过程是这样的：<em>命令->等待->响应</em>，或者<strong>命令->死机->…</strong>。我有一台Thinkpad笔记本，4G内存/250G硬盘，Windows 7系统，按说配置还算可以，运行速度也勉强能接受，但是跟同级别硬件配置用来跑Mac系统的话，效率据保守估计会提高32倍。</p>

<p>我觉得对一个合格的开发人员来说，命令行技能，即使不是最重要的，也应该是第二重要的，Mac下的命令行非常好用，有很多shell可供选择，Linux用户可以没有任何学习曲线的转移到Mac的命令行中(bash)，如果觉得默认的bash不顺手，也可以很轻易的切换到zsh，csh之类，很多的Linux知识可以直接用在Mac上，毫无挫败感。</p>

<p><a href="http://http://abruzzi.github.com/images/2013/01/shell-mac.png"><img src="http://abruzzi.github.com/images/2013/01/shell-mac-resized.png" alt="image" /></a></p>

<p>Mac系统中内置了很多的软件，也有一些可以免费获得的优秀软件(下面列表中有很大一部分软件都是免费的)，很多人觉得Mac下什么软件都要收费，我觉得软件收费无可非议，每个软件都倾注了作者(一个或者多个)的大量心血，绝对是合情合理，特别是对于开发人员更是如此(但是，如果开发的软件如windows般垃圾而还要收费的话，那就让人忍不住要骂人了)。</p>

<h3>一些工具的推荐</h3>

<h4>编辑器</h4>

<p>编辑器几乎是开发人员每天接触最多的工具，也最能体现一个开发人员的品味和level，不过在Mac下有所有主流的编辑器，或者其替代品:</p>

<pre><code>1. GVim
2. Emacs
3. Sublime Text 2
</code></pre>

<p><a href="http://abruzzi.github.com/images/2013/01/vim-mac-dev.png"><img src="http://abruzzi.github.com/images/2013/01/vim-mac-dev-resized.png" alt="image" /></a></p>

<h4>IDE</h4>

<p>说实话，我并不喜欢使用IDE，最开始是因为在纯命令行下工作，没有可用的IDE，后来是因为它在一定程度上阻碍了初学者对编译/链接/加载整个过程的理解(所以现在还是不建议初学者直接从IDE开始学习编程)，再后来开始使用jetbrains系列的IDE，除了体积较重，偶尔会有焦点缺失的bug外，基本完美，开发效率会非常高，<strong>世界顶级，没有之一</strong> (下面里表中前两者都要收费，而且价格不菲，但是一分钱一分货):</p>

<pre><code>1. Intellij Idea (Java)
2. Rubymine (Ruby)
3. Eclipse (全能，理论上你可以将器配置成任何语言的IDE)
</code></pre>

<h4>电子书阅读</h4>

<p>电子书阅读我需要一个可以记录上次读到了什么地方，最近打开的书单之类的功能，正好preview都提供，因此也没有专门去找过有没有更好用的:</p>

<pre><code>1. Preview (图片，PDF等都可以preview，很好用)
</code></pre>

<h4>笔记</h4>

<p>个人经验，经常性的将实际开发中遇到的问题，好的设计方式，好的测试用例等记录下来是一个非常好的学习方式，另外在工作的时候，会看到一些非常精彩的文章，可以通过(read it later)记录下来，然后同步到自己的笔记本中，回家或者是休息的时候再看:</p>

<pre><code>1. Evernote
2. Pocket (read it later)
</code></pre>

<h4>同步</h4>

<p>我是一个不折不扣的同步控，我的dropbox中的内容在Mac Book，iPhone和windows机器上都会同步，很多资料找起来会非常方便，比如一些经典的书籍，一些图片素材等，我都会在dropbox中放一份，如果别人需要也很容易分享:</p>

<pre><code>1. Dropbox
2. Box
3. Google Drive
</code></pre>

<p>本来我还打算写一篇比如《将Mac搭建为一个开发环境》之类的文章，然后列提纲的时候发现无物可写，人家本来就是一个高效的开发环境。比如Terminal/Spotlight/Finder，再加上一个编辑器就完全可以启动了。所以就简单的整理了下我常用的软件列表，以供参考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2012]]></title>
    <link href="http://abruzzi.github.com/2012/12/%E6%88%91%E7%9A%842012/"/>
    <updated>2012-12-30T00:00:00+08:00</updated>
    <id>http://abruzzi.github.com/2012/12/我的2012</id>
    <content type="html"><![CDATA[<p><p>毫无疑问，2012年是自我工作以来过的最为充实的一年。我学会了新的编程语言ruby，然后学会了与之相关的两个框架：<a href="http://rubyonrails.org/">rails</a>和<a href="http://www.sinatrarb.com/">sinatra</a>。以及很多DevOps的工具，如<a href="http://www.opscode.com/chef/">chef</a>, <a href="http://vagrantup.com/">vagrant</a> 之类。</p> <p><a href="http://abruzzi.github.com/images/2012/12/Screen-Shot-2012-12-13-at-11.05.58-PM4.png"><img style="background-image: none; display: inline" title="Screen Shot 2012-12-13 at 11.05.58 PM" border="0" alt="Screen Shot 2012-12-13 at 11.05.58 PM" src="http://abruzzi.github.com/images/2012/12/Screen-Shot-2012-12-13-at-11.05.58-PM_thumb.png" width="644" height="458" /></a></p> <p>学习并实践了在年初还觉得很神秘而不可思议的TDD，学习了3种测试框架(<a href="http://rspec.info/">rspec</a>, <a href="http://pivotal.github.com/jasmine/">jasmine</a>, junit)以及一些基本的测试方法。但是在积极分享这一点上做得并不好，虽然也有几篇博客在记录学习的心得，但是秋冬两季在icodeit上一篇博客都没有，仅仅在github上有<a href="http://abruzzi.github.com">几篇零散的草稿</a>。</p> <p>在新的环境中，有太多的东西要学习，在刚开始的时候，很难理解每个工具背后的原理或者更深层次的技术等，经过差不多半年的使用之后，才慢慢领会。理解工具，框架的背后的机制和原理后，实际工作的压力才略微减小了些。</p> <p>在ThoughtWorks西安office开办了将近1个月的乒乓球训练课(和何大师一起)，每周两节课，每节课大概有6+个同事参加，后来还想举办个ThoughtWorks首届男女混双，一直没有实施。西安office的球桌/乒乓球室已经相当专业。</p> <p><a href="http://abruzzi.github.com/images/2012/12/2012-07-22-20.20.19.jpg"><img style="background-image: none; display: inline" title="2012-07-22 20.20.19" border="0" alt="2012-07-22 20.20.19" src="http://abruzzi.github.com/images/2012/12/2012-07-22-20.20.19_thumb.jpg" width="644" height="483" /></a></p> <p>我在7月和10月分享过两个session(说文解字，高效编辑-vim). 下图是说文解字那个session的一张照片。session是对内的presentation，主要目的是分享知识，很多同事会选择技术作为主体，当然不局限于此。我之前很少在公共场合说话，但是通过自己push自己去讲session，一来可以将学习的东西巩固(由于是要讲给别人，所以必然会精心准备，这样印象会更深刻)，二来可以锻炼自己的交流能力。而且从听众的feedback可以知道哪些地方可以改进等。</p> <p><a href="http://abruzzi.github.com/images/2012/12/2012-07-05-13.53.22.jpg"><img style="background-image: none; display: inline" title="2012-07-05 13.53.22" border="0" alt="2012-07-05 13.53.22" src="http://abruzzi.github.com/images/2012/12/2012-07-05-13.53.22_thumb.jpg" width="644" height="484" /></a></p> <p>11月到12去墨尔本出差了3周，在客户现场用英文做过一个关于西安team日常工作方式的的presentation。这是我第一次出国，也是第一次用英文做presentation，虽然比较简短，但是我很高兴：我在3月底在上项目的时候，我们的BA给我介绍项目情况的时候，我还需要别人翻译。</p> <p><a href="http://abruzzi.github.com/images/2012/12/2012-11-18-11.09.15-2.jpg"><img style="background-image: none; display: inline" title="2012-11-18 11.09.15-2" border="0" alt="2012-11-18 11.09.15-2" src="http://abruzzi.github.com/images/2012/12/2012-11-18-11.09.15-2_thumb.jpg" width="644" height="484" /></a></p> <p>11月之后，终于有一点自己的时间来整理项目中学到的新的JavaScript经验和知识，为我的<a href="http://www.icodeit.org/javascript%E5%86%85%E6%A0%B8/">《JavaScript核心概念及实践》</a>添加了两章的内容(前端MVC和测试)。</p> <p>生活方面，运动量明显减少，整个2012，爬过三次山，第一次是和田彦强夫妇去沣峪口，第二次是和胡凯，王欢，孙曼思等去太平峪，第三次是和team一起去九龙潭。在10月左右给孙曼思买了一张捷安特的山地车，一起出去骑过两次，一次是从绿地到大雁塔，另一次是绿地到草滩，当我们计划骑行秦岭的时候，气温已经冷到不适宜骑行了。平时的话，虽然会和同事们打打乒乓球或者羽毛球，但是运动量都太小。</p> <p><a href="http://abruzzi.github.com/images/2012/12/2012-11-03-11.35.08.jpg"><img style="background-image: none; display: inline" title="2012-11-03 11.35.08" border="0" alt="2012-11-03 11.35.08" src="http://abruzzi.github.com/images/2012/12/2012-11-03-11.35.08_thumb.jpg" width="364" height="484" /></a></p> <p>另一方面，2012年的大部分时间都坚持吃素，下图是孙曼思和我做的豆腐：</p> <p><a href="http://abruzzi.github.com/images/2012/12/Screen-Shot-2012-10-15-at-9.17.41-PM.png"><img style="background-image: none; display: inline" title="Screen Shot 2012-10-15 at 9.17.41 PM" border="0" alt="Screen Shot 2012-10-15 at 9.17.41 PM" src="http://abruzzi.github.com/images/2012/12/Screen-Shot-2012-10-15-at-9.17.41-PM_thumb.png" width="644" height="434" /></a></p> <p>书读了差不多20本，有余华，贾平凹，戴厚英的小说，有些技术相关的，另外一些是历史/政治方面的。因为就我目前所接触到的和所能想到的，技术很难由读书来提升，我更多的是花一些时间去读一些blog或者相对较为简短的文章来学习技术，然后进行一些实践来巩固。</p> <p><a href="http://abruzzi.github.com/images/2012/12/card2-contours.jpg"><img style="background-image: none; display: inline" title="card2-contours" border="0" alt="card2-contours" src="http://abruzzi.github.com/images/2012/12/card2-contours_thumb.jpg" width="644" height="484" /></a></p> <p>最后这张图是上周末我们team的一个idea的初步实现：将墙上的卡用手机扫描，然后将卡号分析出来并同步到服务器，然后向jira查询卡的状态等。我用opencv，花了大概两天，终于可以将数字找到并从卡上抠出，但是当涉及到KNN去识别图片中的数字时，遇到了一点难题，很可能会拖到明年才能完成……</p></p>
]]></content>
  </entry>
  
</feed>
