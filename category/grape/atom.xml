<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grape | I code it]]></title>
  <link href="http://abruzzi.github.com/category/grape/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-01-04T01:26:12+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Grape快速开发API]]></title>
    <link href="http://abruzzi.github.com/2013/08/quick-api-development-by-grape/"/>
    <updated>2013-08-04T10:29:00+10:00</updated>
    <id>http://abruzzi.github.com/2013/08/quick-api-development-by-grape</id>
    <content type="html"><![CDATA[<h3>Grape简介</h3>

<p><a href="http://intridea.github.io/grape">Grape</a>是一个基于Rack的非常轻量级的框架，用于快速的开发API。一般来说，Rails对于单独的API来说，太过于重量级；而Sinatra虽然足够小巧，但是又没有为开发API提供足够的默认支持（如果从可控制性，灵活性上来说，Sinatra可能更好一些，但是如果有专门的更好用的工具，为什么不用呢？）。</p>

<p>安装非常简便：</p>

<p><code>
$ gem install grape
</code></p>

<p>或者使用在自己的Gemfile中，与其他的gem一起搭建API:</p>

<p><code>
gem 'grape'
</code></p>

<h3>为既有系统添加API</h3>

<h4>简单一试</h4>

<p>之前的一篇介绍<a href="http://icodeit.org/2013/05/using-active-record-as-a-standalone-orm/">ActiveRecord在既有系统中使用</a>的文章中，我使用ActiveRecord为既有的数据库visitor中的三个表(visitor, listGroup, listGroupItem)建立了ruby对应的模型。现在我们可以为这些模型包装一组API，以方便客户端（消费者）可以通过web来访问。</p>

<p>```
module MySys</p>

<pre><code>class API &lt; Grape::API
    format :json

    resource :visitors do

        desc "get all visitor information"
        get do
            Visitor.limit(20)
        end

    end
end
</code></pre>

<p>end
```</p>

<p>首先，MySys::API扩展了Grape::API。<code>format</code>定义我们的API会产生JSON格式的输出，resource定义了这一组API是为资源visitors提供的，因此访问API的url为：</p>

<p><code>
http://localhost:9292/visitors/
</code></p>

<p>当然，grape提供一个很方便的设置prefix，可以使得API的路径更有意义:</p>

<p><code>
format :json
prefix "mysys"
</code></p>

<p>url则相应地变为:</p>

<p><code>
http://localhost:9292/mysys/visitors/
</code></p>

<h4>处理参数</h4>

<p>在对参数的处理上，grape也非常灵活，比如接上例，我们想要获取某一个具体的用户的信息：</p>

<p><code>
http://localhost:9292/visitors/8a9d82b13b9786e1013b978766150001
</code></p>

<p>我们可以添加一个新的endpoint：</p>

<p>```
desc "return a visitor"
params do</p>

<pre><code>requires :visitor_uid, :type =&gt; String, :desc =&gt; "visitor id"
</code></pre>

<p>end
route_param :visitor_uid do</p>

<pre><code>get do
    Visitor.find(params[:visitor_uid])
end
</code></pre>

<p>end
```</p>

<p>params中要求，需要一个类型为String的参数visitor_uid。然后在handler中，通过params来引用这个参数的值。</p>

<h4>助手函数(Helper)</h4>

<p>Grape允许开发者将编解码，权限校验等等的通用的操作分离出来，放入助手函数，这些Helper可以被所有的API使用:</p>

<p>```
helpers do</p>

<pre><code>def generate_default_visitor(email, site) 
    {
        :visitor_uid =&gt; SecureRandom.hex,
        :password_expiration =&gt; (Time.now + 60 * 60 * 24),
        :last_used_timestamp =&gt; (Time.now - 60 * 60 * 24),
        :visitor_login_id =&gt; email,
        :site_name =&gt; site
    }
end
</code></pre>

<p>end
```</p>

<p>使用上边定义的助手函数<code>generate_default_visitor</code>：</p>

<p>```
desc "create a visitor"
params do</p>

<pre><code>requires :email, :type =&gt; String, :desc =&gt; "Email address"
requires :site, :type =&gt; String, :desc =&gt; "Site"
</code></pre>

<p>end
post do</p>

<pre><code>attr = generate_default_visitor(params[:email], params[:site])
visitor = Visitor.new attr
visitor.visitor_uid = attr[:visitor_uid]
visitor.save
</code></pre>

<p>end
```</p>

<h3>对API进行测试</h3>

<p>通过Web测试API有非常多的方式，比如通过浏览器的插件(POSTMan)，RSpec，但是我最喜欢，也是最轻便的方式是通过命令行工具curl：</p>

<p><code>
curl http://localhost:9292/visitors/8a9d82b13b9786e1013b978766150001
</code></p>

<p>或者：</p>

<p><code>
curl -H "Content-Type: application/json" -X POST -d "{\"email\":\"jtqiu@tw.com\", \"site\":\"mysys\"}" http://localhost:9292/visitors/
</code></p>

<p>命令行的程序curl是一个非常灵活，强大的工具，可以定制HTTP头信息，User Agent，支持所有的HTTP动词，最重要的是，在命令行很容易将工具们组合在一起，并完成自动化。</p>
]]></content>
  </entry>
  
</feed>
