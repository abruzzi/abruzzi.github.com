<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programmer | I code it]]></title>
  <link href="http://abruzzi.github.com/category/programmer/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-07-28T14:21:22+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何成为一名优秀的程序员？]]></title>
    <link href="http://abruzzi.github.com/2017/07/tips-for-newbies/"/>
    <updated>2017-07-25T16:05:00+08:00</updated>
    <id>http://abruzzi.github.com/2017/07/tips-for-newbies</id>
    <content type="html"><![CDATA[<p>作为一个从业快10年的程序员，我想给新入行的程序员们一些建议。这些建议是我希望自己可以在毕业的时候就读到的，也希望它们可以帮助你成为一个更好的程序员。</p>

<p>简单归纳一下，总共有7条：</p>

<ol>
<li>保持健康</li>
<li>编程之外的爱好</li>
<li>持续学习</li>
<li>正确应对犯错</li>
<li>不要囿于角色</li>
<li>展示你的创意</li>
<li>刻意练习手速</li>
</ol>


<p>下面我来详细说说每一点。</p>

<h2>保持健康</h2>

<blockquote><p>三寸气在千般用，一旦无常万事休</p>

<p>--《金瓶梅》</p></blockquote>

<p>首先要说的当然是健康，脱离的这个本钱，一切都无从谈起。久坐、不运动、睡眠不足、不注意及时补充水分、长期的伏案工作会对健康造成很大的影响，而不幸的是程序员这几样全都占了。很多程序员往往很年轻就已经有了各种各样的疾病：颈椎病、腰椎间盘突出、高血脂/高血压、胆结石、腱鞘炎等等，关于程序员过劳死的新闻更是隔一段时间就来刺激一下我们的神经。</p>

<p>研究表明，长期保持同一姿势（不论坐着还是站着）对身体都有不同程度的害处，而且这种害处是无法事后弥补的。也就是说，如果白天上班坐8个小时，那么就算你下班后去健身房练一个小时也于事无补。这几年很流行的<em>站立式办公</em>也是一样，如果你白天站立时间过久，会对膝关节造成较大的压力，同样会损害健康。比较推荐的方式是，写30-40分钟代码就起来走一走，喝杯水，远眺一会，跟同事聊聊天。</p>

<p>我知道，作为程序员我也常遇到那种写代码写High了连厕所也不想去的时候。不过为了长远的健康，还是要养成良好的习惯。</p>

<h3>戒除不良习惯</h3>

<p>除了长时间保持同一姿势之外，有很多程序员还有各种不良习惯。比如：</p>

<ul>
<li>吸烟</li>
<li>喝酒</li>
<li>嗜糖（碳酸饮料，其他高糖饮料）</li>
</ul>


<p>这些习惯一般都会美其名曰<strong>提神</strong>，大家都知道，程序员加班在业界算是比较常见的，萎靡不振是常态。然而这些号称提神的方法，其实没有一个是真正管用的。这些不良习惯说到底都是一种<em>毒瘾</em>，跟吸食大麻在本质上并无二致。不过好消息是你完全可以戒除这些不良习惯，只需要坚持一段时间，让<em>毒瘾</em>过去就好了（和真正的毒瘾一样，它们更多的是精神依赖，一旦你战胜了自己对它的精神依赖，就可以获得自由）。</p>

<p>我在大学和刚开始工作的前几年，也有烟瘾。写代码写累了就回去办公室外边冒一根，那种一氧化碳中毒带来的短暂的微醺感确实令人有放松的错觉，但是抽完烟回来写代码会感觉更累。而且口中老感觉有异味，咽喉不适，最主要的是精神萎靡，终于有一天我受不了了，决定戒烟（事实上和很多人一样，之前也有过无数次的戒烟）。当烟瘾发作的时候，我就去喝杯水，晚上则站站桩（站完之后口齿生津，神清气爽）。刚开始的3天是最难的，一周之后我就基本可以控制住去抽烟的欲望，然后就越来越轻松，完全感觉不到烟瘾对我的影响了。</p>

<p>碳酸饮料，高糖饮料也是一样。在饮食本来就不充裕的自然界，我们的祖先遇到了富含可以为身体提供能量的糖（比如蜂蜜）自然会大量摄入。这种嗜糖的基因在今天还在不断的产生作用，但是不同的是，我们现在可以很轻松的在食物、饮料中摄入比身体所需<strong>多得多</strong>的糖。这些糖会给健康带来很多问题，比如肥胖，高血糖，冠心病等等。</p>

<p><img src="/images/2017/07/sugar-resized.png" alt="" /></p>

<p>更多时候，我们想要喝饮料更多的是精神上的依赖，也就是上面说到的<em>毒瘾</em>。戒除对糖的依赖比烟和酒要困难一些，因为生活中有很多陷阱，比如酸奶，面包，饼干，水果等等。</p>

<h3>零度可乐的陷阱</h3>

<p>现在香烟的包装上印有焦油含量，有10mg的，有15mg的。焦油含量是影响一支烟口感的重要因素，通常说的“绵”其实是说焦油含量角度，这会让你感觉比较健康。然而陷阱是，一支烟抽完觉得不过瘾，神经感受到的刺激不够强烈，这会驱动你抽第二支，结果吸入的焦油反而更多。本来15mg焦油的一支烟就可以让你过瘾，现在两支10mg的才能达到同样的效果，相当于摄入了20mg。</p>

<p>零度可乐也是一样，那种无糖的有着甜味的添加剂会刺激你对糖的渴求，你需要摄入更多的糖来抵消这种虚幻的渴求 -- 然后变得更不健康。</p>

<p>有人可能会说，没有这些嗜好，那活着有什么意思呢？相信我，当你戒除了这些毒瘾，有了一个健康的体魄，才真正能体会到活着的乐趣。当你为这些嗜好所控制，产生的那种病态的舒适感其实是虚无缥缈的。</p>

<h3>一些建议</h3>

<p>有规律的做一些运动，可以缓解颈椎，腰椎的不适，可以加快新陈代谢的速度，消耗多余的会沉积下来的能量。比如比较容易接触到，也容易上手的运动：</p>

<ul>
<li>瑜伽/普拉提</li>
<li>乒乓球</li>
<li>跳绳</li>
</ul>


<p>选择一个适合自己的运动方式，然后将其培养成一个习惯（比如坚持每周两次瑜伽，或者每天中午打30分钟的乒乓球）。如果这些和工作有冲突的话，比如公司要求长期晚上加班，那你可以考虑换一家公司。</p>

<h2>培养一个编程之外的爱好</h2>

<p>如果让不同的人对程序员打标签并排序，<strong>宅</strong>一定会排在前三。在任何的聚会上，程序员总是很容易被识别出来的：聪明，戴眼镜，话不多，略显闷骚，聊天容易冷场等等。也难怪，长期钻研技术，沉浸在非黑即白的二进制世界，爱刨根问底，这样很容易把天聊死。</p>

<p>我建议新手程序员可以找一个编程之外的爱好，一来可以拓展自己的社交圈，周末可以有个不一样的过法（而不是宅在家里写代码）；二来可以帮助你成为更好的程序员。</p>

<p>你肯定有过这样的经历：一个编程问题一直困扰着你，试了很久都找不到解决方法，结果出去散了会步，或者和别人唠家常，突然脑海里灵光一闪，想到了问题的答案。事实上，我们大脑的工作方式就是如此奇妙，换一个完全不同的上下文就可以让大脑得到很好的休息，而且往往可以产生<code>1+1&gt;2</code>的效果。写代码写累了去听听音乐，或者打一会乒乓球就可以很好的缓解疲劳，甚至可以打开思路，产生新的灵感。</p>

<h3>一些建议</h3>

<p>学习一项与编程无关的技能，比如：</p>

<ul>
<li>乐器（比如吉他，架子鼓）</li>
<li>绘画（素描，水粉，水彩等）或者书法</li>
<li>制作美食</li>
<li>某一项武术（拳击，泰拳，空手道等）</li>
</ul>


<p>这些看似毫不相干的爱好可以帮助大脑休息。另外需要注意的是，你无需真正成为某一项爱好的专家，不要有额外的压力：担心演奏不好、没有绘画天赋等等。没关系，它只是一个爱好而已。</p>

<p><img src="/images/2017/07/drawing-resized.png" alt="" /></p>

<p>我自己就尝试过很多不同的爱好，比如素描、书法等。</p>

<h2>持续学习</h2>

<p>软件开发是一个需要终身学习的行业（其实如果你不想做那种混吃等死的人的话，基本上每个行业都是这样）。我毕业的时候，<code>SSH</code>（Spring Struts Hibernate）是Web开发的主流，<code>jQuery</code>则是前端的新锐。有一些企业开始尝试<code>Adobe</code>的<code>ActionScript</code>，不过这个语言很快就消逝在了人们的视野。基于<code>jQUery</code>，但是融入了<code>MVC</code>理念的<code>Backbone.js</code>提供更高级的抽象能力，成为了开发“大型”前端应用的首选；紧随其后的，大而全的<code>Angular.js</code>则通过内置的双向绑定，依赖注入，完善的测试支持等让前端开发变得和后端开发一样健全；再后来<code>虚拟DOM</code>，<code>Reactive范式</code>的<code>React</code>栈则又一次颠覆了前端的开发方式。虽然现在还不知道下一次的颠覆会在哪里发生，但是可以肯定的是它<strong>一定会发生</strong>。</p>

<p>除了基础框架之外，各种构建工具也是层出不穷，从最早和后端放在一起的<code>maven</code>，<code>rake</code>，到基于<code>NodeJS</code>的<code>grunt</code>，再到<code>gulp</code>，到<code>webpack</code>，最后又回归到<code>npm script</code>。</p>

<p>程序员被裹挟在技术演进的洪流中，不能自已。作为程序员，你不但要非常扎实的掌握基础知识（操作系统原理，计算机网络，数据结构，算法等），还需要有非常强的快速学习能力，以及愿意不断去学习的态度，而后者可能更重要。</p>

<p><img src="/images/2016/02/knowledge-framework.png" alt="" /></p>

<h3>一些建议</h3>

<ul>
<li>读书</li>
<li>通过视频/文本教程等学习新技术</li>
</ul>


<p>建议新手可以每天抽出一个小时来读书，周末可以多读一些。ThoughtWorks有个<a href="http://insights.thoughtworkers.org/reading-radar-2016/">读书雷达</a>，是一个很不错的书单，包括了很多的经典书籍。读书之外，还可以在线学习一些教程，比如<a href="https://tutsplus.com/">Tutorialplus</a>和<a href="https://egghead.io/">Egghead</a>等，都非常值得经常去看看，如果有比较新鲜有趣的技术，不妨自己亲自动手试一试。</p>

<h3>关于英文能力</h3>

<p>毫不夸张的说，英文能力是优秀程序员和普通程序员的华丽分割线。有了好的英文能力，可供你学习的资料库会立刻扩大数百甚至数千倍：海量的优质免费教程，视频。很优秀的中文教程一样，它们都深入浅出，通俗易懂，风趣幽默，只不过中文的会比较少，而且一般总是会滞后于英文版本而已。</p>

<p>英文能力不但可以帮你熟悉各种前端库，CSS框架等的介绍。还可以让你学习世界各国程序员对各种库的测评、框架的使用心得、踩过的坑等等。</p>

<p>我在2012年加入ThoughtWorks的时候，面试时磕磕绊绊的说不出话来。等到6个月试用期结束的时候，已经可以出差去澳洲和客户的OPs谈笑风生了。2013年的8月，在印度普内，我已经可以用英文给来自世界各国的学生讲课。</p>

<p><img src="/images/2017/07/twu33-resized.png" alt="" /></p>

<p>除了更顺畅的和不同文化的人交流，讨论问题之外，可以明显感觉到学习的速度变得更快，更有效率。</p>

<p>我自己实践过的一个比较有效的方法。我每天会花两个小时（早晚各一个小时）看<a href="http://www.australiaplus.com/international/learn-english/">澳洲之音</a>上的视频，我会听写出视频中的每一句话，如果听不清就重复，有的句子可能会重复十遍。听到最后，视频中的每句话我都能听懂，而且能一边听一边写出来。这样坚持了差不多3个月，我基本上就可以听懂客户的需求澄清，开会的时候也可以比较完整的听明白每个人讨论的点。</p>

<p>其实诀窍就是坚持，这3个月中，每天两个小时，我没有一天间断。过了这一关之后，就很容易了，尽量多听多说就好。</p>

<p>另一个提高的方法是翻译书，我更建议你可以更另外一个有经验的同事一起翻译，大家互相监督，也有个照应，比较不容易半途而废。</p>

<h2>正确应对犯错</h2>

<p>斯坦福大学的<a href="https://en.wikipedia.org/wiki/Carol_Dweck">Carol Dweck</a>教授通过一些实验和后续的研究提出了很有名的心智模型（Mindset）理论，简而言之，她发现不同的人们对待失败这件事有着完全不同的态度：有一类人害怕失败，当失败后会变得不能接受，而且容易否定自身并影响进一步的尝试，Dweck教授称这类人为固定型思维模式（Fixed Mindset）；而另一类人则“喜欢”失败，视失败/犯错为学习的一种方式，他们更关注过程而不是结果，Dweck教授称其为成长型思维模式（Growth Mindset）。</p>

<p><img src="/images/2017/07/Growth-v-Fixed-resized.png" alt="" /></p>

<p>Dweck在演讲中提到，通过像成长型思维模式的转变，关注从失败/犯错中学习，人们的潜力可以得到很好的发挥，也更容易获得理想的结果。</p>

<p>很多新人不敢尝试，又不愿意让同事知道自己的不足，这样的态度会导致他更倾向于选择更容易的工作，这样就可以避免暴露自己的不足，久而久之就会形成恶性循环。其实企业对于新人的期望一般都不会很高，对于新人犯错也是有容忍度的，新人要勇于承认自己的不足，勇于尝试新的事物，勇于犯错并从中学习。</p>

<p>承认自己的不足在刚开始是一件很困难的事情，不过再尝试过几次之后，你就会发现其实也没有那么恐怖。你慢慢会喜欢那种不带任何包袱的、全身心聚焦在学习本身上的快乐。</p>

<h2>不要被角色限制</h2>

<p>都梁在《血色浪漫》里有段描述陕北农民的文字：</p>

<blockquote><p>钟跃民惊讶地发现，在如此贫困恶劣的生存状态下，村民们却很少愁眉苦脸，
他们始终很乐观，他们最喜欢谈论的话题是饮食男女。在饮食方面，由于他们没见
过更好的食品，所以坚持认为酸汤饺子和油泼辣子是天下最美味的食品，如果有人
提出世上还有很多更好吃的东西，那大家会一致认为此人太没见过世面，这驴日的
八成是没吃过酸汤饺子，才在这儿胡咧咧.</p></blockquote>

<p>就像酸汤饺子并非天下最美味的食品一样，开发也不是世界上最牛逼的工作。任何一个良好的，健康的产品、项目需要不同的角色共同配合，共同努力。如果仅仅将自己局限在程序员这一角色，时间久了未免会有坐井观天的狭隘。</p>

<p><img src="/images/2015/01/group-resized.png" alt="坐井观天" /></p>

<p>作为程序员，既可以往上游去探索需求的梳理，用户痛点的分析，业务价值的挖掘，又可以向下游如测试的编写，产品的发布，运维监控。视野开拓了，才有可能对产品有整体的了解，也更容易在程序员这个角色上做的更好。</p>

<p>作为新人，能在自己擅长的方面发挥长处当然很好，但是如果仅仅局限在自己擅长的方面则未免太过单薄。如果你在前端非常有经验，那么除了将这些经验和知识分享给别人之外，你还可以向别的角色学习他们擅长的技能，比如向测试学习自动化，SBE等；向后端学习高性能，高可用服务器的技术，数据库设计及优化，API设计等；向DevOps学习运维技能，自动化<code>provision</code>技能等等。</p>

<p>这些不同的技术不但可以让你的视野更加开阔，也可以为自己以后尝试不同的角色和机会打好基础。以我自己为例，我刚工作的时候是一个Java开发，后来开始做产品的前端开发。换了工作后又跑到Linux下用C写服务，再后来加入ThoughtWorks后，正经职位是开发，不过在项目上还兼职过一段时间QA，在有些项目上当UX不在场的时候还可以做些简单的设计，在技术社区当讲师，还在一些客户现场做过咨询顾问。我自己觉得在不同的角色上切换非常有意思，我自己也很享受整个过程。</p>

<h2>展示你的创意</h2>

<p>将一个创意、复杂概念或者想法简洁而准确的描述出来是一个非常重要的能力。我见过太多的程序员都是沉默寡言，讲东西声音又小，又紧张，即使有很好的想法也难以完整的表述出来。</p>

<p>不过这个能力是可以锻炼的，只需要借助原型的制作就可以了：</p>

<ul>
<li>画图</li>
<li>静态原型</li>
<li>纸上原型</li>
</ul>


<p>俗话说，一图胜千言。你只需要学习一些简单的绘画技巧就可以大大提高自己的表述能力。</p>

<p><img src="/images/2017/07/sketch-resized.png" alt="" /></p>

<p>通过用静态页面（HTML/CSS/JS），mock数据等方式，快速的将创意表达出来是程序员的一个优势，你可以用静态数据，数据文件等方式，通过一些简单的代码快速的作出可以做交互的原型，然后通过和用户不断确认的方式来渐进增强，这种做法可以避免太大的浪费，尽早的将客户价值交付。</p>

<p>原型并不局限在草图，可以工作的静态页面，还可以是一个清晰简洁的演讲。基于PPT的原型还可以用来分析目前产品痛点，对比方案的优劣，展示自己的看法等等。</p>

<p>纸上原型是另一种低成本，可供快速交流沟通的原型方式（图片来自我在ThoughtWorks的同事刘海生）：</p>

<p><img src="/images/2016/09/prototype-resized.png" alt="" /></p>

<h2>手速</h2>

<p>关于程序员是否要求很快的手速是一个颇具争议的话题。支持者认为这属于基本功，每个程序员都应该打字都很快；反对者则认为程序员的价值在于思考并解决问题，追求速度快，那还不如招个打字员。我个人的观点是，好的程序员应该有很快的手速（包括打字的速度，但不局限于此）。</p>

<p>我在ThoughtWorks西安办公室组织过很多次提升手速的工作坊，比如<a href="http://icodeit.org/3-pages-in-3-weeks/">三周三页面</a>，<a href="http://icodeit.org/2016/05/practise-in-programming/">闪电计划</a>等。基本原则就是对一个具体的“作业”，不断的重复练习。</p>

<p>最近带两个新人，我给他们布置了一个简单的作业：</p>

<p><img src="/images/2017/07/dribbble-invitation-resized.png" alt="" /></p>

<p>图片来源：<a href="https://dribbble.com/shots/2154223-Day-021-Dribbble-Invitation-Modal">dirbbble.com</a></p>

<p>基本要求是以最快的速度实现这个页面，并有一点微小的交互（比如选择联系人之后的checkbox会显示选中状态，剩余invites的数量减少等）。第一次做他们用了5个多小时（连同搭建环境，安装Node.js，npm包等），第二次用时2个半小时，第三次用时1个半小时，第四次用时50分钟。</p>

<p>对同一个页面的不断练习听起来是在做重复工作，其实可以联系到很多的内容：</p>

<ul>
<li>命令行的熟悉程度</li>
<li>快捷键的使用</li>
<li>搜索引擎的使用</li>
<li>Stackoverflow使用</li>
</ul>


<p>当你真的可以熟极而流的时候，你才有时间来考虑如何优化，比如如何抽取模板工程（这样下次做同样的事情就回快很多），如何精简DOM结构，如何用命令行工具来帮助自己提速等。手速是大前提，没有速度，一切优化都是脑海中的意淫，无法真实落地。</p>

<h2>总结</h2>

<p>要成为一个厉害的程序员，首先当然是要有一个好的身体。此外需要培养一个编程之外的爱好，这样可以让你活的像一个正常人（而不是传统的工科书呆子）。程序员是一个需要不断学习，不断充实的职业，在学习的过程中，英文能力可以帮助你学的更快，更有效，另外正确的应对学习过程中必然会犯的错误，并将每次错误都当成学习的机会。</p>

<p>开发只是软件开发流程中的一环，程序员需要拓展自己的视野，和其他角色一起配合才能保证产品的交付。在日常的开发中，程序员还需要快速、准确的将自己的想法和创意表达出来。最后，更快速的完成手头的工作可以让你有更多的时间来思考，来改进那些低效的工作方式。</p>

<h2>扩展阅读</h2>

<ul>
<li>Carol Dweck教授的演讲<a href="http://open.163.com/movie/2015/3/5/B/MAIP2A8KC_MAIPJJK5B.html">《请相信，你可以进步》</a></li>
<li>Paul Graham的<a href="https://book.douban.com/subject/6021440/">黑客与画家</a></li>
<li><a href="https://medium.com/design-story/if-you-can-draw-these-three-shapes-you-can-draw-the-internet-84d601fa9454">如果你能画这三种基础性状，你就可以画一切</a></li>
<li><a href="http://icodeit.org/2017/01/why-top-programmers-hate-gui/">为什么优秀的程序员喜欢命令行</a></li>
<li><a href="http://icodeit.org/2016/05/practise-in-programming/">刻意练习</a></li>
<li><a href="http://icodeit.org/2016/01/for-those-dev-who-doesnt-want-to-be-a-ux-cannot-be-a-good-consulant/">不想当UX的开发不是好咨询师</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
