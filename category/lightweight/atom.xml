<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lightweight | I code it]]></title>
  <link href="http://abruzzi.github.com/category/lightweight/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2016-09-25T10:46:55+10:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bower as dependencies manager]]></title>
    <link href="http://abruzzi.github.com/2013/10/bower-as-dependencies-manager/"/>
    <updated>2013-10-09T16:38:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/10/bower-as-dependencies-manager</id>
    <content type="html"><![CDATA[<h3>Bower简介</h3>

<h4>Bower安装及简单配置</h4>

<p><a href="http://bower.io/">Bower</a>是一个基于Node.js的依赖管理工具，它是一个npm的包，因此安装十分简单，由于我们需要在所有项目中都可以使用bower，因此将其安装在全局目录下：</p>

<p><code>
$ npm install -g bower
</code></p>

<p>安装完成之后，可以通过<code>bower search</code>来搜索需要的包，比如：</p>

<p><code>
$ bower search underscore
</code></p>

<p>典型的应用场景可能会是这样的，新建一个项目目录，然后运行<code>bower init</code>：</p>

<p><code>
$ mkdir -p listing
$ cd listing
$ bower init
</code>
和Grunt类似，bower会问你一些问题，比如项目名称，项目入口点，作者信息之类：</p>

<p>```
{
  "name": "listing",
  "version": "0.0.0",
  "authors": [</p>

<pre><code>"Qiu Juntao &lt;juntao.qiu@gmail.com&gt;"
</code></pre>

<p>  ],
  "main": "src/app.js",
  "license": "MIT",
  "ignore": [</p>

<pre><code>"**/.*",
"node_modules",
"bower_components",
"test",
"tests"
</code></pre>

<p>  ]
}
```</p>

<p>比如我们需要安装jQuery和underscore.js，则很简单的运行<code>bower install</code>命令即可：</p>

<p><code>
$ bower install jquery
$ bower install underscore
</code></p>

<p>如果需要团队中的其他成员可以在本地恢复我们的环境，需要在bower.json中指定<code>dependencies</code>小节：</p>

<p>```
  "dependencies": {</p>

<pre><code>"jquery": "~2.0.3",
"underscore": "~1.5.2"
</code></pre>

<p>  }
```</p>

<p>所有的JavaScript包都被安装到了本地的<code>bower_components</code>目录下，如果有了bower.json文件，那么即使本地的<code>bower_components</code>目录不存在，或者其中的包内容过期了，那么很容易用<code>bower install</code>将其更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt的几个常用插件]]></title>
    <link href="http://abruzzi.github.com/2013/10/grunt-plugins/"/>
    <updated>2013-10-08T16:42:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/10/grunt-plugins</id>
    <content type="html"><![CDATA[<h3>Grunt的几个常用插件</h3>

<h4>grunt-karma 简介</h4>

<p><a href="https://github.com/karma-runner/grunt-karma">grunt-karma</a>是一个karma的Grunt插件，<a href="http://icodeit.org/2013/10/using-karma-as-the-javascript-test-runner/">上一篇文章</a>中已经介绍了karma的基本用法。这里简单介绍如何在Grunt中使用karma。</p>

<p>首先需要安装grunt-karma插件：</p>

<p><code>
$ npm install grunt-karma --save-dev
</code></p>

<p>然后在Gruntfile.js中加载该插件：</p>

<p><code>
grunt.loadNpmTasks('grunt-karma');
</code></p>

<p>在使用karma之前，需要生成一个karma的配置文件<code>karma.conf.js</code>:</p>

<p><code>
$ karma init karma.conf.js
</code></p>

<p>然后在Gruntfile.js中，加入初始化karma的参数，并指定，karma需要使用<code>karma.conf.js</code>文件作为配置来运行：</p>

<p>```
grunt.initConfig({</p>

<pre><code>karma: {
  unit: {
    configFile: 'karma.conf.js'
  }
}
</code></pre>

<p>});
```</p>

<p>大多数情况下，如果要把karma作为CI的一部分，应该启动单次运行模式:</p>

<p><code>
singleRun: true
</code></p>

<p>这样karma会启动浏览器，运行所有的测试用例，然后退出。</p>

<p>```
grunt.loadNpmTasks('grunt-contrib-jshint');
grunt.loadNpmTasks('grunt-karma');</p>

<p>grunt.registerTask('default', ['jshint', 'karma']);
```</p>

<p><img src="http://abruzzi.github.com/images/2013/10/grunt-karma-resized.png" alt="image" /></p>

<p>注意此处的default后边带了一个任务数组，其中每个任务会按照声明的顺序依次被执行。事实上此处的'default'是后边整个列表的一个别名(alias)。</p>

<h4>grunt-jshint / grunt-uglify / grunt-concat</h4>

<p><a href="https://github.com/gruntjs/grunt-contrib-jshint">grunt-contrib-jshint</a>是一个用于JavaScript静态语法检查的工具，它会帮助开发者在进行较为严格的语法检查。</p>

<p>和其他的Grunt插件一样，它是以一个npm的包的形式发布的，因此安装非常容易:</p>

<p><code>
$ npm install grunt-contrib-jshint --save-dev
</code></p>

<p>然后在Gruntfile.js中加载该插件:</p>

<p><code>
grunt.loadNpmTasks('grunt-contrib-jshint');
</code></p>

<p>即可，类似的还有：用以连接所有JavaScript源代码为一个独立文件的<a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-concat</a>，以及用以最小化JavaScript源码的<a href="https://github.com/gruntjs/grunt-contrib-uglify">grunt-contrib-uglify</a>。</p>

<h4>自定义插件</h4>

<p><a href="https://github.com/gruntjs/grunt-init">grunt-init</a>是一个帮助开发人员快速搭建基于Grunt项目的工具，比如开发jQuery插件，Gruntfile，或者Grunt插件本身。安装方式很简单，我们需要在其他项目也用到grunt-init，因此安装在全局路径下<code>-g</code>:</p>

<p><code>
$ npm install -g grunt-init
</code></p>

<p>开发Grunt插件，我们需要一个基本的模板，将这个模板clone到home下的.grunt-init目录下：</p>

<p><code>
$ git clone git://github.com/gruntjs/grunt-init-gruntplugin.git ~/.grunt-init/gruntplugin
</code></p>

<p>然后新建一个目录，并在该目录下运行：</p>

<p><code>
$ mkdir beautify
$ cd beautify
$ grunt-init gruntplugin
</code></p>

<p>grunt-init会让你回答一些问题，比如插件名称，版本号，github链接等。之后，grunt-init会生成一个基本的模板，开发者只需要完成自己插件的逻辑代码即可。逻辑实现在<code>tasks/&lt;plugin-name&gt;.js</code>中即可。</p>

<p>完成后可以通过<code>npm publish</code>来发布，发布之后，你的插件就可以向上边提到的常用插件那样被其他的开发者使用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Karma运行JavaScript测试]]></title>
    <link href="http://abruzzi.github.com/2013/10/using-karma-as-the-javascript-test-runner/"/>
    <updated>2013-10-08T10:36:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/10/using-karma-as-the-javascript-test-runner</id>
    <content type="html"><![CDATA[<h3>Karma 简介</h3>

<p>Karma是一个JavaScript的测试运行器。事实上，Karma更是一个测试环境，使用Karma可以很方便的的运行测试(方便到你感觉不到它的实际存在)。</p>

<p>一般的TDD的开发流程为：</p>

<ol>
<li>编写测试(一个会失败的case)</li>
<li>运行测试，并看到这个测试失败</li>
<li>编写代码(足够让测试通过的代码)</li>
<li>运行测试，并看到测试通过</li>
<li>重构</li>
<li>运行测试，并看到测试通过</li>
</ol>


<p>然后<strong>如此循环</strong>，而在前端开发中，很长一段时间，这个流程受限于开发环境，比如添加了一个新的JavaScript源文件，开发者需要在HTML中引入相应地文件，以及响应的测试文件，然后刷新页面(有时候还需要清空浏览器缓存)。</p>

<p>在这个过程中，开发者真正关注的就是编写测试，运行测试，编写实现，重构等等，需要不断的重复这个过程。而不是关注如刷新页面，清空缓存，修改HTML对脚本的引用等武馆的工作。</p>

<p>Karma就是这样一个开发环境，开发者指定需要测试的脚本/测试文件，需要运行的浏览器等信息，Karma会在后台自动监控文件的修改，并启动一个浏览器与Karma的服务器连接，这样当源代码或者测试发生修改后，Karma会自动运行测试。</p>

<p>开发者可以指定不同的浏览器，甚至可以跨设备。由于Karma只是一个运行器，你可以使用项目中正在使用的测试框架如Jasmine，QUnit等，甚至可以自定义适配器来支持你自己的测试框架。</p>

<h3>运行Karma</h3>

<p>Karma需要一个配置文件来知道哪些文件需要被加载，需要被监控(当文件内容发生变化时，尝试运行测试)，这个配置文件可以通过Karma自带的参数来生成。</p>

<h4>基本使用</h4>

<p>Karma被实现为一个npm的包，所以可以通过</p>

<p><code>
$ npm install -g karma
</code></p>

<p>安装之后，可以生成karma需要的配置文件：</p>

<p><code>
$ karma init my.conf.js
</code></p>

<p>karma会让你回答一些问题，比如是哪种测试框架，哪些文件需要被测试，哪些浏览器需要被考虑等。生成的配置文件的一个片段是：</p>

<p>```
// base path, that will be used to resolve files and exclude
basePath = '';</p>

<p>// list of files / patterns to load in the browser
files = [
  JASMINE,
  JASMINE_ADAPTER,
  'src/<strong>/*.js',
  'test/</strong>/*spec.js'
];</p>

<p>// web server port
port = 9876;</p>

<p>// browsers
browsers = ['Chrome'];</p>

<p>```</p>

<hr />

<p><strong>更新</strong>
新的配置文件生成脚本会生成更加<strong>模块化</strong>的配置：</p>

<p>```
module.exports = function(config) {
  config.set({</p>

<pre><code>frameworks: ['jasmine'],

files: [
  'src/**/*.js',
  'test/**/*spec.js'
],

port: 9876,

browsers: ['Chrome'],

singleRun: true
</code></pre>

<p>  });
};</p>

<p>```</p>

<hr />

<p>生成配置文件之后，可以通过命令来启动Karma服务器，同时指定使用<code>my.conf.js</code>文件作为配置：</p>

<p><code>
$ karma start my.conf.js
</code></p>

<p><img src="http://abruzzi.github.com/images/2013/10/karma-run-resized.png" alt="image" /></p>

<h4>调试及其他</h4>

<p>很多时候，我们只想要运行某一个suite中的所有测试用例，而不是整个工程，比如在Jasmine中：</p>

<p>```
describe("Controller User", function() {</p>

<pre><code>it("add user", function() {});
it("search users", function() {});
it("delete user", function() {});
</code></pre>

<p>})
```</p>

<p>只需要将<code>describe</code>修改为<code>ddescribe</code>即可，类似的，如果只需要运行某一个测试用例，只需要将<code>it</code>修改为<code>iit</code>即可。</p>

<p>这在运行调试某个测试或者某段特定代码时非常好用。另外，Karma还提供了debugger功能，在测试用例中加入：</p>

<p><code>
debugger;
</code></p>

<p>即可。由于在运行时，karma实际上会启动一个真实地浏览器，所以可以在浏览器的developer-tool中进行实际的调试。需要注意的是，当进入调试模式时，需要启动developer-tool(在Karma启动的那个浏览器窗口中)。</p>

<p><img src="http://abruzzi.github.com/images/2013/10/karma-debug-resized.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
