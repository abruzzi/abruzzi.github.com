<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | I code it]]></title>
  <link href="http://abruzzi.github.com/category/tools/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2015-02-20T23:09:46+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Yahoo pipes 服务做内容聚合 -- ThoughtWorks好声音]]></title>
    <link href="http://abruzzi.github.com/2014/01/use-yahoo-pipe-service-to-aggregate-blogs-you-care/"/>
    <updated>2014-01-01T19:48:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/01/use-yahoo-pipe-service-to-aggregate-blogs-you-care</id>
    <content type="html"><![CDATA[<h3>ThoughtWorks好声音</h3>

<p><a href="http://voice.thoughtworkers.org/">ThoughtWorks好声音</a>是一个聚合网站，内容来自众ThoughtWorker的博客，我们每周会汇聚一次，从众多的博客中挑选出一些P2(软件卓越)相关的主题，然后编为一辑，再分享出去。</p>

<p>但是从近100个博客中找P2相关的内容，这件事本身非常繁琐，如果每周都做这个重复劳动的话，那么软件卓越从何谈起呢？作为以解放人类为己任的程序员，我们绝对不能忍受纯体力的劳动。</p>

<h4>获取博客地址列表</h4>

<p>之前郑晔做了一个<a href="https://jinshuju.net/">金数据</a>的统计，请各位同事把自己的名字和博客地址登记在一个金数据的表单上：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/blog-colllecting.png" alt="image" /></p>

<p>接下来第一步就是把网页上的所有地址取下来，这一步很容易，从金数据的页面上用jQuery找到表格的第二列，然后将其中的文字取出来：</p>

<p>```js</p>

<p>$("table tr td:nth-child(2)").map(function(key, item) {</p>

<pre><code>return $(item).text().trim(); 
</code></pre>

<p>});</p>

<p>```</p>

<p>写到这里突发奇想，能不能用phantomjs去把这个动作自动化？</p>

<p>```js
page.open(url, function (status) {</p>

<pre><code>if (status !== 'success') {
    console.log('Unable to access network');
} else {
    page.injectJs('jquery.js');

    var links = page.evaluate(function() {
        return $("table tr td:nth-child(2)").map(function(key, value) {
            return $(value).text().trim();
        });
    });

    var results = underscore(links).filter(function(item) {
        return item.length &gt; 0; 
    }).map(function(item) {
        if(!new RegExp('^(https|http)').test(item)) {
            return "http://" + item;
        }
        return item;
    });
}
phantom.exit();
</code></pre>

<p>});</p>

<p>```</p>

<p>这样，results数组中就包含了所有的博客链接了，而且有的同事比较懒，提供的URL中不包含<code>http</code>，这段代码还顺手给这样的url添加了头尾。</p>

<p>然后<strong>第二步</strong>，我<strong>想象</strong>着应该再写个脚本，在这个数组中得每个url的后边加上诸如<code>rss</code>或者<code>atom.xml</code>之类的后缀，然后去获取每个博客的rss文件，然后根据这些信息做一些事情。吃午饭的过程中我还在想象这个工具分为几个模块，用什么样的语言来做开发等等细节。</p>

<p>吃完午饭，突然想起来之前熊杰貌似发过一个yahoo pipes生成的rss，我在邮件中翻出来之后，失望的发现我自己的博客都不在里边，想想熊杰貌似还在乌干达援助非洲人民，那就自己动手重新定义一个吧。</p>

<h4>Yahoo pipes 服务</h4>

<p><a href="http://pipes.yahoo.com/pipes/">Yahoo pipes</a>是一个用来定制聚合的服务，只需要定义好数据源(通常是rss/atom)，然后定义一些操作，比如排序，去重，联合等等。最后这个pipe会生成一个结果集，这些特性简直就是为我们这个需求定制的：</p>

<ol>
<li>将博客地址+'/rss' / 博客地址+'/atom.xml' 添加到一个个的fetcher上</li>
<li>将这些fetcher联合起来</li>
<li>将联合的结果排序(按照发表日期/更新日期)</li>
<li>生成最后的rss</li>
</ol>


<p>yahoo pipes提供的编辑器非常简单易用：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/single-pipe.png" alt="image" /></p>

<p>而且在编辑界面底下有一个预览界面：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/single-preview.png" alt="image" /></p>

<p>当然，当定义好完整的pipe之后，我们的ThoughtWorks好声音的源看起来是这样的：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/tvot-pipe-resized.png" alt="image" /></p>

<p>运行这个pipe之后，得到一个preview的界面：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/tvot-pipe-run-resized.png" alt="image" /></p>

<p>最后，可以将这个pipe公开发布，或者将这个pipe生成的rss订阅到阅读器中，比如<a href="http://www.vienna-rss.org/">vienna</a>:</p>

<p><img src="http://abruzzi.github.com/images/2014/01/vienna-resized.png" alt="image" /></p>

<p>然后就可以一目了然的看到最近有哪些ThoughtWorker更新了自己的博客，又有那些是P2相关的，可以<code>理论上</code>减轻我们编辑很多的工作量。</p>

<h4>结论</h4>

<p>手里是锤子的时候，看着周围的东西都像钉子。有时候，那些又酷又炫的技巧/工具可能并非必须。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alfred简介及Alfred扩展编写]]></title>
    <link href="http://abruzzi.github.com/2013/05/create-a-alfred-extension-for-create-sinatra-project/"/>
    <updated>2013-05-18T20:04:00+10:00</updated>
    <id>http://abruzzi.github.com/2013/05/create-a-alfred-extension-for-create-sinatra-project</id>
    <content type="html"><![CDATA[<h3>Alfred简介</h3>

<p><a href="http://www.alfredapp.com/">Alfred</a>是Mac下的一个小工具，可以极大的提高使用计算机的效率。Alfred提供非常丰富的功能集，比如：</p>

<ol>
<li>基本的文件/目录查找功能</li>
<li>应用程序加载器</li>
<li>快速的搜索（google，wikipedia）</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2013/05/alfred-find.png" alt="使用Alfred搜索" /></p>

<h4>powerpack</h4>

<p>Alfred本身是免费的，但是一些高级的功能，如：</p>

<ol>
<li>自定义扩展（<strong>非常有用</strong>）</li>
<li>剪贴板栈/代码片段管理（<strong>非常有用</strong>）</li>
<li>iTunes控制</li>
<li>近期访过的文档</li>
</ol>


<p>提供在<a href="http://www.alfredapp.com/powerpack/">powerpack</a>中，这个功能是要收费的，不过个人觉得绝对的物超所值。这些功能可以极大的提高我对计算机的使用效率，而且剪贴板栈功能可以节省我很多的时间。</p>

<p><img src="http://abruzzi.github.com/images/2013/05/alfred-clipboard.png" alt="image" /></p>

<h3>扩展编写</h3>

<p>经常会使用<a href="http://www.sinatrarb.com/">sinatra</a>编写一些简单的Web应用程序，以用作一些showcase和应用程序的原型搭建。但是由于sinatra并不是一个框架，并不会像rails那样自动生成目录结构等，而每个sinatra应用的目录结构和文件依赖都非常相似，因此完全可以考虑将这个过程自动化。</p>

<p>基本思路是：</p>

<ol>
<li>定义一个目录结构的模板</li>
<li>每次开始一个sinatra工程时，将个模板目录拷贝到新的工程下</li>
<li>一些库依赖的下载（bundle install以及JavaScript库的下载）</li>
<li>在编辑器中打开这个新的目录</li>
</ol>


<h4>一个sinatra工程的原型</h4>

<p>```
$ pwd
/Users/twer/develop/templates/sinatra</p>

<p>$ tree -a
.
├── .rvmrc
├── Gemfile
├── app.rb
├── config.ru
├── public
│   ├── css
│   └── scripts
│       ├── app.js
│       └── libs
└── views
```</p>

<h4>Extension shell script</h4>

<p>```</p>

<h1>create the project folder</h1>

<p>cd ~/develop/ruby &amp;&amp; mkdir -p {query} &amp;&amp; cd {query}</p>

<h1>cp info to folder</h1>

<p>cp -R ~/develop/templates/sinatra/ .</p>

<h1>grab jquery</h1>

<p>curl http://code.jquery.com/jquery.js > public/scripts/libs/jquery.js</p>

<h1>open the project</h1>

<p>/Applications/MacVim.app/Contents/MacOS/Vim -g .
```</p>

<p><img src="http://abruzzi.github.com/images/2013/05/sinatra-ext-result.png" alt="image" /></p>

<p>执行完之后，<code>~/develop/ruby</code>下会生成一个新的目录，即<code>note</code>，这个目录中即为一个可以直接开始开发sinatra应用的工作目录了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install powerline (fancy status line) for vim in Mac OS]]></title>
    <link href="http://abruzzi.github.com/2013/02/install-powerline-fancy-status-line-for-vim-in-mac-os/"/>
    <updated>2013-02-19T10:53:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/02/install-powerline-fancy-status-line-for-vim-in-mac-os</id>
    <content type="html"><![CDATA[<h3>Powerline</h3>

<p><a href="https://github.com/Lokaltog/powerline">powerline</a>会将vim的status line变的非常漂亮，看起来像一个“主流”的编辑器那样，而又不会引入额外的“重量”。基本原理是使用字体将特殊字符展现成特殊形状（如三角形），额外的有一些漂亮的配色。</p>

<h4>效果</h4>

<p><img src="http://abruzzi.github.com/images/2013/02/vim-power-line-resized.png" alt="image" /></p>

<h4>安装</h4>

<p>有几个额外的点需要确保：</p>

<h5>保证你的vim包含了对python的支持</h5>

<p><code>vim --version | grep python</code>的结果应该包含<code>+python</code>，如：</p>

<p><code>
+path_extra -perl +persistent_undo +postscript +printer -profile +python/dyn
</code>
如果没有的话，需要将vim重新编译，比如在Mac OS下：</p>

<p><code>
brew install macvim --env-std --override-system-vim
</code></p>

<h5>安装powerline</h5>

<p>最简单的方式是直接clone到本地，比如：</p>

<p><code>
git clone git://github.com/Lokaltog/powerline.git ~/PowerLine/
</code></p>

<h5>配置.vimrc</h5>

<p>为你的vimrc添加下面的配置：</p>

<p><code>
set rtp+={path_to_powerline}/powerline/bindings/vim
set laststatus=2
set noshowmode
</code></p>

<p>这时，如果你启动vim，应该已经可以看到powerline了，但是有可能有“乱码”的问题，幸运的是，已经有很多的预定义字体。</p>

<h3>Fonts</h3>

<p><a href="https://github.com/Lokaltog/powerline-fonts">这里</a>有许多额外的预定义fonts。选中需要的字体，安装到本地即可（双击字体文件或者拷贝到<code>~/Library/Fonts</code>下）。然后在.vimrc中使用这个字体，比如：</p>

<p><code>
set encoding=utf-8
set guifont=Menlo\ for\ Powerline:h14
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Google Code上的项目迁移到Github]]></title>
    <link href="http://abruzzi.github.com/2013/01/migrate-google-code-to-github/"/>
    <updated>2013-01-13T23:28:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/01/migrate-google-code-to-github</id>
    <content type="html"><![CDATA[<h3>一些闲话</h3>

<p>虽然对开源社区没有任何杰出的贡献，但是我自己在业余时间开发的很多小东西都是开源的，有部分放在google code上，可是除了一个<a href="http://code.google.com/p/stodo/">sTodo</a>有几个用户外，其他的工具几乎都纯属自娱自乐。虽然当时做的时候自己非常投入，会各种YY，假设用户会需要这个功能，会需要那个功能，用户会需要脚本化，自定义插件等等，但是到最后发现只有自己在使用，而再过一段时间，连自己也不会使用了。</p>

<p>我自己托管在google code上的，还算有点用处的项目有三个：</p>

<ul>
<li><a href="http://code.google.com/p/stodo/">sTodo</a> 一个简单的todo管理器</li>
<li><a href="http://code.google.com/p/phoc/">phoc</a> 一个可以用JavaScript脚本化的计算器</li>
<li><a href="http://code.google.com/p/utouch">utouch</a> 一个使用styledTextCtrl的编辑器</li>
</ul>


<p>虽然这种事情发生在几乎每一个喜欢写程序的家伙身上，但是整个过程对自我修炼来说，还是非常有现实意义的，首先专业技能得到了锻炼，而最重要的一点是：需求不是想象出来的！在没有和用户真正仔细的讨论之前，我们的假设和推断往往是错的。</p>

<p>Idea到处都是，有很多很酷且很有挑战的idea，但是它们不一定真的在解决人们的问题。这是一个很值得思考的问题，我最近在尝试组织一个活动，主题以及目标已经确定，上周找胡凯帮我把关，结果发现我又一次的进入了“帮助用户想需求”的老路上了。</p>

<h3>迁移</h3>

<h4>使用svn同步到本地</h4>

<p>根据google code的提示，将code从svn中的checkout到本地：</p>

<p><code>
svn checkout http://phoc.googlecode.com/svn phoc-read-only
</code></p>

<h4>去除掉.svn隐藏目录</h4>

<p>现使用<code>find</code>在当前目录下找到名称为.svn的目录，然后将其删除，这个过程是递归的，即可以清除掉当前目录及所有子目录中的.svn目录:</p>

<p><code>
find . -name ".svn" -type d -exec rm -rf {} \;
</code></p>

<h4>初始化git的repo</h4>

<p><code>
git init
git add .
git ci -m "migrate of project xxx to github"
</code></p>

<p>然后对应的在github上创建repo，创建之后，需要将本地的remote指向github上的repo:</p>

<p><code>
git remote add origin git@github.com:project/project.git
</code></p>

<p>如果本地的master分支没有配置，可以在<code>.git/config</code>中进行配置：</p>

<p>```
[branch "master"]</p>

<pre><code>remote = origin
merge = refs/heads/master
</code></pre>

<p>```</p>

<p>最后将新的commit push到新的repo上即可：</p>

<p><code>
git pull --rebase
git push
</code></p>

<p>我已经把这个工具迁移到了github上<a href="https://github.com/abruzzi">abruzzi</a>，正式告别了google code。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么每个开发人员都应该使用Mac系统]]></title>
    <link href="http://abruzzi.github.com/2013/01/why-every-dev-should-try-mac-os/"/>
    <updated>2013-01-01T22:41:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/01/why-every-dev-should-try-mac-os</id>
    <content type="html"><![CDATA[<h2>为什么每个开发人员都应该使用Mac系统</h2>

<p>在使用了Mac系统大概10个月之后，我已经深深的喜欢上了在其上做开发的体验，精美的界面，人性化的设计，强大的硬件系统，安全而稳定的软件系统，下面我将会用Mac系统和Windows做一个简单的对比，最后会有一些推荐的工具列表。</p>

<h3>Mac系统的一些好处</h3>

<pre><code>1. 系统非常稳定，很少发生死机或者运行缓慢之类问题
2. 即使在休眠之后，也可以飞速(与windows相比)启动
3. 内置的命令行工具非常强大
4. 大量内置的优秀软件
</code></pre>

<p>基本上来说，Mac系统就是一个比Windows的UI漂亮，又比Linux的命令行好用的操作系统。苹果之前的广告说他们的系统是世界级的优秀系统，这一点毫无夸张，Mac OS确实是<strong>世界上最好</strong>的操作系统，没有之一。</p>

<p>个人感觉，使用Mac OS能明显提高开发效率，使得用于解决真正问题的时间提高，而折腾的时间减少，使用windows系统，有很多的时间是在与系统做斗争，或者在等待系统如蜗牛般的加载，说起windows的多任务简直就是笑话，而且有很多无耻的进程在甚至在任务管理器中都不能完全杀死，更不要提病毒之类的话题了。</p>

<p>人们使用计算机的一个典型过程应该是：<em>命令->响应</em>，如是循环，这也是用Mac系统的典型过程。但是使用windows的过程是这样的：<em>命令->等待->响应</em>，或者<strong>命令->死机->…</strong>。我有一台Thinkpad笔记本，4G内存/250G硬盘，Windows 7系统，按说配置还算可以，运行速度也勉强能接受，但是跟同级别硬件配置用来跑Mac系统的话，效率据保守估计会提高32倍。</p>

<p>我觉得对一个合格的开发人员来说，命令行技能，即使不是最重要的，也应该是第二重要的，Mac下的命令行非常好用，有很多shell可供选择，Linux用户可以没有任何学习曲线的转移到Mac的命令行中(bash)，如果觉得默认的bash不顺手，也可以很轻易的切换到zsh，csh之类，很多的Linux知识可以直接用在Mac上，毫无挫败感。</p>

<p><a href="http://http://abruzzi.github.com/images/2013/01/shell-mac.png"><img src="http://abruzzi.github.com/images/2013/01/shell-mac-resized.png" alt="image" /></a></p>

<p>Mac系统中内置了很多的软件，也有一些可以免费获得的优秀软件(下面列表中有很大一部分软件都是免费的)，很多人觉得Mac下什么软件都要收费，我觉得软件收费无可非议，每个软件都倾注了作者(一个或者多个)的大量心血，绝对是合情合理，特别是对于开发人员更是如此(但是，如果开发的软件如windows般垃圾而还要收费的话，那就让人忍不住要骂人了)。</p>

<h3>一些工具的推荐</h3>

<h4>编辑器</h4>

<p>编辑器几乎是开发人员每天接触最多的工具，也最能体现一个开发人员的品味和level，不过在Mac下有所有主流的编辑器，或者其替代品:</p>

<pre><code>1. GVim
2. Emacs
3. Sublime Text 2
</code></pre>

<p><a href="http://abruzzi.github.com/images/2013/01/vim-mac-dev.png"><img src="http://abruzzi.github.com/images/2013/01/vim-mac-dev-resized.png" alt="image" /></a></p>

<h4>IDE</h4>

<p>说实话，我并不喜欢使用IDE，最开始是因为在纯命令行下工作，没有可用的IDE，后来是因为它在一定程度上阻碍了初学者对编译/链接/加载整个过程的理解(所以现在还是不建议初学者直接从IDE开始学习编程)，再后来开始使用jetbrains系列的IDE，除了体积较重，偶尔会有焦点缺失的bug外，基本完美，开发效率会非常高，<strong>世界顶级，没有之一</strong> (下面里表中前两者都要收费，而且价格不菲，但是一分钱一分货):</p>

<pre><code>1. Intellij Idea (Java)
2. Rubymine (Ruby)
3. Eclipse (全能，理论上你可以将器配置成任何语言的IDE)
</code></pre>

<h4>电子书阅读</h4>

<p>电子书阅读我需要一个可以记录上次读到了什么地方，最近打开的书单之类的功能，正好preview都提供，因此也没有专门去找过有没有更好用的:</p>

<pre><code>1. Preview (图片，PDF等都可以preview，很好用)
</code></pre>

<h4>笔记</h4>

<p>个人经验，经常性的将实际开发中遇到的问题，好的设计方式，好的测试用例等记录下来是一个非常好的学习方式，另外在工作的时候，会看到一些非常精彩的文章，可以通过(read it later)记录下来，然后同步到自己的笔记本中，回家或者是休息的时候再看:</p>

<pre><code>1. Evernote
2. Pocket (read it later)
</code></pre>

<h4>同步</h4>

<p>我是一个不折不扣的同步控，我的dropbox中的内容在Mac Book，iPhone和windows机器上都会同步，很多资料找起来会非常方便，比如一些经典的书籍，一些图片素材等，我都会在dropbox中放一份，如果别人需要也很容易分享:</p>

<pre><code>1. Dropbox
2. Box
3. Google Drive
</code></pre>

<p>本来我还打算写一篇比如《将Mac搭建为一个开发环境》之类的文章，然后列提纲的时候发现无物可写，人家本来就是一个高效的开发环境。比如Terminal/Spotlight/Finder，再加上一个编辑器就完全可以启动了。所以就简单的整理了下我常用的软件列表，以供参考。</p>
]]></content>
  </entry>
  
</feed>
