<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opensource | I code it]]></title>
  <link href="http://abruzzi.github.com/category/opensource/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2013-03-27T18:10:41+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install powerline (fancy status line) for vim in Mac OS]]></title>
    <link href="http://abruzzi.github.com/2013/02/install-powerline-fancy-status-line-for-vim-in-mac-os/"/>
    <updated>2013-02-19T10:53:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/02/install-powerline-fancy-status-line-for-vim-in-mac-os</id>
    <content type="html"><![CDATA[<h3>Powerline</h3>

<p><a href="https://github.com/Lokaltog/powerline">powerline</a>会将vim的status line变的非常漂亮，看起来像一个“主流”的编辑器那样，而又不会引入额外的“重量”。基本原理是使用字体将特殊字符展现成特殊形状（如三角形），额外的有一些漂亮的配色。</p>

<h4>效果</h4>

<p><img src="http://abruzzi.github.com/images/2013/02/vim-power-line-resized.png" alt="image" /></p>

<h4>安装</h4>

<p>有几个额外的点需要确保：</p>

<h5>保证你的vim包含了对python的支持</h5>

<p><code>vim --version | grep python</code>的结果应该包含<code>+python</code>，如：</p>

<p><code>
+path_extra -perl +persistent_undo +postscript +printer -profile +python/dyn
</code>
如果没有的话，需要将vim重新编译，比如在Mac OS下：</p>

<p><code>
brew install macvim --env-std --override-system-vim
</code></p>

<h5>安装powerline</h5>

<p>最简单的方式是直接clone到本地，比如：</p>

<p><code>
git clone git://github.com/Lokaltog/powerline.git ~/PowerLine/
</code></p>

<h5>配置.vimrc</h5>

<p>为你的vimrc添加下面的配置：</p>

<p><code>
set rtp+={path_to_powerline}/powerline/bindings/vim
set laststatus=2
set noshowmode
</code></p>

<p>这时，如果你启动vim，应该已经可以看到powerline了，但是有可能有“乱码”的问题，幸运的是，已经有很多的预定义字体。</p>

<h3>Fonts</h3>

<p><a href="https://github.com/Lokaltog/powerline-fonts">这里</a>有许多额外的预定义fonts。选中需要的字体，安装到本地即可（双击字体文件或者拷贝到<code>~/Library/Fonts</code>下）。然后在.vimrc中使用这个字体，比如：</p>

<p><code>
set encoding=utf-8
set guifont=Menlo\ for\ Powerline:h14
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Google Code上的项目迁移到Github]]></title>
    <link href="http://abruzzi.github.com/2013/01/migrate-google-code-to-github/"/>
    <updated>2013-01-13T23:28:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/migrate-google-code-to-github</id>
    <content type="html"><![CDATA[<h3>一些闲话</h3>

<p>虽然对开源社区没有任何杰出的贡献，但是我自己在业余时间开发的很多小东西都是开源的，有部分放在google code上，可是除了一个<a href="http://code.google.com/p/stodo/">sTodo</a>有几个用户外，其他的工具几乎都纯属自娱自乐。虽然当时做的时候自己非常投入，会各种YY，假设用户会需要这个功能，会需要那个功能，用户会需要脚本化，自定义插件等等，但是到最后发现只有自己在使用，而再过一段时间，连自己也不会使用了。</p>

<p>我自己托管在google code上的，还算有点用处的项目有三个：</p>

<ul>
<li><a href="http://code.google.com/p/stodo/">sTodo</a> 一个简单的todo管理器</li>
<li><a href="http://code.google.com/p/phoc/">phoc</a> 一个可以用JavaScript脚本化的计算器</li>
<li><a href="http://code.google.com/p/utouch">utouch</a> 一个使用styledTextCtrl的编辑器</li>
</ul>


<p>虽然这种事情发生在几乎每一个喜欢写程序的家伙身上，但是整个过程对自我修炼来说，还是非常有现实意义的，首先专业技能得到了锻炼，而最重要的一点是：需求不是想象出来的！在没有和用户真正仔细的讨论之前，我们的假设和推断往往是错的。</p>

<p>Idea到处都是，有很多很酷且很有挑战的idea，但是它们不一定真的在解决人们的问题。这是一个很值得思考的问题，我最近在尝试组织一个活动，主题以及目标已经确定，上周找胡凯帮我把关，结果发现我又一次的进入了“帮助用户想需求”的老路上了。</p>

<h3>迁移</h3>

<h4>使用svn同步到本地</h4>

<p>根据google code的提示，将code从svn中的checkout到本地：</p>

<p><code>
svn checkout http://phoc.googlecode.com/svn phoc-read-only
</code></p>

<h4>去除掉.svn隐藏目录</h4>

<p>现使用<code>find</code>在当前目录下找到名称为.svn的目录，然后将其删除，这个过程是递归的，即可以清除掉当前目录及所有子目录中的.svn目录:</p>

<p><code>
find . -name ".svn" -type d -exec rm -rf {} \;
</code></p>

<h4>初始化git的repo</h4>

<p><code>
git init
git add .
git ci -m "migrate of project xxx to github"
</code></p>

<p>然后对应的在github上创建repo，创建之后，需要将本地的remote指向github上的repo:</p>

<p><code>
git remote add origin git@github.com:project/project.git
</code></p>

<p>如果本地的master分支没有配置，可以在<code>.git/config</code>中进行配置：</p>

<p>```
[branch "master"]</p>

<pre><code>remote = origin
merge = refs/heads/master
</code></pre>

<p>```</p>

<p>最后将新的commit push到新的repo上即可：</p>

<p><code>
git pull --rebase
git push
</code></p>

<p>我已经把这个工具迁移到了github上<a href="https://github.com/abruzzi">abruzzi</a>，正式告别了google code。</p>
]]></content>
  </entry>
  
</feed>
