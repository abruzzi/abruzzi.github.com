<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Expect | I code it]]></title>
  <link href="http://abruzzi.github.com/category/expect/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-03-02T10:16:46+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用expect来自动化交互式命令]]></title>
    <link href="http://abruzzi.github.com/2013/12/expect-how-to-make-yourself-more-efficient/"/>
    <updated>2013-12-14T17:40:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/12/expect-how-to-make-yourself-more-efficient</id>
    <content type="html"><![CDATA[<h3>一个实际的场景</h3>

<p>大部分命令行程序都被设计成了可以被管道连接起来的，这样在命令行里可以很容易的讲很多命令串起来，从而完成极为强大的功能。比如：</p>

<p><code>
$ find . -name "*.js" | xargs basename | uniq | wc -l
</code></p>

<p>这个命令会递归的查找当前目录下所有的JavaScript文件，然后用<code>basename</code>去掉可能存在的路径字符串(比如，<code>basename path/to/file</code>会返回<code>file</code>)，然后我们使用uniq来保证查找列表中得每个条目都是唯一的，最后用<code>wc -l</code>来统计行数。</p>

<p>但是并非所有场景都不需要人的干预，比如一个<strong>vpn</strong>链接的建立过程：</p>

<ol>
<li>选择vpn的Group名称</li>
<li>填写用户名</li>
<li>填写密码</li>
<li>等待连接建立，然后程序退出</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2013/12/vpnlogin.png" alt="image" /></p>

<p>像这种需要用户交互操作的程序，是无法通过常规的方式来完成自动化的。如果你经常需要做这样的操作，比如网络环境并不稳定，每天需要连接2-3次，那也是一个非常烦人的事情。</p>

<p><a href="http://expect.sourceforge.net/">Expect</a>正是为这种场景设计的。</p>

<h3>Expect简介</h3>

<p><a href="http://expect.sourceforge.net/">Expect</a>用来自动化这些<code>交互式</code>的命令行程序，比如telnet, ftp等。</p>

<p>Expect脚本非常简单，基本的模式是：</p>

<ol>
<li>启动一个命令A</li>
<li>当命令的输出中包含字符串X的话</li>
<li>输入Y</li>
</ol>


<p>用expect的脚本来表示的话，代码如下：</p>

<p>```</p>

<h1>!/usr/bin/expect</h1>

<p>spawn A
expect "X"
send "Y"
```</p>

<p><code>spawn</code>会启动一个进程，<code>expect</code>会负责和这个进程来交互。如果没有匹配到指定的字符串，则在一个超时时间内expect就会退出。当然可以通过<code>set timeout -1</code>来让程序expect永远等待下去。</p>

<h3>两个小例子</h3>

<h4>自动的登录到vpn服务器上</h4>

<p>```</p>

<h1>!/usr/bin/expect</h1>

<p>set addr "vpn.service.com.au"
set user "qiu.juntao"
set pass "mypassword"</p>

<p>set timeout -1
spawn /opt/cisco/anyconnect/bin/vpn connect $addr</p>

<p>expect "Group: "
send "1\r"</p>

<p>expect "Username: "
send "$user\r"</p>

<p>expect "Password: "
send "$pass\r"</p>

<p>expect ">> state: Connected"
```</p>

<h4>自动通过ssh登录到远程</h4>

<p>另外一个问题是，如果需要这个session保持下去，比如需要自动<code>ssh</code>到一个远程的服务器上，但是又不想每次都输入认证信息，则可以进入<code>inactive</code>模式：</p>

<p>```</p>

<h1>!/usr/bin/expect</h1>

<p>set pass "mypassword"</p>

<p>set timeout -1
spawn ssh user@remote.dev.env.com</p>

<p>expect "Password:"
send "$pass\r"</p>

<p>interact
```</p>

<p>这样就可以完成自动登录了，而expect回一直等到你从ssh中退出。</p>
]]></content>
  </entry>
  
</feed>
