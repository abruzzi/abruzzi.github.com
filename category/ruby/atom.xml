<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | I code it]]></title>
  <link href="http://abruzzi.github.com/category/ruby/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2018-01-14T22:49:01+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[保护你的API（下）]]></title>
    <link href="http://abruzzi.github.com/2016/05/about-session-and-security-api-2/"/>
    <updated>2016-05-12T22:50:00+08:00</updated>
    <id>http://abruzzi.github.com/2016/05/about-session-and-security-api-2</id>
    <content type="html"><![CDATA[<h2>前后端分离之后</h2>

<p>前后端分离之后，在部署上通过一个反向代理就可以实现动静态分离，跨域问题的解决等。但是一旦引入鉴权，则又会产生新的问题。通常来说，鉴权是对于后台API/API背后的资源的保护，即<strong>未经授权的用户不能访问受保护资源</strong>。</p>

<p>要实现这个功能有很多种方式，在应用程序之外设置完善的安全拦截器是最常见的方式。不过有点不够优雅的是，一些不太纯粹的、非功能性的代码和业务代码混在同一个代码库中。</p>

<p>另一方面，各个业务系统都可能需要某种机制的鉴权，所以很多企业都会搭建SSO机制，即<a href="https://en.wikipedia.org/wiki/Single_sign-on">Single Sign-On</a>。这样可以避免人们在多个系统创建不同账号，设置不同密码，不同的超时时间等等。如果SSO系统已经先于系统存在了很久，那么新开发的系统完全不需要自己再配置一套用户管理机制了（一般SSO只会完成<strong>鉴权</strong>中<strong>鉴别</strong>的部分，<strong>授权</strong>还是需要各个业务系统自行处理）。</p>

<p>本文中，我们使用基础设施（反向代理）的一些配置，来完成<strong>保护未授权资源</strong>的目的。在这个例子中，我们假设系统由这样几个服务器组成：</p>

<h3>系统组成</h3>

<p>这个实例中，我们的系统分为三部分</p>

<ol>
<li><code>kanban.com:8000</code>（业务系统前端）</li>
<li><code>api.kanban.com:9000</code>（业务系统后端API）</li>
<li><code>sso.kanban.com:8100</code> （单点登录系统，登陆界面）</li>
</ol>


<p>前端包含了HTML/JS/CSS等资源，是一个纯静态资源，所以本地磁盘即可。后端API则是一组需要被保护的API（比如查询工资详情，查询工作经历等）。最后，单点登录系统是一个简单的表单，用户填入用户名和密码后，如果登录成功，单点登录会将用户重定向到登录前的位置。</p>

<p>我们举一个具体场景的例子：</p>

<ol>
<li>未登录用户访问<code>http://kanba.com:8000/index.html</code></li>
<li>系统会重定向用户到<code>http://sso.kanban.com:8100/sso?return=http://kanba.com:8000/index.html</code></li>
<li>用户看到登录页面，输入用户名、密码登录</li>
<li>用户被重定向回<code>http://kanba.com:8000/index.html</code></li>
<li>此外，<code>index.htm</code>l页面上的<code>app.js</code>对<code>api.kanban.com:9000</code>的访问也得到了授权</li>
</ol>


<h4>环境设置</h4>

<p>简单起见，可以通过修改/etc/hosts文件来设置服务器环境：</p>

<p><code>
127.0.0.1 sso.kanban.com
127.0.0.1 api.kanban.com
127.0.0.1 kanban.com
</code></p>

<h3>nginx及auth_request</h3>

<p>反向代理nginx有一个auth_request的模块。在一个虚拟host中，每个请求会先发往一个内部<code>location</code>，这个内部的<code>location</code>可以指向一个可以做鉴权的Endpoint。如果这个请求得到的结果是200，那么nginx会返回用户本来请求的内容，如果返回401，则将用户重定向到一个预定义的地址：</p>

<p>```
server {</p>

<pre><code>listen 8000;
server_name kanban.com;

root /usr/local/var/www/kanban/;

error_page 401 = @error401;

location @error401 {
    return 302 http://sso.kanban.com:8100/sso?return=$scheme://$http_host$request_uri;
}

auth_request /api/auth;

location = /api/auth {
    internal;

    proxy_pass http://api.kanban.com:9000;

    proxy_pass_request_body     off;

    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    if ($http_cookie ~* "w3=(\w+)") {
        set $token "$1";
    }

    proxy_set_header X-KANBAN-TOKEN $token;
}
</code></pre>

<p>}
```</p>

<p>比如上面这个例子中，<code>auth_request</code>的URL为<code>/api/auth</code>，它是一个内部的location，外部无法访问。在这个<code>locaiton</code>中，请求会被转发到<code>http://api.kanban.com:9000</code>，根据nginx的正则语法，请求将会被转发到<code>http://api.kanban.com:9000/api/auth</code>（我们随后可以看到这个Endpoint的定义）。</p>

<p>我们设置了请求的原始头信息，并禁用了request_body，如果cookie中包含了<code>w3=(\w+)</code>字样，则将这个w3的值抽取出来，并赋值给一个<code>X-KANBAN-TOKEN</code>的HTTP头。</p>

<h4>权限Endpoint</h4>

<p>对应的<code>/api/auth</code>的定义如下：</p>

<p>```java
@RestController
@RequestMapping("/auth")
public class AuthController {</p>

<pre><code>@RequestMapping
public ResponseEntity&lt;String&gt; simpleAuth(@RequestHeader(value="X-KANBAN-TOKEN", defaultValue = "") String token) {
    if(StringUtils.isEmpty(token)) {
        return new ResponseEntity&lt;&gt;("Unauthorized", HttpStatus.UNAUTHORIZED);
    } else {
        return new ResponseEntity&lt;&gt;("Authorized", HttpStatus.OK);
    }
}
</code></pre>

<p>}
```</p>

<p>如果HTTP头上有<code>X-KANBAN-TOKEN</code>且值不为空，则返回200，否则返回401。</p>

<p>当这个请求得到401之后，用户被重定向到<code>http://sso.kanban.com:8100/sso</code></p>

<p>```
error_page 401 = @error401;</p>

<p>location @error401 {</p>

<pre><code>return 302 http://sso.kanban.com:8100/sso?return=$scheme://$http_host$request_uri;
</code></pre>

<p>}
```</p>

<h3>SSO组件（简化版）</h3>

<p>这里用<code>sinatra</code>定义了一个简单的SSO服务器（去除了实际的校验部分）</p>

<p>```ruby
require 'sinatra'
require 'uri'</p>

<p>set :return_url, ''
set :bind, '0.0.0.0'</p>

<p>get '/sso' do</p>

<pre><code>settings.return_url = params[:return]
send_file 'public/index.html'
</code></pre>

<p>end</p>

<p>post '/login' do</p>

<pre><code>credential = params[:credential]
# check credential against database
uri = URI.parse(settings.return_url)
response.set_cookie("w3", {
    :domain =&gt; ".#{uri.host}",
    :expires =&gt; Time.now + 2400,
    :value =&gt; "#{credential['name']}",
    :path =&gt; '/'
})
redirect settings.return_url, 302
</code></pre>

<p>end
```</p>

<p><code>/sso</code>对应的Login Form是：</p>

<p>```html
<form action="/login" method="post"></p>

<pre><code>&lt;input type="text" name="credential[name]" /&gt;
&lt;input type="password" name="credential[password]" /&gt;
&lt;input type="submit"&gt;
</code></pre>

<p></form>
```</p>

<p>当用户提交表单之后，我们只是简单的设置了<code>cookie</code>，并重定向用户到跳转前的URL。</p>

<h3>前端页面</h3>

<p>这个应用的前端应用非常简单，我们只需要将这些静态文件放到<code>/usr/local/var/www/kanban</code>目录下：</p>

<p>```
$ tree /usr/local/var/www/kanban</p>

<p>├── index.html
└── scripts</p>

<pre><code>├── app.js
└── jquery.min.js
</code></pre>

<p>```</p>

<p>其中<code>index.html</code>中引用的<code>app.js</code>会请求一个受保护的资源：</p>

<p>```js
$(function() {</p>

<pre><code>$.get('/api/protected/1').done(function(message) {
    $('#message').text(message.content);
});
</code></pre>

<p>});
```</p>

<p>从下图中的网络请求可以看到重定向的流程：</p>

<p><img src="/images/2016/05/redirection-resized.png" alt="redirection" /></p>

<h3>总结</h3>

<p>本文我们通过配置反向代理，将多个Endpoint组织起来。这个过程可以在应用程序中通过代码实现，也可以在基础设施中通过配置实现，通常来讲，如果可以通过配置来实现的，就尽量将其与负责业务逻辑的代码隔离出来。这样可以保证各个组件的独立性，也可以使得优化和定位问题更加容易。</p>

<p>完整的代码可以在这里下载：</p>

<ul>
<li><a href="https://github.com/abruzzi/fake-sso">Fake SSO</a></li>
<li><a href="https://github.com/abruzzi/spring-security-demo">Spring Security Demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写体面的UI测试]]></title>
    <link href="http://abruzzi.github.com/2015/01/page-object-with-site-prism/"/>
    <updated>2015-01-02T13:58:00+08:00</updated>
    <id>http://abruzzi.github.com/2015/01/page-object-with-site-prism</id>
    <content type="html"><![CDATA[<h3>PageObject简介</h3>

<p><code>PageObject</code>是编写UI测试时的<a href="http://martinfowler.com/bliki/PageObject.html">一种模式</a>。简而言之，你可以将所有知道页面细节的部分放入到这个对象上，对于编写测试的人来说，一个<code>PageObject</code>代表了一个页面，或者页面上的一个区域（比如搜索框，搜索结果，侧边栏等都可能是一个独立的<code>Object</code>）。这样做的好处分为两个方面：</p>

<ol>
<li>封装了所有的实现细节（内部的HTML是如何组织的）</li>
<li>对外的接口非常清晰，从而代码更加语义化</li>
</ol>


<p>我们这里列举一个简单的例子来说明：</p>

<p>我们要测试的场景是：我们在一个搜索应用中，用户输入了<code>ThoughtWorks</code>，我们来判断搜索结果的第一页有<code>10</code>条结果。如果使用原生的<code>capybara</code>，代码大致会如下：</p>

<p>```rb
visit '/search'</p>

<p>fill_in 'Search', :with => 'ThoughtWorks'
click_button '#search'</p>

<p>expect(find('#result').find('.tips')).to have_content("10")
```</p>

<p>首先我们进入<code>/search</code>页面，然后在<code>Search</code>中输入了<code>ThoughtWorks</code>关键字，然后点击<code>#search</code>按钮，最后判断<code>#result .tips</code>下有<code>10</code>的字样。</p>

<p>如果使用<code>PageObject</code>，代码则会变成（<em>这个是伪代码</em>）：</p>

<p>```rb
search = SearchBox.new
result = SearchResult.new</p>

<p>search.type "ThoughtWorks"
expect(result.count).to eq(10)
```</p>

<h3>site_prism 简介</h3>

<p><a href="https://github.com/natritmeyer/site_prism">site_prism</a>是一个构建在<a href="https://github.com/jnicklas/capybara">capybara</a>之上的用于建模<code>Page Object</code>的gem。使用<code>site_prism</code>可以很语义化的编写<code>Page Object</code>，可以使代码非常易读。</p>

<p>位于<code>顶层</code>的<code>Page</code>对象可以拥有多个<code>Section</code>对象，每个<code>Section</code>可以对应页面上的一些逻辑上的块，比如内容区域，边栏等。对于现在流行的<code>SPA</code>，我们只需要一个<code>Page</code>和若干个<code>Section</code>就足够了。</p>

<p>```rb
class MovingHome &lt; SitePrism::Page</p>

<pre><code>set_url 'http://localhost:8100/bundles/moving-home'

element :container, "#tmsCheckout"

section :personal, PersonalSection, "#acc-personal"
section :contact, ContactSection, "#acc-contact"
</code></pre>

<p>end
```</p>

<p><code>set_url</code>方法制定了如何到达当前页，也是<code>webdriver</code>会实际发送请求的<code>URL</code>。页面本身上可以用<code>element</code>方法来声明一个元素，以及该元素对应的CSS选择器，这样就可以通过元素的名称来访问该选择器对应的HTML元素了。</p>

<p>比如上例中的<code>container</code>，我们在测试中就可以这样来访问它：</p>

<p>```rb
@moving = MovingHome.new
@moving.load</p>

<p>@moving.container.should be_visible
```</p>

<p>而对应的<code>section</code>元素，则声明了一个块的名称，块的类和块的选择器。这样我们就可以通过名称来应用该块了：</p>

<p>```rb
@moving.personal.name.set "Juntao"</p>

<p>expect(@moving).to have_personal
expect(@moving).to have_contact</p>

<p>```</p>

<p><code>have_</code>前缀加块的名称，用来判断该块是否可见（比如display: block）。</p>

<h3>一个项目上的实例</h3>

<p>目前项目上有一个页面需要添加一些新的特性，对应的需要添加一些UI测试。之前的所有代码都是面向过程的，代码非常多，重复代码都通过抽成一个函数来组织，无法和实际的页面模块对应起来。因此我使用<code>site_prism</code>做了一些尝试。</p>

<p>业务场景是这样的：用户想要办理移机业务（比如搬家了，相应的宽带/有线电视要办理移机），这时候用户需要填写一些个人信息，联系方式，老地址，新地址等，这样我们就可以联系到他并帮他完成移机。而目前的页面也已经按照这些信息的关联度组织成了这样的形式：</p>

<p><img src="/images/2015/01/moving-home-resized.png" alt="moving home" /></p>

<p>可以看到，页面本身的组织已经比较清晰了，这非常方便我们抽取<code>PageObject</code>：每一个<code>块</code>都可以抽取为一个<code>Section</code>类的子类。</p>

<h4>第一次尝试</h4>

<p>比如对于个人信息这一个块：</p>

<p><img src="/images/2015/01/personal-resized.png" alt="personal" /></p>

<p>这个块包含称呼，姓名，出生日期等几部分，我们可以很容易找到对应的页面元素，并抽取为：</p>

<p>```rb
class PersonalSection &lt; SitePrism::Section</p>

<pre><code>element :myservice, "#personal-my-services"

element :title, "#personal\\.title"
element :first, "#personal\\.firstName"
element :last, "#personal\\.lastName"

element :dob_day, "#personal\\.dobDay"
element :dob_month, "#personal\\.dobMonth"
element :dob_year, "#personal\\.dobYear"

element :summary, ".tms-accordion-summary-content"
element :next, ".tms-btn-next"
</code></pre>

<p>end
```</p>

<p>最直接的使用方法就是直接调用<code>set</code>方法：</p>

<p>```rb
def fulfill_personal</p>

<pre><code>@moving.personal.myservice.set "MINE"
@moving.personal.title.select "Mr"
@moving.personal.first.set "Juntao"
@moving.personal.last.set "Qiu"

@moving.personal.dob_day.select "21"
@moving.personal.dob_month.select "Jan"
@moving.personal.dob_year.select "1985"

@moving.personal.next.click
</code></pre>

<p>end
```</p>

<p>这样在<code>Cucumber</code>测试中就可以写成：</p>

<p>```rb
Given /I am on moving home page/ do</p>

<pre><code>@moving = MovingHome.new
@moving.load
</code></pre>

<p>end</p>

<p>When /I fulfill my personal information/ do</p>

<pre><code>fulfill_personal
</code></pre>

<p>end
```</p>

<h4>面向对象</h4>

<p>这样的代码事实上已经沦为了面向过程的方式了，更好的做法是讲fulfill_personal放入<code>Personal</code>本身中：</p>

<p>```rb
def fulfill(personal)</p>

<pre><code>myservice.set personal["myservice"]
title.select personal["title"]
first.set personal["first"]
last.set personal["last"]
dob_day.select personal["dob_day"]
dob_month.select personal["dob_month"]
dob_year.select personal["dob_year"]

next_button.click
</code></pre>

<p>end
```</p>

<p>这样，外部的使用者只需要调用即可：</p>

<p><code>rb
fixture = YAML::load_file('fixtures/moving.yml')
@moving.personal.fulfill(fixture["personal"])
</code></p>

<p>对应的<code>moving.yml</code>文件定义如下：</p>

<p>```yml
personal:</p>

<pre><code>myservice: "MINE"
title: "Mr"
first: "Juntao"
last: "Qiu"
dob_day: "1"
dob_month: "Jan"
dob_year: "1985"
</code></pre>

<p>```</p>

<h4>Misc</h4>

<p>为了达到视觉效果，UI上通常会有一些延迟的效果。比如点击一个按钮，在100ms之后弹出一个对话框，但是这种效果会导致测试的<code>随机</code>失败。</p>

<p>为了解决这个问题，我们可以通过给元素添加<code>wait_until_</code>前缀来等待。比如我们的测试中，在点击了下一步的按钮之后，预期有一个<code>查看收费详情</code>的对话框出现。根据一般的实现方式，这个对话框是预先写在页面上的，然后在合适的实际通过<code>JavaScript</code>将其显示在页面上（这样我们就不能通过查看该元素<em>是否存在</em>在页面上来编写断言了）。</p>

<p><img src="/images/2015/01/lightbox-resized.png" alt="lightbox" /></p>

<p><code>rb
element :lightbox_view_fees, "#tmsLBViewFees"
</code></p>

<p>```rb
Then /I can see the lightbox View Fees shows up/ do</p>

<pre><code>@moving.wait_until_lightbox_view_fees_visible
</code></pre>

<p>end
```</p>

<h3>最后的结论</h3>

<p>通常，我们的UI测试会和<code>特性描述</code>写在一起，以<code>Cucumber</code>为例，在<code>feature</code>文件中，我们会编写诸如这样的描述：</p>

<p>```rb
Feature: Platinum Move</p>

<pre><code>Scenario: Platinum Move
    Given I am on moving home page
    When I select to move my service "Foxtel from Telstra"
    And I select a "Telstra technician install"
    Then I can see the lightbox "View Fees" shows up
</code></pre>

<p>```</p>

<p>而一个良好的<code>实现</code>，我是说，像<code>feature</code>描述一样清晰的实现，可能是这样的：</p>

<p>```rb
Given /I am on moving home page/ do</p>

<pre><code>@moving = MovingHome.new
@moving.load
</code></pre>

<p>end</p>

<p>When /I select to move my telstra service "([<sup>"]*)"/</sup> do |selected|</p>

<pre><code>setup_data
@moving.service.fulfill selected
</code></pre>

<p>end</p>

<p>Then /I can see the installation form/ do</p>

<pre><code>expect(@moving).to have_move_service
</code></pre>

<p>end</p>

<p>Then /I cannot see the installation form/ do</p>

<pre><code>@moving.move_service.should_not be_visible
</code></pre>

<p>end</p>

<p>And /I select a "([<sup>"]*)"/</sup> do |install|</p>

<pre><code>@moving.move_service.select_install install
</code></pre>

<p>end</p>

<p>Then /I can see the lightbox "([<sup>"]*)"</sup> shows up/ do |name|</p>

<pre><code>@moving.lightbox(name).should be_visible
</code></pre>

<p>end
```</p>

<p>基本上，每个<code>step</code>仅仅对应1行（或者很少的几行）代码，而这些代码背后有一组组织良好的<code>PageObject</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个简单的午餐推荐脚本]]></title>
    <link href="http://abruzzi.github.com/2014/09/simple-idea-and-simple-script/"/>
    <updated>2014-09-18T21:55:00+08:00</updated>
    <id>http://abruzzi.github.com/2014/09/simple-idea-and-simple-script</id>
    <content type="html"><![CDATA[<h3>千古谜题 --- 中午吃啥？</h3>

<p>如果要列出一些日常最频繁的会问/被问的问题的一个列表，<strong><em>吃啥？</em></strong>绝对会排在前三位，对于程序员来说，一样频繁的还有诸如<strong><em>这是谁写的？</em></strong>，<strong><em>这尼玛啥意思啊？</em></strong>之类。</p>

<p><strong>吃啥</strong>作为一个每天都会面对的问题，我们自然而言会想很多办法，比如随大流，其他人去哪儿我们跟着就行，但是这种方法最大的问题是：大部分人其实都没有很好的想法，大家都很迷茫。作为程序员，一个非常直观的想法就是找出一个列表，然后随机/伪随机的从这个列表中拿出一条来作为推荐。</p>

<h4>基本思路</h4>

<p>一个基本的思路是这样的，或者说，要开发的软件应该满足这几个基本的需求</p>

<ol>
<li>维护一个饭店/饭菜的列表</li>
<li>随机的从这个列表中取出一项</li>
<li>每天定时的触发，比如<strong>11:30</strong>准时提醒</li>
<li>这个工具最终要以弹出窗口等方式来提醒</li>
</ol>


<p>饭店/饭菜的列表比较容易，比如一个静态的JSON文件：</p>

<p>```js
[</p>

<pre><code>{
    "name": "关中客大碗面"
},
{
    "name": "王华峰肉夹馍"
},
{
    "name": "傻得帽冒菜"
},
{
    "name": "蒸饺"
},
{
    "name": "樊家肉夹馍"
},
{
    "name": "马奴哈羊肉泡馍"
},
{
    "name": "子午路张记肉夹馍"
},
{
    "name": "东滩水盆"
}
</code></pre>

<p>]</p>

<p>```</p>

<p>然后我们需要一个小程序来读取这段JSON，并已随机/伪随机的方式返回一个推荐：</p>

<p>```ruby</p>

<h1>encoding: UTF-8</h1>

<p>require 'json'</p>

<p>def first</p>

<pre><code>JSON.parse(File.open("food.json").read).shuffle[0]["name"]
</code></pre>

<p>end</p>

<p>puts "今天去吃#{first}吧?"</p>

<p>```</p>

<p>测试一下，将上边这个ruby程序运行几次，可以得到一下结果：</p>

<p>```sh
$ ruby lunch.rb
今天去吃东滩水盆吧?</p>

<p>$ ruby lunch.rb
今天去吃子午路张记肉夹馍吧?</p>

<p>$ ruby lunch.rb
今天去吃傻得帽冒菜吧?</p>

<p>$ ruby lunch.rb
今天去吃马奴哈羊肉泡馍吧?
```</p>

<p>效果不错，最起码它可以在控制台上打印比较随机的一个推荐了。</p>

<h4>界面</h4>

<p>最开始界面当然会考虑用诸如Sinatra做一个Web页面，然后吃饭前大家派代表去摇一下，然后听天由命。但是这样的弊端是不直观，用户需要打开该网站，然后主动的获取信息。</p>

<p>我们更想要的是<strong>推送</strong>的方式来获得这个信息，经过简单的测试，发现Mac系统自带的<code>osascript</code>比较适合，这个工具可以执行苹果的脚本语言<a href="https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html">AppleScript</a>，当然还可以执行<a href="https://developer.apple.com/library/mac/documentation/applescript/conceptual/applescriptx/concepts/osa.html">OSA</a>，不过这篇的重点并不是这个，我们可以在另一篇文件中讨论这个主题。</p>

<p>比如一个很简单的<code>osascript</code>脚本是这样的：</p>

<p><code>applescript
display notification "Hello, world"
</code></p>

<p>在命令行输入：</p>

<p><code>sh
$ osascript hello.osa
</code></p>

<p>来执行这个脚本，这时你会看到一个弹出窗口：</p>

<p><img src="/images/2014/09/hello-osa-resized.png" alt="image" /></p>

<p>可以通过指定title来设置弹出窗口的标题：</p>

<p><code>applescript
display notification "Hello, world" with title "This is Title"
</code></p>

<p><img src="/images/2014/09/hello-osa-with-title-resized.png" alt="image" /></p>

<p>这样我们的实现就比较容易了，一个最简单的版本如下：</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>chisha=<code>ruby lunch.rb</code>
osascript -e "display notification \"${chisha}\" with title \"Chisha?\""
```</p>

<p>首先执行<code>ruby lunch.rb</code>得到一个推荐的饭店，然后将这个饭店名称传入osascript来生成通知：</p>

<p><img src="/images/2014/09/chisha-resized.png" alt="image" /></p>

<h4>定时任务</h4>

<p>有了这个脚本，我们可以很容易的使用<code>crontab</code>将其作为定时任务，比如将上述的脚本保存为<code>lunch.sh</code>，然后定义一个<code>crontab</code>脚本：</p>

<p><code>sh
$ crontab -l
30 11 * * 1-5 /Users/jtqiu/develop/ruby/chisha/lunch.sh
</code></p>

<p>这个脚本会在每周的周一到周五的中午11点30分执行一次，对于<a href="http://en.wikipedia.org/wiki/Cron">crontab的语法</a>请参考此处。</p>

<p>一个直观的图示如下：</p>

<p><img src="/images/2014/09/crontab-syntax.gif" alt="image" /></p>

<p>图片来源(http://www.webenabled.com/sites/default/files/crontab-syntax.gif)</p>

<p>对应的<a href="https://github.com/abruzzi/chisha">代码都放在Github上</a>，而且这个README是我目前写的最详细的一个，:)。</p>
]]></content>
  </entry>
  
</feed>
