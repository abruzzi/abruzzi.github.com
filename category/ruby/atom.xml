<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | I code it]]></title>
  <link href="http://abruzzi.github.com/category/ruby/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2014-12-28T23:33:39+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个简单的午餐推荐脚本]]></title>
    <link href="http://abruzzi.github.com/2014/09/simple-idea-and-simple-script/"/>
    <updated>2014-09-18T21:55:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/09/simple-idea-and-simple-script</id>
    <content type="html"><![CDATA[<h3>千古谜题 --- 中午吃啥？</h3>

<p>如果要列出一些日常最频繁的会问/被问的问题的一个列表，<strong><em>吃啥？</em></strong>绝对会排在前三位，对于程序员来说，一样频繁的还有诸如<strong><em>这是谁写的？</em></strong>，<strong><em>这尼玛啥意思啊？</em></strong>之类。</p>

<p><strong>吃啥</strong>作为一个每天都会面对的问题，我们自然而言会想很多办法，比如随大流，其他人去哪儿我们跟着就行，但是这种方法最大的问题是：大部分人其实都没有很好的想法，大家都很迷茫。作为程序员，一个非常直观的想法就是找出一个列表，然后随机/伪随机的从这个列表中拿出一条来作为推荐。</p>

<h4>基本思路</h4>

<p>一个基本的思路是这样的，或者说，要开发的软件应该满足这几个基本的需求</p>

<ol>
<li>维护一个饭店/饭菜的列表</li>
<li>随机的从这个列表中取出一项</li>
<li>每天定时的触发，比如<strong>11:30</strong>准时提醒</li>
<li>这个工具最终要以弹出窗口等方式来提醒</li>
</ol>


<p>饭店/饭菜的列表比较容易，比如一个静态的JSON文件：</p>

<p>```js
[</p>

<pre><code>{
    "name": "关中客大碗面"
},
{
    "name": "王华峰肉夹馍"
},
{
    "name": "傻得帽冒菜"
},
{
    "name": "蒸饺"
},
{
    "name": "樊家肉夹馍"
},
{
    "name": "马奴哈羊肉泡馍"
},
{
    "name": "子午路张记肉夹馍"
},
{
    "name": "东滩水盆"
}
</code></pre>

<p>]</p>

<p>```</p>

<p>然后我们需要一个小程序来读取这段JSON，并已随机/伪随机的方式返回一个推荐：</p>

<p>```ruby</p>

<h1>encoding: UTF-8</h1>

<p>require 'json'</p>

<p>def first</p>

<pre><code>JSON.parse(File.open("food.json").read).shuffle[0]["name"]
</code></pre>

<p>end</p>

<p>puts "今天去吃#{first}吧?"</p>

<p>```</p>

<p>测试一下，将上边这个ruby程序运行几次，可以得到一下结果：</p>

<p>```sh
$ ruby lunch.rb
今天去吃东滩水盆吧?</p>

<p>$ ruby lunch.rb
今天去吃子午路张记肉夹馍吧?</p>

<p>$ ruby lunch.rb
今天去吃傻得帽冒菜吧?</p>

<p>$ ruby lunch.rb
今天去吃马奴哈羊肉泡馍吧?
```</p>

<p>效果不错，最起码它可以在控制台上打印比较随机的一个推荐了。</p>

<h4>界面</h4>

<p>最开始界面当然会考虑用诸如Sinatra做一个Web页面，然后吃饭前大家派代表去摇一下，然后听天由命。但是这样的弊端是不直观，用户需要打开该网站，然后主动的获取信息。</p>

<p>我们更想要的是<strong>推送</strong>的方式来获得这个信息，经过简单的测试，发现Mac系统自带的<code>osascript</code>比较适合，这个工具可以执行苹果的脚本语言<a href="https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html">AppleScript</a>，当然还可以执行<a href="https://developer.apple.com/library/mac/documentation/applescript/conceptual/applescriptx/concepts/osa.html">OSA</a>，不过这篇的重点并不是这个，我们可以在另一篇文件中讨论这个主题。</p>

<p>比如一个很简单的<code>osascript</code>脚本是这样的：</p>

<p><code>applescript
display notification "Hello, world"
</code></p>

<p>在命令行输入：</p>

<p><code>sh
$ osascript hello.osa
</code></p>

<p>来执行这个脚本，这时你会看到一个弹出窗口：</p>

<p><img src="/images/2014/09/hello-osa-resized.png" alt="image" /></p>

<p>可以通过指定title来设置弹出窗口的标题：</p>

<p><code>applescript
display notification "Hello, world" with title "This is Title"
</code></p>

<p><img src="/images/2014/09/hello-osa-with-title-resized.png" alt="image" /></p>

<p>这样我们的实现就比较容易了，一个最简单的版本如下：</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>chisha=<code>ruby lunch.rb</code>
osascript -e "display notification \"${chisha}\" with title \"Chisha?\""
```</p>

<p>首先执行<code>ruby lunch.rb</code>得到一个推荐的饭店，然后将这个饭店名称传入osascript来生成通知：</p>

<p><img src="/images/2014/09/chisha-resized.png" alt="image" /></p>

<h4>定时任务</h4>

<p>有了这个脚本，我们可以很容易的使用<code>crontab</code>将其作为定时任务，比如将上述的脚本保存为<code>lunch.sh</code>，然后定义一个<code>crontab</code>脚本：</p>

<p><code>sh
$ crontab -l
30 11 * * 1-5 /Users/jtqiu/develop/ruby/chisha/lunch.sh
</code></p>

<p>这个脚本会在每周的周一到周五的中午11点30分执行一次，对于<a href="http://en.wikipedia.org/wiki/Cron">crontab的语法</a>请参考此处。</p>

<p>一个直观的图示如下：</p>

<p><img src="/images/2014/09/crontab-syntax.gif" alt="image" /></p>

<p>图片来源(http://www.webenabled.com/sites/default/files/crontab-syntax.gif)</p>

<p>对应的<a href="https://github.com/abruzzi/chisha">代码都放在Github上</a>，而且这个README是我目前写的最详细的一个，:)。</p>
]]></content>
  </entry>
  
</feed>
