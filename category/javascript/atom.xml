<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | I code it]]></title>
  <link href="http://abruzzi.github.com/category/javascript/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2014-04-12T17:27:48+10:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搭建地图服务器（使用Mapnik）]]></title>
    <link href="http://abruzzi.github.com/2014/04/setup-map-server-by-mapnik/"/>
    <updated>2014-04-12T14:07:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/04/setup-map-server-by-mapnik</id>
    <content type="html"><![CDATA[<h4>渲染引擎Mapnik</h4>

<p><a href="http://icodeit.org/2014/04/intro-map-gis/">上一篇文章</a>中大概介绍了<a href="https://github.com/mapnik">Mapnik</a>，它是一个渲染引擎，一般开发中都会使用他的python的bind做开发。</p>

<p>Mapnik的文档写的比较详细，我们这里只是做一些必要的介绍，详细的细节可以参看Mapnik在<a href="https://github.com/mapnik/mapnik/wiki">Github上的文档</a>。</p>

<p>在Mac下，安装Mapnik十分容易，使用brew即可，注意我们在此处带上<code>--with-postgresql</code>选项，使得Mapnik可以通过PostGIS来访问数据库：</p>

<p><code>sh
brew install mapnik --with-postgresql
</code></p>

<p>安装完成之后，可以通过一个小的python脚本来测试：</p>

<p>```python
import mapnik</p>

<p>map = mapnik.Map(256, 256)
map.background = mapnik.Color('red')
map.zoom_all()</p>

<p>mapnik.render_to_file(map, 'red.png', 'png')
```</p>

<p>这段脚本可以在当前目录下生成一个红色的256x256的小图片。好了，有了渲染引擎，我们需要一些数据来进行渲染了。</p>

<h4>数据源</h4>

<p>最通用的数据格式为Shapefiles，目前有很多的免费地理信息供公共下载，我们可以从<a href="http://metro.teczno.com/">Metro的站点</a>上下载一些小的数据文件。</p>

<p><code>sh
$ wget http://osm-extracted-metros.s3.amazonaws.com/chengdu.osm2pgsql-shapefiles.zip
$ mkdir chengdu
$ cd chengdu
$ unzip chengdu.osm2pgsql-shapefiles.zip
</code>
这样就得到了一组文件：</p>

<p><code>
$ find . -name "*.shp"
./chengdu.osm-line.shp
./chengdu.osm-point.shp
./chengdu.osm-polygon.shp
</code></p>

<p>每一个shp文件都会对应几个其他类型的文件，比如投影信息，属性表等。仅仅查看shp的话，有表示所有点的文件chengdu.osm-line.shp，又表示所有线的chengdu.osm-line.shp，以及表示所有面（区域）的chengdu.osm-polygon.shp文件。</p>

<p>有了这些文件，我们就可以做一些测试了，比如我们首先加载所有的线条，并根据这些线条生成一个图层：</p>

<p>```python
import mapnik</p>

<p>map = mapnik.Map(800, 800)
map.background = mapnik.Color('#ffffff')</p>

<p>style = mapnik.Style()
rule = mapnik.Rule()</p>

<p>point_symbolizer = mapnik.PointSymbolizer()
rule.symbols.append(point_symbolizer)</p>

<p>style.rules.append(rule)</p>

<p>map.append_style('default', style)</p>

<p>ds_point = mapnik.Shapefile(file='chengdu.osm-point.shp')
point = mapnik.Layer('point')
point.datasource = ds_point
point.styles.append('default')</p>

<p>map.layers.append(point)
map.zoom_all()</p>

<p>mapnik.render_to_file(map, 'chengdu.png', 'png')
```</p>

<p>可以得到：</p>

<p><img src="/images/2014/04/chengdu-point.png" alt="points" /></p>

<p>这里介绍一下Mapnik中的一些概念：一个Map可以包含若干个层（Layer），每个层可以独立着色，即可以为每个层定制样式（Style），每个样式由若干个规则组成（Rule）。每个规则由是由若干个符号定制。</p>

<p><img src="/images/2014/04/chengdu-line.png" alt="lines" /></p>

<p>如果将两者重叠，则可以得到：</p>

<p><img src="/images/2014/04/chengdu-point-and-line.png" alt="lines" /></p>

<p>```python
polygon_symbolizer = mapnik.PolygonSymbolizer(mapnik.Color('#c8102e'))
polygon_rule.symbols.append(polygon_symbolizer)</p>

<p>ds_polygon = mapnik.Shapefile(file='chengdu.osm-polygon.shp')
polygon = mapnik.Layer('polygon')
polygon.datasource = ds_polygon
polygon.styles.append('polygon')</p>

<p>map.layers.append(polygon)
```</p>

<p><img src="/images/2014/04/chengdu-polygon.png" alt="image" /></p>

<p>将这三个层叠加在一起，会得到最终的结果：</p>

<p><img src="/images/2014/04/chengdu-point-and-line-and-polygon.png" alt="lines" /></p>

<h4>数据转化</h4>

<p>在进一步之前，我们需要将数据存储在数据库中。我们可以将shapefile通过转化存入到数据库中。PostGIS本身自带了一个用于此作用的工具：<code>shp2pgsql</code>。可以通过这个工具来先将shapefile导入到数据库中。也可以直接导入别的开放数据，比如很多OSM格式的数据源，我们此处仅仅简单的从别的数据源将OSM格式的数据下载并导入到PostGIS中。</p>

<p>创建数据库<code>chengdu</code>:</p>

<p>```sh
$ createdb chengdu -O gis -E UTF8 -e
CREATE DATABASE chengdu OWNER gis ENCODING 'UTF8';</p>

<p>$ psql -U gis -d chengdu
```</p>

<p>登陆PostGres，然后为数据库<code>chengdu</code>启动PostGIS扩展：</p>

<p><code>sql
-- Enable PostGIS (includes raster)
CREATE EXTENSION postgis;
-- Enable Topology
CREATE EXTENSION postgis_topology;
-- fuzzy matching needed for Tiger
CREATE EXTENSION fuzzystrmatch;
-- Enable US Tiger Geocoder
CREATE EXTENSION postgis_tiger_geocoder;
</code></p>

<p><code>sh
$ wget http://osm-extracted-metros.s3.amazonaws.com/chengdu.osm.bz2
$ bunzip2 -d chengdu.osm.bz2
$ osm2pgsql -U gis -d chengdu -s -S ./default.style chengdu.osm
</code></p>

<p>这个命令将chengdu.osm导入到了名称为<code>chengdu</code>的数据库中。</p>

<p>可以通过SQL命令查看其中的数据：</p>

<p><code>sql
select ST_Extent(ST_Transform(way,4326)) from planet_osm_roads;
</code></p>

<p>结果如下：</p>

<p>```</p>

<pre><code>                            st_extent                                 
</code></pre>

<hr />

<p> BOX(103.564165069794 30.3634139134986,104.554549945024 30.9869936005376)
(1 row)
```</p>

<h4>WMS服务器</h4>

<p>生成图片之后，我们还需要将这些图片切成瓦片，然后公开给外部以便使用。Mapnik提供了切图的功能，并且还提供一个实现了<a href="https://github.com/mapnik/OGCServer">WMS协议的服务器</a>，以便使用。</p>

<p>安装这个OGCServer服务器非常容易：</p>

<p><code>sh
$ git clone git@github.com:mapnik/OGCServer.git
$ cd OGCServer
$ sudo python setup.py install
</code></p>

<p>但是OGCServer的启动，需要一个配置XML配置文件，这个配置文件可以由Mapnik提供的工具集生成：</p>

<p><code>sh
$ svn co http://svn.openstreetmap.org/applications/rendering/mapnik/
</code></p>

<p>这个svn仓库中包含了众多的小工具，generate_xml.py用于生成Mapnik的样式文件，generate_image.py用于生成图片，generate_tiles.py用于生成众多的瓦片。</p>

<p>此处我们将使用<code>generate_xml.py</code>来创建一个地图样式文件，</p>

<p><code>sh
$ cd svn.openstreetmap.org/applications/rendering/mapnik/
$ ./generate_xml.py osm.xml chengdu.xml --dbname chengdu --user gis --accept-none
</code></p>

<p>generate_xml.py根据osm.xml作为模板，生成<code>chengdu.xml</code>。这个文件即可用于测试OGCServer：</p>

<p><code>sh
$ OGCServer chengdu.xml
Listening at 0.0.0.0:8000....
</code></p>

<p>然后在浏览器中查看：</p>

<p><img src="/images/2014/04/ogcserver-localhost-resized.png" alt="ogcserver" /></p>

<h4>使用OpenLayers测试</h4>

<p>有了一张图片，那么我们就需要有更多的图片组成的瓦片，这就需要使用引入GIS的前端利器OpenLayers了：</p>

<p>```
$(function() {</p>

<pre><code>var map, layer;
map = new OpenLayers.Map('map', {});

layer = new OpenLayers.Layer.WMS('Tile Cache', 
    'http://localhost:8000/?', {
        layers: '__all__',
        format: 'image/png'
    });

map.addLayer(layer);

if (!map.getCenter()) {
    map.zoomToMaxExtent();
}
</code></pre>

<p>});
```</p>

<p><img src="/images/2014/04/openlayers-chengdu-resized.png" alt="openlayers" /></p>

<p><img src="/images/2014/04/openlayers-chengdu-detail-resized.png" alt="openlayers" /></p>

<p>应该注意的是，此处在OpenLayers中使用了来自与OSM导入的数据，而并非Shapefile中的数据（Shapefile中仅有三个层次，point, line, polygon）。而OSM的数据则丰富的多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何测试AngularJS中的Service]]></title>
    <link href="http://abruzzi.github.com/2014/01/how-to-test-service-in-angularjs/"/>
    <updated>2014-01-04T14:22:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/01/how-to-test-service-in-angularjs</id>
    <content type="html"><![CDATA[<h3>Service的典型示例</h3>

<p>在AngularJS中，Service都是单例的实体，通常会将Service作为向后台交互的数据提供者，所有的需要数据的组件只需要依赖于这个Service即可。</p>

<p>```js</p>

<p>var app = angular.module('MyApp', []);</p>

<p>app.factory('SearchSettingService',</p>

<pre><code>['$http', '$q', function($http, $q) {
return {
    setting: function() {
        var deferred = $q.defer();

        $http.get('/settings.json').success(function(result) {
            deferred.resolve(result);
        }).error(function(result) {
            deferred.reject("network error");
        });

        return deferred.promise;
    }
};
</code></pre>

<p>}]);</p>

<p>```</p>

<h4>$httpBackend</h4>

<p>测试的时候，我们不需要真实的发送HTTP请求来获取数据。如果可以只测试Service的逻辑，当发送请求时，我们将这个请求拦截下来，然后返回一个预定义好的数据即可：</p>

<p>```js
it('should have settings from http request', function() {</p>

<pre><code>var result;
var expected = {
    "period": "day",
    "date": "Sat Dec 21 12:56:53 EST 2013",
};

httpBackend.expectGET('/settings.json').respond(expected);

var promise = settingService.setting();
promise.then(function(data) {
    result = data;
});

httpBackend.flush();

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>$httpBackend是AngularJS提供的一个测试用的服务，可以在spec中注入进来：</p>

<p>```js
beforeEach(function() {</p>

<pre><code>module('services');

inject(function(SearchSettingService, $httpBackend) {
    settingService = SearchSettingService;
    httpBackend = $httpBackend;
});
</code></pre>

<p>});
```</p>

<p><code>httpBackend</code>服务有一些很方便测试的方法：</p>

<p><code>js
httpBackend.expectGET(url).respond(data);
httpBackend.expectPOST(url, param).respond(data);
</code></p>

<p>设置之后，当调用<code>httpBackend.flush</code>时，AngularJS会调用这个setup，发送的请求会被之前的setup拦截并返回，这样service中的数据就被填充好了。</p>

<h4>Service测试的模板</h4>

<p>或者说，当测试一个Service时，我们应该测那些方面呢？</p>

<ol>
<li>正常流程，一个完整的处理过程</li>
<li>异常处理，如果服务器出错了，程序需要如何反馈？</li>
<li>其他异常情况</li>
</ol>


<p>正常流程很容易，在调用service提供的方法之后，在获得的promise对象上调用then方法来填充一个数据即可，然后调用<code>httpBackend.flush()</code>来<strong>发送</strong>请求，最后验证数据的格式/内容是否正确。</p>

<p>这个测试的主要目的是验证当调用service的方法时，service真实的发送了一个http请求：</p>

<p>```js
it('should have settings from http request', function() {</p>

<pre><code>var result;
var expected = {
    "period": "day",
    "date": "Sat Dec 21 12:56:53 EST 2013",
};

httpBackend.expectGET('/settings.json').respond(expected);

var promise = settingService.setting();
promise.then(function(data) {
    result = data;
});

httpBackend.flush();

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>对于异常的情况，比如服务器返回了错误，如<code>500</code>，那么最低程度，程序应该可以处理这个异常：</p>

<p>```js
it("should throw error when network expection", function() {</p>

<pre><code>var result, error;
httpBackend.expectGET('/settings.json').respond(500);

var promise = settingService.setting();
promise.then(function(data) {
    result = data;
}, function(data) {
    error = data;
});

httpBackend.flush();

expect(result).toBeUndefined();
expect(error).toEqual("network error");
</code></pre>

<p>});
```</p>

<h4><em>服务器</em> moco</h4>

<p><a href="https://github.com/dreamhead/moco">moco</a>是同事<a href="http://dreamhead.blogbus.com/">郑晔</a>开发的一个测试框架/工具，基本上来说，moco是一个用来集成测试的用的HTTP服务器。</p>

<p>你可以通过API方式或者启动moco服务器的方式来使用它，我比较喜欢将moco作为一个独立的服务器来使用：</p>

<p><code>sh
java -jar moco-runner-0.9-standalone.jar start -p 12306 -c moco.conf.json
</code></p>

<p>比如<code>moco.conf.json</code>中定义了一下规则：</p>

<p>```js
[</p>

<pre><code>{
    "request": {
        "method": "post",
        "uri": "/resource"
    },
    "response": {
        "status": 201,
        "text": "resource has been created"
    }
},
{
    "request": {
        "uri": "/resource"
    },
    "response": {
        "status": 200,
        "file": "resources.json"
    }
}
</code></pre>

<p>]
```</p>

<p>则启动moco的服务器之后，所有发往<code>/resource</code>的<code>post</code>请求都会得到</p>

<p><code>
201
resource has been created
</code></p>

<p>的HTTP响应，这个功能在前端开发越来越独立的情况下变得非常好用。我最近在有很多小项目中都在尝试moco，非常的好用，后边会有相关的博客专门介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何测试AngularJS中的Controller]]></title>
    <link href="http://abruzzi.github.com/2013/12/how-to-test-controller-in-angularjs/"/>
    <updated>2013-12-28T17:40:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/12/how-to-test-controller-in-angularjs</id>
    <content type="html"><![CDATA[<h3>AngularJS中的一个典型的Controller</h3>

<p>在AngularJS中，Controller主要用于hold一些跟view的有关的状态，以及数据模型，比如界面上某些元素是否展示，以及展示那些内容等。通常来说，Controller会依赖与一个Service来提供数据：</p>

<p>```js
app.controller('EventController', ['$scope', 'EventService',</p>

<pre><code>function($scope, EventService) {
    EventService.getEvents().then(function(events) {
        $scope.events = events;
    });
}]);
</code></pre>

<p>```</p>

<p>而service本身则需要通过向后台服务发送请求来获取数据：</p>

<p>```js
app.factory('EventService', ['$http', '$q',</p>

<pre><code>function($http, $q) {
    return {
        getEvents: function() {
            var deferred = $q.defer();

            $http.get('/events.json').success(function(result) {
                deferred.resolve(result);
            }).error(function(result) {
                deferred.reject(result);
            });

            return deferred.promise;
        }
    };
}]);
</code></pre>

<p>```</p>

<p>通常的做法是返回一个<a href="http://docs.angularjs.org/api/ng.$q">promise</a>对象，然后当数据准备完整之后，controller的then会被执行。</p>

<p>那么对于这种情况（在AngularJS中，算是一个非常典型的场景），我们如何进行单元测试呢？</p>

<h3>测试依赖与Service的Controller</h3>

<p>通常来讲，在单元级别的测试中，我们肯定不希望Service真正的发送请求，这样就变成了集成测试，而且前端的开发完全依赖与后台的开发进度/稳定程度等。</p>

<p>所以我们需要做一个假的Service，这个假的Service仅仅在测试中存在：</p>

<p>```js</p>

<p>var app = angular.module('MyApp');</p>

<p>describe("EventController", function() {</p>

<pre><code>var scope, q;
var controllerFactory;
var mockSerivce = {};

var events = ["Event1", "Event2", "Event3"];

beforeEach(function() {
    module("MyApp");
    inject(function($rootScope, $controller, $q) {
        controllerFactory = $controller;
        scope = $rootScope.$new();
        q = $q;
    });
});

beforeEach(function() {
    var deferred = q.defer();
    deferred.resolve(events);
    mockSerivce.getEvents = jasmine.createSpy('getEvents');
    mockSerivce.getEvents.andReturn(deferred.promise);
});

function initController() {
    return controllerFactory('EventController', {
        $scope: scope,
        EventService: mockSerivce
    });
}

it("should have a events list", function() {
    initController();
    scope.$digest();
    expect(scope.events.length).toEqual(3);
    expect(scope.events).toEqual(events);
});
</code></pre>

<p>});
```</p>

<p>此处有很多值得注意的事情：</p>

<h4>在何处实例化Controller</h4>

<p>不要在注入<code>beforeEach</code>中初始化Controller，很多示例中都会在注入了<code>$controller</code>之后紧接着实例化Controller，如果Controller有多个外部的依赖的话，那么在<code>beforeEach</code>中的代码将越来越多，而且读每一个测试用例时会有一些疑惑。</p>

<p>一个好的做法是将依赖注入到<code>describe</code>中的临时变量中，然后将初始化的动作延后到一个函数中：</p>

<p>```js
function initController() {</p>

<pre><code>return controllerFactory('EventController', {
    $scope: scope,
    EventService: mockSerivce
});
</code></pre>

<p>}
```</p>

<h4>如何mock一个service</h4>

<p>由于在AngularJS中，Service一般会返回一个<a href="http://docs.angularjs.org/api/ng.$q">promise</a>对象。因此在测试时需要有一些技巧来绕过：</p>

<p>```js
var events = ["Event1", "Event2", "Event3"];</p>

<p>beforeEach(function() {</p>

<pre><code>var deferred = q.defer();
deferred.resolve(events);
mockSerivce.getEvents = jasmine.createSpy('getEvents');
mockSerivce.getEvents.andReturn(deferred.promise);
</code></pre>

<p>});
```</p>

<p>这样，当使用注入<code>EventService.getEvents().then(callback)</code>的地方就可以访问到此处的promise对象了。</p>

<p>如果添加了新的用例，</p>

<p>```js
app.controller('EventController', ['$scope', 'EventService',</p>

<pre><code>function($scope, EventService) {
    EventService.getEvents().then(function(events) {
        $scope.events = events;
        $scope.recentEvent = $scope.events[0];
    });
}]);
</code></pre>

<p>```</p>

<p>则在用例开始完成创建Controller的动作即可：</p>

<p>```js
it("should have a recent event", function() {</p>

<pre><code>initController();
scope.$digest();
expect(scope.recentEvent).toEqual("Event1");
</code></pre>

<p>});
```</p>

<p>完整的代码<a href="https://github.com/abruzzi/angularjs-controller-demo">请看此处</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bower as dependencies manager]]></title>
    <link href="http://abruzzi.github.com/2013/10/bower-as-dependencies-manager/"/>
    <updated>2013-10-09T16:38:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/10/bower-as-dependencies-manager</id>
    <content type="html"><![CDATA[<h3>Bower简介</h3>

<h4>Bower安装及简单配置</h4>

<p><a href="http://bower.io/">Bower</a>是一个基于Node.js的依赖管理工具，它是一个npm的包，因此安装十分简单，由于我们需要在所有项目中都可以使用bower，因此将其安装在全局目录下：</p>

<p><code>
$ npm install -g bower
</code></p>

<p>安装完成之后，可以通过<code>bower search</code>来搜索需要的包，比如：</p>

<p><code>
$ bower search underscore
</code></p>

<p>典型的应用场景可能会是这样的，新建一个项目目录，然后运行<code>bower init</code>：</p>

<p><code>
$ mkdir -p listing
$ cd listing
$ bower init
</code>
和Grunt类似，bower会问你一些问题，比如项目名称，项目入口点，作者信息之类：</p>

<p>```
{
  "name": "listing",
  "version": "0.0.0",
  "authors": [</p>

<pre><code>"Qiu Juntao &lt;juntao.qiu@gmail.com&gt;"
</code></pre>

<p>  ],
  "main": "src/app.js",
  "license": "MIT",
  "ignore": [</p>

<pre><code>"**/.*",
"node_modules",
"bower_components",
"test",
"tests"
</code></pre>

<p>  ]
}
```</p>

<p>比如我们需要安装jQuery和underscore.js，则很简单的运行<code>bower install</code>命令即可：</p>

<p><code>
$ bower install jquery
$ bower install underscore
</code></p>

<p>如果需要团队中的其他成员可以在本地恢复我们的环境，需要在bower.json中指定<code>dependencies</code>小节：</p>

<p>```
  "dependencies": {</p>

<pre><code>"jquery": "~2.0.3",
"underscore": "~1.5.2"
</code></pre>

<p>  }
```</p>

<p>所有的JavaScript包都被安装到了本地的<code>bower_components</code>目录下，如果有了bower.json文件，那么即使本地的<code>bower_components</code>目录不存在，或者其中的包内容过期了，那么很容易用<code>bower install</code>将其更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt的几个常用插件]]></title>
    <link href="http://abruzzi.github.com/2013/10/grunt-plugins/"/>
    <updated>2013-10-08T16:42:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/10/grunt-plugins</id>
    <content type="html"><![CDATA[<h3>Grunt的几个常用插件</h3>

<h4>grunt-karma 简介</h4>

<p><a href="https://github.com/karma-runner/grunt-karma">grunt-karma</a>是一个karma的Grunt插件，<a href="http://icodeit.org/2013/10/using-karma-as-the-javascript-test-runner/">上一篇文章</a>中已经介绍了karma的基本用法。这里简单介绍如何在Grunt中使用karma。</p>

<p>首先需要安装grunt-karma插件：</p>

<p><code>
$ npm install grunt-karma --save-dev
</code></p>

<p>然后在Gruntfile.js中加载该插件：</p>

<p><code>
grunt.loadNpmTasks('grunt-karma');
</code></p>

<p>在使用karma之前，需要生成一个karma的配置文件<code>karma.conf.js</code>:</p>

<p><code>
$ karma init karma.conf.js
</code></p>

<p>然后在Gruntfile.js中，加入初始化karma的参数，并指定，karma需要使用<code>karma.conf.js</code>文件作为配置来运行：</p>

<p>```
grunt.initConfig({</p>

<pre><code>karma: {
  unit: {
    configFile: 'karma.conf.js'
  }
}
</code></pre>

<p>});
```</p>

<p>大多数情况下，如果要把karma作为CI的一部分，应该启动单次运行模式:</p>

<p><code>
singleRun: true
</code></p>

<p>这样karma会启动浏览器，运行所有的测试用例，然后退出。</p>

<p>```
grunt.loadNpmTasks('grunt-contrib-jshint');
grunt.loadNpmTasks('grunt-karma');</p>

<p>grunt.registerTask('default', ['jshint', 'karma']);
```</p>

<p><img src="http://abruzzi.github.com/images/2013/10/grunt-karma-resized.png" alt="image" /></p>

<p>注意此处的default后边带了一个任务数组，其中每个任务会按照声明的顺序依次被执行。事实上此处的'default'是后边整个列表的一个别名(alias)。</p>

<h4>grunt-jshint / grunt-uglify / grunt-concat</h4>

<p><a href="https://github.com/gruntjs/grunt-contrib-jshint">grunt-contrib-jshint</a>是一个用于JavaScript静态语法检查的工具，它会帮助开发者在进行较为严格的语法检查。</p>

<p>和其他的Grunt插件一样，它是以一个npm的包的形式发布的，因此安装非常容易:</p>

<p><code>
$ npm install grunt-contrib-jshint --save-dev
</code></p>

<p>然后在Gruntfile.js中加载该插件:</p>

<p><code>
grunt.loadNpmTasks('grunt-contrib-jshint');
</code></p>

<p>即可，类似的还有：用以连接所有JavaScript源代码为一个独立文件的<a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-concat</a>，以及用以最小化JavaScript源码的<a href="https://github.com/gruntjs/grunt-contrib-uglify">grunt-contrib-uglify</a>。</p>

<h4>自定义插件</h4>

<p><a href="https://github.com/gruntjs/grunt-init">grunt-init</a>是一个帮助开发人员快速搭建基于Grunt项目的工具，比如开发jQuery插件，Gruntfile，或者Grunt插件本身。安装方式很简单，我们需要在其他项目也用到grunt-init，因此安装在全局路径下<code>-g</code>:</p>

<p><code>
$ npm install -g grunt-init
</code></p>

<p>开发Grunt插件，我们需要一个基本的模板，将这个模板clone到home下的.grunt-init目录下：</p>

<p><code>
$ git clone git://github.com/gruntjs/grunt-init-gruntplugin.git ~/.grunt-init/gruntplugin
</code></p>

<p>然后新建一个目录，并在该目录下运行：</p>

<p><code>
$ mkdir beautify
$ cd beautify
$ grunt-init gruntplugin
</code></p>

<p>grunt-init会让你回答一些问题，比如插件名称，版本号，github链接等。之后，grunt-init会生成一个基本的模板，开发者只需要完成自己插件的逻辑代码即可。逻辑实现在<code>tasks/&lt;plugin-name&gt;.js</code>中即可。</p>

<p>完成后可以通过<code>npm publish</code>来发布，发布之后，你的插件就可以向上边提到的常用插件那样被其他的开发者使用了。</p>
]]></content>
  </entry>
  
</feed>
