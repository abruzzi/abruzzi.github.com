<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | I code it]]></title>
  <link href="http://abruzzi.github.com/category/javascript/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2015-11-01T18:18:29+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[工程中的编译原理 -- Mapfile解析器]]></title>
    <link href="http://abruzzi.github.com/2015/10/mapfile-parser/"/>
    <updated>2015-10-05T12:59:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/10/mapfile-parser</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>Mapfile是<code>MapServer</code>用来描述一个地图的配置文件。它是一个很简单的<code>声明式</code>语言，一个地图（Map）可以有多个层（Layer），每个层可以有很多属性（键值对）。在一个层的定义中，还可以定义若干个类（Class），这个类用以管理不同的样式（Style）。而每个类或者样式都可以由若干个属性（键值对）。</p>

<p>这里有一个实际的例子：</p>

<p>```
LAYER
  NAME         "counties"
  DATA         "counties-in-shaanxi-3857"
  STATUS       default
  TYPE         POLYGON
  TRANSPARENCY 70</p>

<p>  CLASS</p>

<pre><code>NAME       "polygon"
STYLE
  COLOR     255 255 255
  OUTLINECOLOR 40 44 52
END
</code></pre>

<p>  END
END
```</p>

<h4>最简单的层的定义</h4>

<p>最简单的情形是，我们定义了一个层<code>Layer</code>，但是没有指定任何的属性：</p>

<p><code>
LAYER
END
</code></p>

<p>我们期望parser可以输出：</p>

<p><code>js
{layer: null}
</code></p>

<p>要做到这一步，首先需要定义符号<code>LAYER</code>和<code>END</code>，以及一些对空格，非法字符的处理等：</p>

<p><code>js
\s+                     /* skip whitespace */
\n|\r\n                 /* skip whitespace */
"LAYER"                 return "LAYER"
"END"                   return "END"
&lt;&lt;EOF&gt;&gt;                 return 'EOF'
.                       return 'INVALID'
</code></p>

<p>对于，空格，回车换行等，我们都直接跳过。对应的<code>BNF</code>也非常简单：</p>

<p>```js
expressions</p>

<pre><code>: decls EOF {return $1;}
;
</code></pre>

<p>decls</p>

<pre><code>: LAYER END {$$ = {layer: null}}
;
</code></pre>

<p>```</p>

<h4>为层添加属性</h4>

<p>接下来我们来为层添加<code>Name</code>属性，首先还是添加符号<code>NAME</code>和对字符串的定义。这里的字符串被定义为：由双引号括起来的所有内容。</p>

<p><code>js
"NAME"                  return "NAME"
'"'("\\"["]|[^"])*'"'   return 'STRING'
[a-zA-Z]+               return 'WORD'
</code></p>

<p>然后我们就可以为<code>BNF</code>添加一个新的节：</p>

<p>```js
decls:
  LAYER decl END
  {$$ = {layer: $2}}
  ;</p>

<p>decl:
  NAME STRING
  {$$ = $2.substring(1, $2.length - 1)};
```</p>

<p>在<code>decl</code>中，我们将获得的字符串两头的引号去掉<code>$2.substring</code>。这样<code>decl</code>的值就会是字符串本身，而不是带着双引号的字符串了。修改之后的代码可以解析诸如这样的声明：</p>

<p>```
LAYER</p>

<pre><code>NAME "counties"
</code></pre>

<p>END
```</p>

<p>并产生这样的输出：</p>

<p><code>js
{ layer: 'counties' }
</code></p>

<p>但是如果我们用来解析两个以上的属性：</p>

<p><code>js
LAYER
  NAME         "counties"
  DATA         "counties-in-shaanxi-3857"
END
</code></p>

<p>解析器会报告一个错误：</p>

<p>```sh
$ node map.js expr</p>

<p>/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:106</p>

<pre><code>    throw new Error(str);
          ^
</code></pre>

<p>Error: Parse error on line 2:
...       "counties"  DATA         "counti
----------------------^
Expecting 'END', got 'WORD'</p>

<pre><code>at Object.parseError (/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:106:15)
at Object.parse (/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:171:22)
at Object.commonjsMain [as main] (/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:620:27)
at Object.&lt;anonymous&gt; (/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:623:11)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Function.Module.runMain (module.js:497:10)
at startup (node.js:119:16)
</code></pre>

<p>```</p>

<p>即，期望一个<code>END</code>符号，但是却看到了一个<code>WORD</code>符号。我们只需要稍事修改，就可以让当前的语法支持多个属性的定义：</p>

<p>```js
decls:
  LAYER pairs END
  {$$ = {layer: $2}}
  ;</p>

<p>pairs:
  pair
  {$$ = $1}
  |
  pairs pair
  {$$ = merge($1, $2)}
  ;</p>

<p>pair:
  NAME STRING
  {$$ = {name: $2.substring(1, $2.length - 1)}}
  | DATA STRING
  {$$ = {data: $2.substring(1, $2.length - 1)}};
```</p>

<p>先看，<code>pair</code>的定义，它由<code>NAME STRING</code>或者<code>DATA STRING</code>组成，是我们语法中的终结符。再来看<code>pairs</code>的定义：</p>

<p><code>js
pairs: pair | pairs pair;
</code></p>

<p>这个递归的定义可以保证我们可以写一条<code>pair</code>或者多条<code>pairs pair</code>属性定义语句。而对于多条的情况，我们需要将这行属性<code>规约</code>在一起，即当遇到这样的情形时：</p>

<p><code>
NAME         "counties"
DATA         "counties-in-shaanxi-3857"
</code></p>

<p>我们需要产生这样的输出：<code>{name: "counties", data: "counties-in-shaanxi-3857"}</code>。但是由于符号是逐个匹配的，我们会得到这样的匹配结果：<code>{name: "counties"}</code>和<code>{data: "counties-in-shaanxi-3857"}</code>，因此我们需要编写一个简单的函数来合并这些属性：</p>

<p>```js
  function merge(o1, o2) {</p>

<pre><code>var obj = {};

for(var k in o1) {
  obj[k] = o1[k];
}
for(var v in o2) {
  obj[v] = o2[v];
}

return obj;
</code></pre>

<p>  }
```</p>

<p>按照惯例，这种自定义的函数需要被定义在<code>%{</code>和<code>}%</code>括起来的<code>section</code>中：</p>

<p>```js
...
[a-zA-Z]+               return 'WORD'
[0-9]+("."[0-9]+)?      return 'NUMBER'
&lt;<EOF>>                 return 'EOF'
.                       return 'INVALID'</p>

<p>/lex</p>

<p>%{
  function merge(o1, o2) {</p>

<pre><code>var obj = {};

for(var k in o1) {
  obj[k] = o1[k];
}
for(var v in o2) {
  obj[v] = o2[v];
}

return obj;
</code></pre>

<p>  }
%}</p>

<p>%start expressions</p>

<p>%% /<em> language grammar </em>/
...</p>

<p>```</p>

<p>现在我们的解析器就可以识别多条属性定义了：</p>

<p><code>sh
$ node map.js expr
{ layer: { name: 'counties', data: 'counties-in-shaanxi-3857' } }
</code></p>

<h4>嵌套的结构</h4>

<p>现在新的问题又来了，我们的解析器现在可以识别对层的对个属性的解析了，不过由于<code>CLASS</code>并不是由简单的键值对定义的，所以还需要进一步的修改：</p>

<p><code>js
classes:
  CLASS pairs END
  {$$ = {class: $2}}
  ;
</code></p>

<p>类由<code>CLASS</code>关键字和<code>END</code>关键字定义，而类的属性定义和<code>Layer</code>的属性定义并无二致，都可以使用<code>pairs</code>（多条属性）。而<code>classes</code>事实上是<code>pair</code>的另一种形式，就像对属性的定义一样，所以：</p>

<p><code>js
pair:
  NAME STRING
  {$$ = {name: $2.substring(1, $2.length - 1)}}
  | DATA STRING
  {$$ = {data: $2.substring(1, $2.length - 1)}}
  | classes
  {$$ = $1};
</code></p>

<p>这样，解析器就可以识别<code>CLASS</code>子句了。我们注意到，在<code>CLASS</code>中，还可以定义<code>STYLE</code>，因此又需要稍作扩展：</p>

<p>```js
pair:
  NAME STRING
  {$$ = {name: $2.substring(1, $2.length - 1)}}
  | DATA STRING
  {$$ = {data: $2.substring(1, $2.length - 1)}}
  | classes
  {$$ = $1}
  | styles
  {$$ = $1};</p>

<p>styles:
  STYLE pairs END
  {$$ = {style: $2}}
  ;
```</p>

<p>这样，我们的解析器就可以处理样例中的所有语法了：</p>

<p>```sh
node map.js expr
{ layer:
   { name: 'counties',</p>

<pre><code> data: 'counties-in-shaanxi-3857',
 status: 'default',
 type: 70,
 class: { name: 'polygon', style: [Object] } } }
</code></pre>

<p>```</p>

<p>完整的代码在github上的<a href="https://github.com/abruzzi/jison-demos">这个repo中</a>。</p>

<h3>总结</h3>

<p>使用<code>BNF</code>定义一个复杂配置文件的规则，事实上一个比较容易的工作。要手写这样一个解析器需要花费很多的时间，而且当你需要parser多种配置文件时，这将是一个非常无聊且痛苦的事情。学习<code>jison</code>可以帮助你很快的编写出小巧的解析器，在上面的<code>Mapfile</code>的例子中，所有的代码还不到<code>100</code>行。下一次再遇到诸如复杂的文本解析，配置文件读取的时候，先不要忙着编写<code>正则表达式</code>，试试更高效，更轻便的<code>jison</code>吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工程中的编译原理 -- Jison入门篇]]></title>
    <link href="http://abruzzi.github.com/2015/09/write-a-parser/"/>
    <updated>2015-09-30T18:45:00+10:00</updated>
    <id>http://abruzzi.github.com/2015/09/write-a-parser</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>在代码编写中，很多时候我们都会处理字符串：发现字符串中的某些规律，然后将想要的部分抽取出来。对于发杂一些的场景，我们会使用<code>正则表达式</code>来帮忙，正则表达式强大而灵活，主流的变成语言如<code>Java</code>，<code>Ruby</code>的标准库中都对其由很好的支持。</p>

<p>但是有时候，当接收到的字符串结构更加复杂（往往会这样）的时候，正则表达式要么会变的不够用，要么变得超出我们能理解的复杂度。这时候，我们可能借助一些更为强大的工具。</p>

<p>下面是一个实际的例子，这个代码片段是MapServer的配置文件，它用来描述地图中的一个层，其中包含了嵌套的<code>CLASS</code>，而<code>CLASS</code>自身又包含了一个嵌套的<code>STYLE</code>节。显然，正则表达式在解释这样复杂的结构化数据方面，是无法满足需求的。</p>

<p>```
LAYER
  NAME         "counties"
  DATA         "counties-in-shaanxi-3857"
  STATUS       default
  TYPE         POLYGON
  TRANSPARENCY 70</p>

<p>  CLASS</p>

<pre><code>NAME       "polygon"
STYLE
  COLOR     255 255 255
  OUTLINECOLOR 40 44 52
END
</code></pre>

<p>  END
END
```</p>

<p>在UNIX世界，很早的时候，人们就开发出了很多用来生成<code>解释器</code>(parser)的工具，比如早期的<a href="https://en.wikipedia.org/wiki/Lex_(software">lex</a>)/<a href="https://en.wikipedia.org/wiki/Yacc">yacc</a>之类的工具和后来的<a href="https://en.wikipedia.org/wiki/GNU_bison">bison</a>。通过这些工具，程序员只需要定义一个结构化的文法，工具就可以自动生成解释器的C代码，非常容易。在JavaScript世界中，有一个非常类似的工具，叫做<a href="https://zaach.github.io/jison/">jison</a>。在本文中，我将以jison为例，说明在JavaScript中自定义一个解释器是何等的方便。</p>

<p><strong>注意</strong>，我们这里说的<code>解释器</code>不是一个编译器，编译器有非常复杂的后端（抽象语法树的生成，虚拟机器指令，或者机器码的生成等等），我们这里仅仅讨论一个编译器的<strong>前端</strong>。</p>

<h3>一点理论知识</h3>

<p>本文稍微需要一点理论知识，当年编译原理课的时候，各种名词诸如<code>规约</code>，<code>推导式</code>，<code>终结符</code>，<code>非终结符</code>等等，</p>

<h4>上下文无关文法（Context Free Grammar）</h4>

<p>先看看维基上的这段定义：</p>

<blockquote><p>在计算机科学中，若一个形式文法 G = (N, Σ, P, S) 的产生式规则都取如下的形式：V -> w，则称之为上下文无关文法（英语：context-free grammar，缩写为CFG），其中 V∈N ，w∈(N∪Σ)* 。上下文无关文法取名为“上下文无关”的原因就是因为字符 V 总可以被字串 w 自由替换，而无需考虑字符 V 出现的上下文。</p></blockquote>

<p>基本上跟没说一样。要定义一个上下文无关文法，数学上的精确定义是一个在4元组：<code>G = (N, Σ, P, S)</code>，其中</p>

<ol>
<li>N是“非终结符”的集合</li>
<li>Σ是“终结符”的集合，与N的交集为空（不想交）</li>
<li>P表示规则集（即N中的一些元素以何种方式）</li>
<li>S表示起始变量，是一个“非终结符”</li>
</ol>


<p>其中，规则集P是重中之重，我们会在下一小节解释。经过这个形式化的解释，基本还是等于没说，在继续之前，我们先来看一下BNF，然后结合一个例子来帮助理解。</p>

<p>话说我上一次写这种<a href="http://www.cnblogs.com/abruzzi/archive/2009/06/06/1497449.html">学院派的文章</a>还是2009年，时光飞逝。</p>

<h4>巴科斯范式（Backus Normal Form）</h4>

<p>维基上的解释是：</p>

<blockquote><p>巴科斯范式（英语：Backus Normal Form，缩写为 BNF），又称为巴科斯-诺尔范式（英语：Backus-Naur Form，也译为巴科斯-瑙尔范式、巴克斯-诺尔范式），是一种用于表示上下文无关文法的语言，上下文无关文法描述了一类形式语言。它是由约翰·巴科斯（John Backus）和彼得·诺尔（Peter Naur）首先引入的用来描述计算机语言语法的符号集。</p></blockquote>

<p>简而言之，它是由推导公式的集合组成，比如下面这组公式：</p>

<p><code>
S -&gt; T + T | T - T | T
T -&gt; F * F | F / F | F
F -&gt; NUMBER | '(' S ')'
NUMBER -&gt;  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
</code></p>

<p>可以被“继续分解”的元素，我们称之为“非终结符”，如上式中的<code>S</code>, <code>T</code>, <code>NUMBER</code>，而无法再细分的如<code>0..9</code>，<code>(</code>，<code>)</code>则被称之为终结符。<code>|</code>表示或的关系。在上面的公式集合中，<code>S</code>可以被其右边的<code>T+T</code>替换，也可以被<code>T-T</code>替换，还可以被<code>T</code>本身替换。回到上一小节最后留的悬疑，在这里：</p>

<ol>
<li>N就是{<code>S</code>, <code>T</code>, <code>F</code>, <code>NUMBER</code>}</li>
<li>Σ就是{<code>0</code>, <code>1</code>, ..., <code>9</code>, <code>(</code>, <code>)</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>}</li>
<li>P就是上面的BNF式子</li>
<li>S就是这个的<code>S</code>(第一个等式的左边状态)</li>
</ol>


<p>上面的BNF其实就是四则运算的形式定义了，也就是说，由这个BNF可以解释一切出现在四则运算中的文法，比如：</p>

<p><code>
1+1
8*2+3
(10-6)*4/2
</code></p>

<p>而所谓上下文无关，指的是在推导式的左边，都是非终结符，并且可以<strong>无条件</strong>的被其右边的式子替换。此处的<strong>无条件</strong>就是上下文无关。</p>

<h3>实现一个四则运算计算器</h3>

<p>我们这里要使用<a href="https://zaach.github.io/jison/">jison</a>，jison是一个npm包，所以安装非常容易：</p>

<p><code>sh
npm install -g jison
</code></p>

<p>安装之后，你本地就会有一个命令行工具<code>jison</code>，这个工具可以将你定义的<code>jison</code>文件编译成一个<code>.js</code>文件，这个文件就是解释器的源码。我们先来定义一些<code>符号</code>(token)，所谓<code>token</code>就是上述的<code>终结符</code>：</p>

<h4>第一步：识别数字</h4>

<p>创建一个新的文本文件，假设就叫<code>calc.jison</code>，在其中定义一段这样的符号表:</p>

<p><code>js
\s+                   /* skip whitespace */
[0-9]+("."[0-9]+)?    return 'NUMBER'
&lt;&lt;EOF&gt;&gt;               return 'EOF'
.                     return 'INVALID'
</code></p>

<p>这里我们定义了4个符号，所有的空格（<code>\s+</code>），我们都跳过；如果遇到数字，则返回<code>NUMBER</code>；如果遇到文件结束，则返回<code>EOF</code>；其他的任意字符(.)都返回<code>INVALID</code>。</p>

<p>定义好符号之后，我们就可以编写<code>BNF</code>了：</p>

<p>```js
expressions</p>

<pre><code>: NUMBER EOF
    {
    console.log($1);
    return $1;
    }
;
</code></pre>

<p>```</p>

<p>这里我们定义了一条规则，即<code>expressions -&gt; NUMBER EOF</code>。在<code>jison</code>中，当匹配到规则之后，可以执行一个代码块，比如此处的输出语句<code>console.log($1)</code>。这个产生式的右侧有几个元素，就可以用<code>$加序号</code>来引用，如<code>$1</code>表示<code>NUMBER</code>实际对应的值，<code>$2</code>为<code>EOF</code>。</p>

<p>通过命令</p>

<p><code>sh
jison calc.jison
</code></p>

<p>可以在当前目录下生成一个<code>calc.js</code>文件，现在来创建一个文件<code>expr</code>，文件内容为一个数字，然后执行：</p>

<p><code>sh
node calc.js expr
</code></p>

<p>来测试我们的解释器：</p>

<p><code>sh
$ echo "3.14" &gt; expr
$ node calc.js expr
3.14
</code></p>

<p>目前我们完整的代码仅仅20行：</p>

<p>```js
/<em> lexical grammar </em>/
%lex
%%</p>

<p>\s+                   /<em> skip whitespace </em>/
[0-9]+("."[0-9]+)?    return 'NUMBER'
&lt;<EOF>>               return 'EOF'
.                     return 'INVALID'</p>

<p>/lex</p>

<p>%start expressions</p>

<p>%% /<em> language grammar </em>/</p>

<p>expressions</p>

<pre><code>: NUMBER EOF
    {
    console.log($1);
    return $1;
    }
;
</code></pre>

<p>```</p>

<h4>加法</h4>

<p>我们的解析器现在只能计算一个数字（输入给定的数字，给出同样的输出），我们来为它添加一条新的规则:加法。首先我们来扩展目前的BNF，添加一条新的规则：</p>

<p>```js
expressions</p>

<pre><code>: statement EOF
    {
    console.log($1);
    return $1;
    }
;
</code></pre>

<p>statement:
  NUMBER PLUS NUMBER
  {$$ = $1 + $3}
  |
  NUMBER
  {$$ = $1}
  ;
```</p>

<p>即，<code>expressions</code>由<code>statement</code>组成，而<code>statement</code>可以有两个规则规约得到，一个就是纯数字，另一个是<code>数字 加号 数字</code>，这里的<code>PLUS</code>是我们定义的一个新的符号：</p>

<p><code>js
"+"    return "PLUS"
</code></p>

<p>当输入匹配到规则<code>数字 加号 数字</code>时，对应的块<code>{$$ = $1 + $3}</code>会被执行，也就是说，两个<code>NUMBER</code>对应的值会加在一起，然后赋值给整个表达式的值，这样就完成了<strong>语义</strong>的翻译。</p>

<p>我们在文件<code>expr</code>中写入算式：<code>3.14+1</code>，然后测试：</p>

<p><code>sh
$ jison calc.jison
$ node calc.js expr
13.14
</code></p>

<p>嗯，结果有点不对劲，两个数字都被当成了字符串而拼接在一起了，这是因为JavaScript中，<code>+</code>的二义性和弱类型的自动转换导致的，我们需要做一点修改：</p>

<p><code>js
statement:
  NUMBER PLUS NUMBER
  {$$ = parseFloat($1) + parseFloat($3)}
  |
  NUMBER
  {$$ = $1}
  ;
</code></p>

<p>我们使用JavaScript内置的<code>parseFloat</code>将字符串转换为数字类型，再做加法即可：</p>

<p><code>sh
$ jison calc.jison
$ node calc.js expr
4.140000000000001
</code></p>

<h4>更多的规则</h4>

<p>剩下的事情基本就是把BNF翻译成<code>jison</code>的语法了：</p>

<p><code>
S -&gt; T + T | T - T | T
T -&gt; F * F | F / F | F
F -&gt; NUMBER | '(' S ')'
NUMBER -&gt;  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
</code></p>

<p>```js
expressions</p>

<pre><code>: statement EOF
    {
    console.log($1);
    return $1;
    }
;
</code></pre>

<p>statement:
  term PLUS term {$$ = $1 + $3}
  |
  term MINUS term {$$ = $1 - $3}
  |
  term {$$ = $1}
  ;</p>

<p>term:
  factor MULTIPLE factor {$$ = $1 * $3}
  |
  factor DIVIDE factor {$$ = $1 / $3}
  |
  factor {$$ = $1}
  ;</p>

<p>factor:
  NUMBER {$$ = parseFloat($1)}
  |
  LP statement RP {$$ = $2}
  ;</p>

<p>```</p>

<p>这样，像复杂一些的四则运算：<code>(10-2) * 3 + 2/4</code>，我们的计算器也已经有能力来计算出结果了：</p>

<p><code>sh
$ jison calc.jison
$ node calc.js expr
24.5
</code></p>

<h3>总结</h3>

<p>我们在本文中讨论了BNF和上下文无关文法，以及这些理论如何与工程实践联系起来。这里的<code>四则运算计算器</code>当然是一个很简单的例子，不过我们从中可以看到将<code>BNF</code>形式文法翻译成实际可以工作的代码是多么方便。我在后续的文章中会介绍<code>jison</code>更高级的用法，以及如何在实际项目中使用<code>jison</code>产生的解释器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[又一篇JavaScript的函数式编程教程]]></title>
    <link href="http://abruzzi.github.com/2015/05/functional-programming-again/"/>
    <updated>2015-05-23T17:37:00+10:00</updated>
    <id>http://abruzzi.github.com/2015/05/functional-programming-again</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>4月初在北京的时候，徐昊同学表示我们公司的同事们写的文章都太简单，太注重细节，然后捡起了芝麻丢了西瓜，于是我就不再更新博客（其实根本原因是项目太忙）。上周和其他几个同事一起参加“Martin Fowler深圳行”的活动，我和同事扎西贡献了一个《FullStack Language JavaScript》，一起的还有杨云（江湖人称大魔头）的话题是《掌握函数式编程，控制系统复杂度》，李新（江湖人称新爷）的话题是《并发：前生来世》。</p>

<p>和其他同事预演的时候，突然发现其实我们的主题或多或少都有些关联，我讲的部分也涉及到了基于事件的并发机制和函数式编程。仔细想想，应该与JavaScript本身的特性不无关系：</p>

<ol>
<li>基于事件（Event-Based）的Node.js的正是并发中很典型的一个模型</li>
<li>函数式编程使其天然支持回调，从而非常适合异步/事件机制</li>
<li>函数式编程特性使其非常适合DSL的编写</li>
</ol>


<p>会后的第二天，我在项目代码里忽然想要将一个聚合模型用函数式编程的方式重写一下，结果发现思路竟然与NoSQL依稀有些联系，进一步发现自己很多不足。</p>

<p>下面这个例子来自于实际项目中的场景，不过Domain做了切换，但是丝毫不影响阅读和理解背后的机制。</p>

<h3>一个书签应用</h3>

<p>设想有这样一个应用：用户可以看到一个订阅的RSS的列表。列表中的每一项（称为一个Feed），包含一个<code>id</code>，一个文章的标题<code>title</code>和一个文章的链接<code>url</code>。</p>

<p>数据模型看起来是这样的：</p>

<p>```js
var feeds = [</p>

<pre><code>{
    'id': 1,
    'url': 'http://abruzzi.github.com/2015/03/list-comprehension-in-python/',
    'title': 'Python中的 list comprehension 以及 generator'
},
{
    'id': 2,
    'url': 'http://abruzzi.github.com/2015/03/build-monitor-script-based-on-inotify/',
    'title': '使用inotify/fswatch构建自动监控脚本'
},
{
    'id': 3,
    'url': 'http://abruzzi.github.com/2015/02/build-sample-application-by-using-underscore-and-jquery/',
    'title': '使用underscore.js构建前端应用'
}
</code></pre>

<p>];
```</p>

<p>当这个简单应用没有任何用户相关的信息时，模型非常简单。但是很快，应用需要从单机版扩展到Web版，也就是说，我们引入了用户的概念。每个用户都能看到一个这样的列表。另外，用户还可以收藏Feed。当然，收藏之后，用户还可以查看收藏的Feed列表。</p>

<p><img src="/images/2015/05/bookmarks.png" alt="feed and user" /></p>

<p>由于每个用户可以收藏多个Feed，而每个Feed也可以被多个用户收藏，因此它们之间的多对多关系如上图所示。可能你还会想到诸如:</p>

<p><code>sh
$ curl http://localhost:9999/user/1/feeds
</code></p>

<p>来获取用户<code>1</code>的所有<code>feed</code>等，但是这些都不重要，真正的问题是，当你拿到了所有Feed之后，在UI上，需要为每个Feed填加一个属性<code>makred</code>。这个属性用来标示该feed是否已经被收藏了。对应到界面上，可能是一枚黄色的星星，或者一个红色的心。</p>

<p><img src="/images/2015/05/bookmarks-design-resized.png" alt="bookmarkds design" /></p>

<h4>服务器端聚合</h4>

<p>由于关系型数据库的限制，你需要在服务器端做一次聚合，比如将feed对象包装一下，生成一个<code>FeedWrapper</code>之类的对象：</p>

<p>```java
public class FeedWrapper {</p>

<pre><code>private Feed feed;
private boolean marked;

public boolean isMarked() {
    return marked;
}

public void setMarked(boolean marked) {
    this.marked = marked;
}

public FeedWrapper(Feed feed, boolean marked) {
    this.feed = feed;
    this.marked = marked;
}
</code></pre>

<p>}
```</p>

<p>然后定义一个<code>FeedService</code>之类的服务对象：</p>

<p>```java
public ArrayList<FeedWrapper> wrapFeed(List<Feed> markedFeeds, List<Feed> feeds) {</p>

<pre><code>return newArrayList(transform(feeds, new Function&lt;Feed, FeedWrapper&gt;() {
    @Override
    public FeedWrapper apply(Feed feed) {
        if (markedFeeds.contains(feed)) {
            return new FeedWrapper(feed, true);
        } else {
            return new FeedWrapper(feed, false);
        }
    }
}));
</code></pre>

<p>}
```</p>

<p>好吧，这也算是一个还凑合的实现，但是静态强类型的Java做这个事儿有点勉强，而且一旦发生新的变化（几乎肯定会发生），我们还是把这部分逻辑放在JavaScript中，来看看它是如何简化这一个过程的。</p>

<h4>客户端聚合</h4>

<p>快要说到主题了，这篇文章我们会使用<code>lodash</code>作为函数式编程的库来简化代码的编写。由于JavaScript是一个动态弱类型的语言，我们可以随时为一个对象添加属性，这样一个简单的<code>map</code>操作就可以完成上边的Java对应的代码了：</p>

<p>```js
_.map(feeds, function(item) {</p>

<pre><code>return _.extend(item, {marked: isMarked(item.id)});
</code></pre>

<p>});
```</p>

<p>其中函数<code>isMarked</code>会做这样一件事儿：</p>

<p>```js
var userMarkedIds = [1, 2];
function isMarked(id) {</p>

<pre><code>return _.includes(userMarkedIds, id);
</code></pre>

<p>}
```</p>

<p>即查看传入的参数是否在一个列表<code>userMarkedIds</code>，这个列表可能由下列的请求来获得：</p>

<p><code>sh
$ curl http://localhost:9999/user/1/marked-feed-ids
</code></p>

<p>之所有只获取id是为了减少网络传输的数据大小，当然你也可以将全部的<code>/marked-feeds</code>都请求到，然后在本地做<code>_.pluck(feeds, 'id')</code>来抽取所有的<code>id</code>属性。</p>

<p>嗯，代码是精简了许多。但是如果仅仅能做到这一步的话，也没有多大的好处嘛。现在需求又有了变化，我们需要在另一个页面上展示当前用户的收藏夹（用以展示用户所有收藏的feed）。作为程序员，我们可不愿意重新写一套界面，如果能复用同一套逻辑当然最好了。</p>

<p>比如对于上面这个列表，我们已经有了对应的模板：</p>

<p>
```
{{#each feeds}}
<li class="list-item"></p>

<pre><code>&lt;div class="section" data-feed-id="{{this.id}}"&gt;
    {{#if this.marked}}
        &lt;span class="marked icon-favorite"&gt;&lt;/span&gt;
    {{else}}
        &lt;span class="unmarked icon-favorite"&gt;&lt;/span&gt;
    {{/if}}
    &lt;a href="http://abruzzi.github.com/feeds/{{this.url}}"&gt;
        &lt;div class="detail"&gt;
            &lt;h3&gt;{{this.title}}&lt;/h3&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
</code></pre>

<p></li>
{{/each}}
```
</p>

<p>事实上，这段代码在收藏夹页面上完全可以复用，我们只需要把所有的<code>marked</code>属性都设置为true就行了！简单，很快我们就可以写出对应的代码：</p>

<p>```js
_.map(feeds, function(item) {</p>

<pre><code>return _.extend(item, {marked: true});
</code></pre>

<p>});
```</p>

<p>漂亮！而且重要的是，它还可以如正常工作！但是作为程序员，你很快就发现了两处代码的相似性：</p>

<p>```js
_.map(feeds, function(item) {</p>

<pre><code>return _.extend(item, {marked: isMarked(item.id)});
</code></pre>

<p>});</p>

<p>_.map(feeds, function(item) {</p>

<pre><code>return _.extend(item, {marked: true});
</code></pre>

<p>});
```</p>

<p>消除重复是一个有追求的程序员的基本素养，不过要消除这两处貌似有点困难：位于<code>marked:</code>后边的，一个是函数调用，另一个是值！如果要简化，我们不得不做一个匿名函数，然后以回调的方式来简化：</p>

<p>```js
function wrapFeeds(feeds, predicate) {</p>

<pre><code>return _.map(feeds, function(item) {
    return _.extend(item, {marked: predicate(item.id)});
});
</code></pre>

<p>}
```</p>

<p>对于feed列表，我们要调用：</p>

<p><code>js
wrapFeeds(feeds, isMarked);
</code></p>

<p>而对于收藏夹，则需要传入一个匿名函数：</p>

<p><code>js
wrapFeeds(feeds, function(item) {return true});
</code></p>

<p>在<code>lodash</code>中，这样的匿名函数可以用<code>_.wrap</code>来简化：</p>

<p><code>js
wrapFeeds(feeds, _.wrap(true));
</code></p>

<p>好了，目前来看，简化的还不错，代码缩减了，而且也好读了一些（当然前提是你已经熟悉了函数式编程的读法）。</p>

<h4>更进一步</h4>

<p>如果仔细审视<code>isMarked</code>函数，会发现它对外部的依赖不是很漂亮（而且这个外部依赖是从网络异步请求来的），也就是说，我们需要在请求到<code>markedIds</code>的地方才能定义<code>isMarked</code>函数，这样就把函数定义<code>绑定</code>到了一个固定的地方，如果该函数的逻辑比较复杂，那么势必会影响代码的可维护性（或者更糟糕的是，多出维护）。</p>

<p>要将这部分代码隔离出去，我们需要将<code>ids</code>作为参数传递出去，并得到一个可以当做谓词（判断一个id是否在列表中的谓词）的函数。</p>

<p>简而言之，我们需要：</p>

<p><code>js
var predicate = createFunc(ids);
wrapFeeds(feeds, predicate);
</code></p>

<p>这里的<code>createFunc</code>函数接受一个列表作为参数，并返回了一个谓词函数。而这个谓词函数就是上边说的<code>isMarked</code>。这个神奇的过程被称为柯里化<code>currying</code>，或者偏函数<code>partial</code>。在<code>lodash</code>中，这个很容易实现：</p>

<p>```js
function isMarkedIn(ids) {</p>

<pre><code>return _.partial(_.includes, ids);
</code></pre>

<p>}
```</p>

<p>这个函数会将<code>ids</code>保存起来，当被调用时，它会被展开为：<code>_.includes(ids, &lt;id&gt;)</code>。只不过这个<code>&lt;id&gt;</code>会在实际迭代的时候才传入：</p>

<p>```js
$('/marked-feed-ids').done(function(ids) {</p>

<pre><code>var wrappedFeeds = wrapFeeds(feeds, isMarkedIn(ids));
console.log(wrappedFeeds);
</code></pre>

<p>});
```</p>

<p>这样我们的代码就被简化成了：</p>

<p>```js
$('/marked-feed-ids').done(function(ids) {</p>

<pre><code>var wrappedFeeds = wrapFeeds(feeds, isMarkedIn(ids));
var markedFeeds = wrapFeeds(feeds, _.wrap(true));

allFeedList.html(template({feeds: wrappedFeeds}));
markedFeedList.html(template({feeds: markedFeeds}));
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Sublime Text中设置JavaScript构建]]></title>
    <link href="http://abruzzi.github.com/2014/12/setup-sublime-as-javascript-development-env/"/>
    <updated>2014-12-21T18:52:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/12/setup-sublime-as-javascript-development-env</id>
    <content type="html"><![CDATA[<p>我在编写<a href="http://book.douban.com/subject/24165880/">《JavaScript核心概念及实践》</a>一书的时候，为了保证读者学习时可以比较专注语言本身，专门用Swing开发了一个小工具<a href="https://github.com/abruzzi/jsevaluator">JSEvaluator</a>。</p>

<p>这个工具可以当做JavaScript的简单的IDE，有一个编辑区域，有一些按钮(打开，保存，执行等)，执行之后还可以将结果显示在一个面板上。书出版后不断有读者问我如何将这个工具运行起来（我自己写这个工具的时候，并没有release的概念，而且最初的几个版本可用之后，就再也没有花心思维护），单独回复比较耗时，今天早上又收到一位热心读者的邮件，就在这里统一回复一下。</p>

<p>其实JSEvaluator的思想和其他的IDE一样：将一个编辑器和命令行工具结合在一起，编辑器提供编辑功能，然后IDE可以将编辑器中的文本发送给命令行工具执行（使用Rhino），将结果重定向到界面上。</p>

<p><a href="http://www.sublimetext.com/3">Sublime Text</a>提供的<code>Build</code>功能也可以做到这一点，并且可以使用它更加强大的其他编辑特性，因此推荐各位读者使用这里介绍的方式。</p>

<h3>Sublime Text编辑器</h3>

<p><a href="http://www.sublimetext.com/3">Sublime Text</a>是一个文本编辑器，非常轻量级，并且有丰富的插件机制。虽然它不是一个免费软件，但是如果不注册还是可以无限试用下去，除了不定时的弹出一个对话框之外。它在现在的前端开发中非常流行，我作为一个<code>Vim</code>的忠实粉丝，也已经花费了很多时间在Sublime Text上了。</p>

<p>在写书的时候，JavaScript已经比较火了，但是更多的是在Web端。在本地开发的支持上还是比较薄弱。但是现在就不一样了，各个操作系统平台上都已经有了许多本地的JavaScript执行环境。比如Mac自带的<code>jsc</code>，跨平台的<a href="http://nodejs.org/">node</a>等。</p>

<h4>准备工作</h4>

<p>如果你在使用Mac OS X，请直接跳到下一步。如果你在使用Windows，请先安装node.js的Windows版本，然后保证<code>node.exe</code>在系统的PATH环境变量中。</p>

<h4>自定义build</h4>

<p>在Sublime Text中，点击<code>Tools</code> -> <code>Build System</code> -> <code>New build system...</code>，Sublime会打开一个文件，我们来编辑这个文件：</p>

<p>```json
{</p>

<pre><code>"cmd": ["jsc", "$file"],
"selector": "source.js"
</code></pre>

<p>}
```</p>

<p>上边这个命令指定了这个build使用的命令是<code>jsc</code>。如果你在Windows下使用<code>node</code>，那么对应的这个文件应该写成：</p>

<p>```json
{</p>

<pre><code>"cmd": ["node", "$file"],
"selector": "source.js"
</code></pre>

<p>}
```</p>

<p>如果<code>node.exe</code>不在环境变量PATH中，请保证将其加入。完成这个文件的编辑之后，将其保存为<code>JavaScript.sublime-build</code>文件（Sublime会提示你输入文件名，因此输入JavaScript即可）。</p>

<h4>开始开发</h4>

<p>接下来你就可以在Sublime中开发并编译JavaScript代码了，应该注意的是，如果你使用的是<code>jsc</code>，那么<code>console.log</code>这样的函数式不能直接使用的，不过你可以很容易的将其重新定义：</p>

<p><code>js
var console = console || {};
console.log = debug;
</code></p>

<p>这里的<code>debug</code>是<code>Sublime</code>提供的输出函数，它将会把结果输出在Sublime的控制台上。</p>

<p><img src="/images/2014/12/sublime-text-jsc-resized.png" alt="Sublime Text Build JavaScript" /></p>

<p>运行构建的快捷键，在Mac OS X下为(<code>Cmd+B</code>)，Windows下为(<code>Ctrl+B</code>)。运行之后，可以看到在编辑器的底部会有一个小的窗口打开，里边的内容就是执行结果了。</p>

<h4>其他资料</h4>

<ol>
<li>这里有一个<a href="http://calebgrove.com/articles/js-console-sublime-text">英文版</a>，这里是<a href="http://www.wikihow.com/Create-a-Javascript-Console-in-Sublime-Text">另一个</a></li>
<li>这里有一个<a href="https://cnodejs.org/topic/51ee453af4963ade0ebde85e">中文版</a>，以及它的<a href="http://www.hacke2.cn/nodeJS-sublime-3/">补充</a></li>
</ol>


<p>Note：由于我自己不使用<code>Windows</code>平台，也不推荐其他开发者使用，因此关于Windows的部分并没有经过认真测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个关于时间的神奇Bug]]></title>
    <link href="http://abruzzi.github.com/2014/09/a-bug-about-time/"/>
    <updated>2014-09-04T22:37:00+10:00</updated>
    <id>http://abruzzi.github.com/2014/09/a-bug-about-time</id>
    <content type="html"><![CDATA[<h3>一个神奇的Bug</h3>

<p>目前项目是一个非常传统的Web应用，其中有个页面需要用户填写自己的个人信息，包括姓名和出生日期。非常简单的一个小片段，UI看起来是这个样子的：</p>

<p><img src="/images/2014/09/personal-resized.png" alt="image" /></p>

<p>没有使用现成的<code>datepicker</code>，某个开发人员只是简单的自己收集了一下年，月，日信息，然后在JavaScript中根据填写的值来<code>new</code>了一个Date对象。</p>

<p>然后某天我在做测试的时候，顺手填写了一个日期<code>1986年5月4日</code>，然后奇怪的事情发生了：</p>

<p><img src="/images/2014/09/invalid-date-resized.png" alt="image" /></p>

<p><strong>WTF?</strong>，这日期怎么会是非法的呢？于是我又尝试了<code>1986年5月3日</code>和<code>1986年5月5日</code>，一切正常！好奇之下，我找到对应的代码：</p>

<p>```js
var dobDay = parseInt($("#personal\.dobDay").val(), 10);
var dobMonth = parseInt($("#personal\.dobMonth").val(), 10);
var dobYear = parseInt($("#personal\.dobYear").val(), 10);</p>

<p>// Note month is not zero based.
var dob = null;
if (dobDay > 0 &amp;&amp; dobMonth > 0 &amp;&amp; dobYear > 0) {</p>

<pre><code>dob = new Date(dobYear, dobMonth - 1, dobDay, 0, 0, 0, 0);
</code></pre>

<p>}</p>

<p>if (dob === null || dob.getDate() !== dobDay) {</p>

<pre><code>valid = false;
$("#dob-error").html(this.formMessages.invalidDate);
</code></pre>

<p>}
```</p>

<p>从界面上获取用户输入的年，月，日信息，然后根据这三个数字创建一个JavaScript对象。但是奇怪的是，这里有一条判断<code>dob.getDate() !== dobDay</code>。</p>

<h3>JavaScript的日期类</h3>

<p>JavaScript中的日期类比较奇葩，你可以通过将年月日传入<code>new Date()</code>来构造出一个新的日期类型，奇葩之处在于，年和日都是从1开始计数，但是月份是从0开始计数的，比如<code>new Date(2014, 1, 2)</code>表示2014年<strong>2月</strong>2日。</p>

<p>那么，我们可以在Chrome的Console中查看一下神奇的<code>1986年5月4日</code></p>

<p>```js</p>

<blockquote><p>new Date(1986, 4, 4)
Sat May 03 1986 23:00:00 GMT+0800 (CST)
```</p></blockquote>

<p>WTF? 我好好的5月4日怎么变成5月3日了呢？加上时分秒之后，逐步缩小排查范围：</p>

<p>```js</p>

<blockquote><p>new Date(1986, 4, 4, 0, 59, 59, 0)
Sat May 03 1986 23:59:59 GMT+0800 (CST)</p>

<p>new Date(1986, 4, 4, 0, 59, 59, 1000)
Sun May 04 1986 01:00:00 GMT+0900 (CDT)
```</p></blockquote>

<p>这时候发现，当秒针通过<code>1986年5月3日的23点59分59秒</code>之后，时间就变成了<code>1986年5月4日的1点0分0秒</code>了！这个奇葩至极的问题是由于传说中的<strong>夏令时</strong>所致！</p>

<h3>夏令时</h3>

<p>其实常年和澳洲客户打交道，对日光节约时间(Daylight saving time)已经不陌生，不过澳洲在南半球冬夏正好和中国相反，因此完全没有将其当成日常的一部分。</p>

<p>维基上的解释比较专业：</p>

<blockquote><p>夏时制或夏令时间（英语：Summer time），又称日光节约时制、日光节约时间（英语：Daylight saving time），是一种为节约能源而人为规定地方时间的制度，在这一制度实行期间所采用的统一时间称为“夏令时间”。一般在天亮早的夏季人为将时间提前一小时，可以使人早起早睡，减少照明量，以充分利用光照资源，从而节约照明用电。各个采纳夏时制的国家具体规定不同。</p></blockquote>

<p>即，在夏天的某天（天亮的比较早），将时钟调快一个小时，以便大家起床更早，然后可以节省一些照明用电，然后在冬天的时候（天亮的比较晚）又调回去</p>

<p><img src="/images/2014/09/dst.png" alt="image" /></p>

<p>根据百度百科上的描述：</p>

<blockquote><p>1986年至1991年，中华人民共和国在全国范围实行了六年夏令时，每年从4月中旬的第一个星期日2时整（北京时间）到9月中旬第一个星期日的凌晨2时整（北京夏令时）。除1986年因是实行夏令时的第一年，从5月4日开始到9月14日结束外，其它年份均按规定的时段施行。夏令时实施期间，将时间调快一小时。1992年4月5日后不再实行。</p></blockquote>

<p><code>1986年的5月4日</code>这个特别的日期终于显现出了其特殊之处了。</p>

<p>有了这个认识，我将系统时间设置为了澳洲标准时间，然后测试:</p>

<p>```js</p>

<blockquote><p>new Date(2014, 9, 5, 2, 59, 59, 0)
Sun Oct 05 2014 01:59:59 GMT+1000 (EST)</p>

<p>new Date(2014, 9, 5, 2, 59, 59, 1000)
Sun Oct 05 2014 03:00:00 GMT+1100 (EST)
```</p></blockquote>

<p>如果观察足够细致的话会发现GMT后边的这个数字的变化，GMT是(Greenwish Mean Time)格林尼治标准时间的缩写，它最初是国际公认的时间基准线，地理上位于其东方的各个时区会加上一个偏移量，比如中国就是GMT+8，而澳洲就是GMT+10，而一旦进入夏令时，由于时钟拨快了一个小时，因此就会变成GMT+9/GMT+11。</p>

<p>```js</p>

<blockquote><p>new Date(1986, 4, 4, 0, 59, 59, 0)
Sat May 03 1986 23:59:59 GMT+0800 (CST)</p>

<p>new Date(1986, 4, 4, 0, 59, 59, 1000)
Sun May 04 1986 01:00:00 GMT+0900 (CDT)
```</p></blockquote>

<p>比如今年的巴西：</p>

<p>```js</p>

<blockquote><p>new Date(2014, 9, 19)
Sat Oct 18 2014 23:00:00 GMT-0300 (BRT)
```</p></blockquote>

<h3>其他</h3>

<p>大部分实行夏令时的国家都会将这个调整放到凌晨两点，而不是零点，其中的一个原因应该就是避免出现这种状况。但是由于巴西还是将这个调整放到了凌晨，那么这个日期还是会出现<code>非法日期</code>这样的错误：</p>

<p><img src="/images/2014/09/invalid-date-brasil-resized.png" alt="image" /></p>

<h3>解决方法</h3>

<p>最简单的解决方法就是存储最简单，而且无歧义的年月日字符处，比如'1986-05-04'，而不是通过保存成一个JavaScript的Date对象的方式。</p>

<p>或者也可以使用一个Datepicker控件来获取日期字符串，然后保存：</p>

<p><img src="/images/2014/09/date-picker-resized.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
