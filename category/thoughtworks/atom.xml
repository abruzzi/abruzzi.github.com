<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thoughtworks | I code it]]></title>
  <link href="http://abruzzi.github.com/category/thoughtworks/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2018-06-18T10:40:40+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[图书封面故事]]></title>
    <link href="http://abruzzi.github.com/2013/04/book-cover-story/"/>
    <updated>2013-04-13T15:57:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/04/book-cover-story</id>
    <content type="html"><![CDATA[<h2>虎符</h2>

<p>虎符本是春秋战国时期，用以中央政权和地方军事力量之间的一种凭证，信物。一般分剖为两半，一半留在京师（右半边，古代以右为尊），另一半留在军队驻地。对方上要有军事行动，必须向中央申请，中央同意后，会派遣专人前往，为了防止有人冒充中央，假传圣旨，需要有一种凭证。</p>

<p>当然，仅仅虎符本身并不足以调动军队，同虎符一起的，还要有诏书，及中央排除的特使。虎符作为凭证，而诏书中有详细的其他信息，比如官员的任命，军队部署之类。</p>

<h3>杜虎符</h3>

<p>杜虎符为1973年在西安南郊出土的，年代大约为战国时期，但是应在秦朝统一六国之前。</p>

<p><img src="http://abruzzi.github.com/images/2013/04/jscp-conver.jpg" alt="image" /></p>

<p>铭文为：</p>

<p><code>
兵甲之符，右在君，左在杜，凡兴兵披甲，用五十人以上，必会君符，乃敢行之。燔燧之事，虽毋会符，行。
</code></p>

<p>虎符本身为铜铸，铭文的制作非常特殊：先刻以阴文，然后将金丝嵌入文字，再打磨光滑，因此虽历时久远，但是仍金光熠熠。</p>

<h3>阳陵虎符</h3>

<p>阳陵虎符相传在山东临城出土，由于铭文中有“皇帝”字样，时代当为秦统一六国之后。</p>

<p><img src="http://abruzzi.github.com/images/2013/04/yangling-tiger-seal.resized.jpg" alt="image" /></p>

<p>铭文为：</p>

<p><code>
甲兵之符，右在皇帝，左在阳陵
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turning to a designer]]></title>
    <link href="http://abruzzi.github.com/2013/03/turning-to-a-designer/"/>
    <updated>2013-03-26T22:46:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/03/turning-to-a-designer</id>
    <content type="html"><![CDATA[<h4>Hack design的建议</h4>

<p>首先，design无处不在，它的目的是提高产品使用者的效率和易用性的。它不是一个“运用之妙，存乎一心”的东西，它是一个实实在在可以通过学习来获得的能力（正如编程或者写作或者厨艺一样，当然，如果一个人把精力和心血放在编程上，同样可以将编程做成一个“运用之妙，存乎一心”的东西。）</p>

<p>什么是一个好的设计？下面是设计师Dieter Rams给出的10条原则：</p>

<ol>
<li>创新性</li>
<li>使产品有用</li>
<li>美学</li>
<li>使产品可以被理解</li>
<li>不那么引人注目</li>
<li>诚实的设计</li>
<li>可持久的</li>
<li>彻底，纯粹</li>
<li>尽量做小的设计</li>
<li>环境友好</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2013/03/design-10-commandments.resized.png" alt="image" /></p>

<p>这里有<a href="http://startupsthisishowdesignworks.com/">原文的链接</a>，总而言之，设计不仅仅是一个web页面，一个海报，所有的产品都会有不同程度的设计包含在其中。</p>

<h4>Alex的建议</h4>

<p>想想你觉得“好看”的页面为什么好看，是字体，配色，背景色，布局还是其他？把这些记录下来，并在自己后续的设计中尝试使用。</p>

<p>多看一些优秀的设计，比如web页面，如果你发现上边有一些很感兴趣的特性，或者细节，比如这个菜单看着很漂亮，后者标签功能很炫，你可以用chrome的inspect来查看别人使用了什么样的HTML，又apply了那些CSS，做出了这样的效果。</p>

<p>如果在这个过程中，遇到一些没有见过的标签，或者标签的属性，那么去<a href="http://www.w3schools.com/">w3school</a>上查看一下这些标签/属性的含义，尽量使用这些Tag原始的意义（设计时的初衷）。</p>

<p>比如div，它是divider的缩写，本来是用来分割块的，那么就用它来做分割，比如p(paragraph)标签，用来分段，可以将文字放入其中。这些都是HTML标签的设计初衷，我们应该尽量遵循，在实现的时候，如果使用原始的标签很难实现，那么可以尝试一些比较trick的方式来绕过，但是毕竟并非正途。</p>

<p>最后，design和编程类似，你需要不断的练习，自己动手多尝试，在研究了别人的实现之后，自己最好做一个示例出来。</p>

<h4>其他人的建议</h4>

<p>最近读到的一篇写的<a href="http://somerandomdude.com/2012/01/10/transition-from-development-to-design/">非常好的文章</a>，作者也是一个有开发背景的设计师，因此有很多地方可以借鉴：</p>

<ol>
<li>在转向designer的同时，不要丢掉编程</li>
<li>按照一定的顺序来学习design（可用优先，性能优先）</li>
<li>设计一切见得到的东西</li>
<li>和其他人一起讨论设计，并聆听别人</li>
<li>尝试分享，尝试将自己的设计讲给别人</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Hack day]]></title>
    <link href="http://abruzzi.github.com/2013/03/guan-yu-hack-day/"/>
    <updated>2013-03-22T20:55:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/03/guan-yu-hack-day</id>
    <content type="html"><![CDATA[<h4>关于Hackday</h4>

<p>Hackday是一个技术活动，每三个月举行一次，每次正式时间为两天，每次的hackday都有一个主题，比如对某个业务模块的数据挖掘，关于某个模块的功能/执行效率的改进。</p>

<p>Hackday中的idea多是工作中接触到的痛点，但是又有一些挑战，很难在工作的时候将其完成，或者是一些有意思的主题，平时想做又不太合适（比如一些没有经过确认创新的点子）。</p>

<h4>Hackday 1st</h4>

<p>第一次Hackday是跟<a href="http://adams.co.tt/blog">Adam</a>一起做一个数据展现的idea，Adam是墨尔本Office里一个相当senior的咨询师，我们当时做的idea是根据系统中已有的数据信息，来做一些简单的数据分析，如：</p>

<ol>
<li>找出一个地区内的所有中介，看看哪些中介持有最多的房产资料</li>
<li>找出一个地区中，可以最快卖掉手中房产的中介</li>
</ol>


<p><img src="http://abruzzi.github.com/images/2013/03/hackday-agent-info.resized.png" alt="image" /></p>

<p>我们的应用使用sinatra作为服务器；由于数据库系统已经存在，所以ORM需要做的是将对象和已存在的数据表关联，因此功能强大且可以独立使用的ActiveRecord就成了首选；模板使用haml；UI框架风格使用了BootStrap。</p>

<p>搭建环境大概只用了1到1.5个小时，在整个开发过程中，我学习到了一个专业的敏捷开发的流程：</p>

<ol>
<li>划分大的目标，使之称为小的task</li>
<li>小步前进，做完一个功能之后，进行快速的review（首先有一个可以工作的版本）</li>
<li>如果发现有潜在的问题，进行重构，以方便下一个小的task</li>
</ol>


<p>两天之后，当一个可以工作，并且很容易扩展的应用程序真实的放在我们面前的时候，我觉得十分有意思，这当然不是因为build something本身的乐趣，而是我看到一种理论在实际的生活中可以工作（而且是以一种非常有意思的方式），这个过程让我对这种开发方式产生了很多新的认识。</p>

<h4>Hackday 2nd</h4>

<p>第二次的idea是一个基于google map的应用，比如某人的公司在A地，老婆的公司在B地，他们最喜欢的超市在C地，然后他们想找一个离这三个地方距离都很近的房子。</p>

<p><img src="http://abruzzi.github.com/images/2013/03/hackday-neighborhood.resized.png" alt="image" /></p>

<p>同样也使用了Sinatra+haml+javascript。由于idea本身就是西安团队想出来的，所以这次的参与者都是西安office的，这样可以省去交流的成本，做起来肯快，但是问题也很严重，就是没有人做演示，别的团队也不清楚我们在干什么。</p>

<h4>Hackday 3rd</h4>

<p>经历了前两次，第三次的就非常official了，有story wall，有producer，有站会，有showcase，正好这段时间我们的一个客户designer在西安office出差，所以还设计了一些海报。</p>

<p><img src="http://abruzzi.github.com/images/2013/03/hackday-rango-stories.resized.png" alt="image" /></p>

<p>有了专业的designer参与，应用程序的外观立马得到了改善，看起来非常有产品的感觉：</p>

<p><img src="http://abruzzi.github.com/images/2013/03/hackday-rango-homepage.resized.png" alt="image" /></p>

<p>这次本来计划开发离线版本，使用浏览器的localStorage，但是静态网页在iPad上无法工作。team快速的做出了调整，使用sinatra（又一次）搭建了服务器，然后将应用部署在cloud上。</p>

<h4>总结</h4>

<p>虽然每次的“成果”都不大，但是整个hack的过程都非常有意思，每次都可以使用前几次活动中好的工作方式，而前几次中做的不好的则可以进行改进，技术仅仅是其中的一个方面，与团队成员的协作，对自己信心的加强，通过创新来给客户带来价值，这一系列的，不那么明显的“成果”才是更重要的。</p>

<p>另一个“成果”是，我对轻量级的框架如<a href="http://www.sinatrarb.com/">sinatra</a>，引擎<a href="http://haml.info/">haml</a>等有了非常浓厚的兴趣，用这些工具可以快速的搭建用于showcase的应用程序，而且非常容易改进，非常适合小步迭代的开发方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k-nearest-neighbour算法简介及示例]]></title>
    <link href="http://abruzzi.github.com/2013/01/k-nearest-neighbour/"/>
    <updated>2013-01-03T15:46:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/k-nearest-neighbour</id>
    <content type="html"><![CDATA[<h3>background</h3>

<p>元旦放假前，team的同事们想要一起学习一些技术，然后一起做些小东西，有人提到将物理墙上的卡，通过手机拍照，识别出其中的卡号，然后与电子墙同步状态。这是一个非常有意思的主题，会涉及到很多方面的知识，其实有好几个topic，只不过我对人工智能/机器学习等比较有兴趣而已，所以就先自己研究下。</p>

<p>几天下来，关于数字识别的基本的流程已经清晰了，关于图片的预处理及边界标定等都差不多就绪了，剩下比较重要的是<strong>识别</strong>本身了。在这个过程中，遇到了一些很有意思的算法，我自己也花费了好几天才弄明白，所以整理了一下，这一篇先介绍下第一个，也是最简单最好用的KNN算法。</p>

<h3>K-nearest-neighbour简介</h3>

<p>KNN是机器学习中<strong>最简单</strong>的一种无值守的学习方法，但是在实际场景中，效果却经常<strong>非常好</strong>。一般来说，在样本较多，分布均匀的空间中，KNN会收到很好的效果。但是由于KNN会计算空间中的每个点与需要标定的点的距离(甚至需要计算额外的权重信息)，所以计算量会较大。</p>

<p><code>
假设所有的点都均匀的分布在一个平面内，此时的平面密度(单位范围内的点的个数)非常大，而每个子平面内的点的分布与所有点在整个平面内的分布相当。在子平面S中，有一个点Y，则离点X(to be classified)最近的Y很可能与Y同在子平面S中。
</code></p>

<p>比如取出空间中与X距离最近的有5个点(K=5)，其中3个属于C1类，2个属于C2类，则根据少数服从多数原则，X点被归类为C1.这样的一个缺点就是如果空间内的点分布不均匀，那么会有一些误差，如果上面这个场景经常出现，那么分类会越来越偏离(有一个偏心的硬币，投掷100,000次，有90,000次正面)。这样就有引入了对KNN的另一个扩展方式，加入权重的KNN：</p>

<p><code>
当然这种形式的KNN不是很精确，由此引申出了带权重的KNN：可以为每个点都赋予一个权值，每个权值与新的点X的距离有关，通常会取距离的倒数，这样与X最近的点有较高的权重，而较远的点具有较低的权重，这样在投票(voting)阶段可以相对的提高精确度
</code></p>

<h3>KNN的一个python版本示例</h3>

<h4>背景(高斯分布)</h4>

<p>```
import random</p>

<p>def gauss_list(mu, sigma, count=100):</p>

<pre><code>return [random.gauss(mu, sigma) for _ in range(count)]
</code></pre>

<p>```</p>

<p>生成一个随机数数组，数组中的元素符合高斯分布，如</p>

<p><code>
ran = gauss_list(-2, 1, 10)
print ran
</code></p>

<p>运行结果如下：</p>

<p><code>
[-1.3277188634970218, -2.1034487392146817, -0.5924407591392826, -0.30376289085064045, -2.191337071105794, -1.9781081550478732, -3.7937155472105673, -2.538102349796847, -1.3728510997834549, -2.766669661625006]
</code></p>

<p>更进一步，我们可以用这种方式生成平面中的一些点，这些点可以根据分布情况分为两组，一组是以(-4,0)为重心的500个点，另一组是以(4,0)为重心的500个点：</p>

<p>```
def gauss_cluster(center, stdDev, count=500):</p>

<pre><code>return [(random.gauss(center[0], stdDev),
         random.gauss(center[1], stdDev)) for _ in range(count)]
</code></pre>

<p>def make_random_data():</p>

<pre><code>return gauss_cluster((-4, 0), 1) + gauss_cluster((4, 0), 1)
</code></pre>

<p>data = make_random_data()</p>

<p>```</p>

<h4>绘制高斯分布</h4>

<p>```
data = make_random_data()</p>

<p>x = map(lambda x: x[0], data)
y = map(lambda x: x[1], data)</p>

<p>plt.clf()</p>

<p>plt.scatter(x, y, c=x, vmin=0, vmax=20, s=35, alpha=0.75)
plt.colorbar()
plt.grid(True)</p>

<p>plt.show()
```
通过使用matplotlib的绘图功能，将make_random_data生成的点通过图形的方式展现，效果更加直观，图中的两个点集分别表示两个不同的类别。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/gauss-distribution-resized.png" alt="image" /></p>

<h4>KNN</h4>

<p>我们定义KNN分类器，其中两点间的距离按照欧氏公式来求，先计算点集中离x点最近的k个点，然后取得对应的k个label，再按照label个数球max。</p>

<p>比如k=5时，求的的label集合为['O', 'O', 'A', 'A', 'A']，则我们认为这个点应该被分类为A(少数服从多数)。</p>

<p>```
def euclidean_distance(x, y):</p>

<pre><code>return math.sqrt(sum([(a-b)**2 for (a,b) in zip(x,y)]))
</code></pre>

<p>def makeKNNClassifier(data, labels, k, distance):</p>

<pre><code>def classify(x):
    closestPoints = heapq.nsmallest(k, enumerate(data),
                                    key=lambda y: distance(x, y[1]))
    closestLabels = [labels[i] for (i, pt) in closestPoints]
    return max(set(closestLabels), key=closestLabels.count)

return classify
</code></pre>

<p>```</p>

<h4>测试一下</h4>

<p>创建1000个随机点，前500个分类为A(Apple)，后500个分类为O(Orange)，k值为3。</p>

<p>```
data = make_random_data()
labels = ['A'] * 500 + ['O'] * 500</p>

<p>fitter = makeKNNClassifier(data, labels, 3, euclidean_distance)</p>

<p>print fitter((-3, 1))
print fitter((4, 2))
```</p>

<p>图中的两个红色的点分别为P1(-3, 1)和P2(4, 2)。它们都已经被正确的分类。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/knn-plant-resized.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughtworks Immersion Day 3]]></title>
    <link href="http://abruzzi.github.com/2012/08/thoughtworks-immersion-day-3/"/>
    <updated>2012-08-02T00:00:00+08:00</updated>
    <id>http://abruzzi.github.com/2012/08/thoughtworks-immersion-day-3</id>
    <content type="html"><![CDATA[<p><p>早上的热身活动中，我们玩了这样一个游戏：6个人一组坐成一个环，每个人在卡片上写下一句话(或者诗词等)，然后交给下一个人A，A将这句话用图像表达出来，然后传递给下下一个人B，B又根据图像把文字还原出来，交给自己的下一个，依次循环，到最后，你会拿到你自己写的卡，和你的后续们翻译的结果，整个过程中不许讨论。</p> <p><a href="http://abruzzi.github.com/images/2012/08/2012-07-27-09.42.10.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="2012-07-27 09.42.10" border="0" alt="2012-07-27 09.42.10" src="http://abruzzi.github.com/images/2012/08/2012-07-27-09.42.10_thumb.jpg" width="644" height="484" /></a></p> <p>可以看出，仅仅基于“内容”的交流，很难让对方明白你要表达的意思。日常的沟通中，除了最基本的“内容”之外，我们还采用大量的诸如肢体语言，眼神，语调等等，而我们用以表意内容的仅占信息量的7%。事实上，经常有这样的体验，面对面的交流会非常的容易，即使是外语交流也是这样。另一个体验就是我们通过IM聊天的时候，总是会使用表情，标点符号等来使得意思更好的传递。</p> <p>最后一个环节是如何Feedback，<a href="http://www.thoughtworks.com/">Thoughtworks</a>长期以来形成了这样一种机制：你可以给公司的任何同事回馈，比如你的pair在和你结对的时候不注意措辞，某些同事的某些行为令你不舒服等等。这种机制鼓励大家互相促进，增加交流。很多时候，我们很难发现自己身上的问题，但是很容易发现别人的问题，这种feedback机制就可以快速使得自己发现自己的不足，并快速的消除隔阂，更加愉快的投入学习工作中。</p> <p>这里有一些应该注意的地方：</p> <ol> <li>提出Feedback时，要尽量的具体，笼统的描述对当事人没有任何的好处</li> <li>不要对别人的信仰，价值观等方面提出开发，而应局限在行为上</li> <li>Feedback也要注意方式</li></ol> <p>通常可以使用这样的模式：</p> <ol> <li>Ask for permission (Do you have any free time?)</li> <li>One to one</li> <li>I see/hear/smell(<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://abruzzi.github.com/images/2012/08/wlEmoticon-smile.png" />) something</li> <li>And I think/feel it's ……</li> <li>What do you think?</li></ol> <p>不论怎么说，feedback帮助我们快速发现问题，如果有人给feedback，请以开放的态度来对待，并感谢他/她。</p> <p>三天时间很短，但是确实学到了很多的东西。回来后跟<a href="http://www.iamhukai.com/">胡凯</a>聊的时候，他告诉我global的TWI已经取消了，虽然在工作日做这样的培训会有较大的开销，但是公司还是愿意负担这样的成本，因为公司觉得很有必要让我们新入职的社招人员进行一下不同的文化上的冲击。</p></p>

]]></content>
  </entry>
  
</feed>
