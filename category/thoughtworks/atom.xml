<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ThoughtWorks | I code it]]></title>
  <link href="http://abruzzi.github.com/category/thoughtworks/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2014-12-21T19:36:47+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从一个小例子学习TDD]]></title>
    <link href="http://abruzzi.github.com/2014/11/tdd-step-by-step/"/>
    <updated>2014-11-09T15:07:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/11/tdd-step-by-step</id>
    <content type="html"><![CDATA[<h3>示例的需求描述</h3>

<p>今天我们需要完成的需求是这样的：</p>

<p>对于一个给定的字符串，如果其中<code>元音</code>字母数目在整个字符串中的比例超过了30%，则将该<code>元音</code>字母替换成字符串<code>mommy</code>，额外的，在替换时，如果有连续的元音出现，则仅替换一次。</p>

<p>如果用<code>实例化需求</code>(<a href="http://specificationbyexample.com/">Specification by Example</a>)的方式来描述的话，需求可以转换成这样几条实例：</p>

<ol>
<li><code>hmm</code>经过处理之后，应该保持原状</li>
<li><code>she</code>经过处理之后，应该被替换为<code>shmommy</code></li>
<li><code>hear</code>经过处理之后，应该被替换为<code>hmommyr</code></li>
</ol>


<p>当然，也可以加入一些边界值的检测，比如包含数字，大小写混杂的场景来验证，不过我们暂时可以将这些场景抛开，而仅仅关注与TDD本身。</p>

<h4>为什么选择这个<code>奇怪的</code>例子</h4>

<p>我记得在学校的时候，最害怕看到的就是书上举的各种离<code>生活</code>很远的例子，比如国外的书籍经常举汽车的例子，有引擎，有面板，但是作为一个只是能看到街上跑的车的穷学生，实际无法理解其中的关联关系。</p>

<p>其实，另外一种令人不那么舒服的例子是那种纯粹为了示例而编写的例子，现实世界中可能永远都不可能见到这样的代码，比如我们今天用到的例子。</p>

<p>当然，这种纯粹的例子也有其存在的价值：在脱离开复杂的细节之后，尽量的让读者专注于某个方面，从而达到对某方面练习的目的。因为跟现实完全相关的例子往往会变得复杂，很容易让读者转而去考虑复杂性本身，而忽略了对实践/练习的思考。</p>

<h4>TDD步骤</h4>

<p>通常的描述中，<code>TDD</code>有三个步骤：</p>

<ol>
<li>先编写一个测试，由于此时没有任何实现，因此测试会失败</li>
<li>编写实现，以最快，最简单的方式，此时测试会通过</li>
<li>查看实现/测试，有没有改进的余地，如果有的话就用重构的方式来优化，并在重构之后保证测试通过</li>
</ol>


<p><img src="/images/2014/11/tdd.png" alt="tdd" /></p>

<p>它的好处显而易见：</p>

<ol>
<li>时时关注于实现功能，这样不会跑偏</li>
<li>每个功能都有测试覆盖，一旦改错，就会有测试失败</li>
<li>重构时更有信心，不用怕破坏掉已有的功能</li>
<li>测试即文档，而且是不会过期的文档，因为一旦实现变化，相关测试就会失败</li>
</ol>


<p>使用<code>TDD</code>，一个重要的实践是<code>测试先行</code>。其实在编写任何测试之前，更重要的一个步骤是<code>任务分解</code>(Tasking)。只有当任务分解到恰当的粒度，整个过程才可能变得比较顺畅。</p>

<p>回到我们的例子，我们在知道整个需求的前提下，如何进行任务分解呢？作为<code>实现优先</code>的程序员，很可能会考虑诸如空字符串，元音比例是否到达30%等功能。这当然没有孰是孰非的问题，不过当需求本身就很复杂的情况下，这种直接面向实现的方式可能会导致越走越偏，考虑的越来越复杂，而耗费了几个小时的设计之后发现没有任何的实际进度。</p>

<p>如果是采用<code>TDD</code>的方式，下面的方式是一种可能的任务分解：</p>

<ol>
<li>输入一个非元音字符，并预期返回字符本身</li>
<li>输入一个元音，并预期返回<code>mommy</code></li>
<li>输入一个元音超过30%的字符串，并预期元音被替换</li>
<li>输入一个元音超过30%，并且存在连续元音的字符串，并预期只被替换一次</li>
</ol>


<p>当然，这个任务分解可能并不是<code>最好的</code>，但是是一个比较清晰的分解。</p>

<h3>实践</h3>

<h4>第一个任务</h4>

<p>在本文中，我们将使用JavaScript来完成该功能的编写，测试框架采用了<a href="http://jasmine.github.io/2.0/introduction.html">Jasmine</a>，这里有一个<a href="https://github.com/abruzzi/tdd-boilerplate">模板项目</a>，使用它你可以快速的启动，并跟着本教程一起实践。</p>

<p>根据任务分解，我们编写的第一个测试是：</p>

<p>```js
describe("mommify", function() {</p>

<pre><code>it("should return h when given h", function() {
    var expected = "h";

    var result = mommify("h");

    expect(result).toEqual(expected);
});
</code></pre>

<p>});
```</p>

<p>这个测试中有三行代码，这也是一般测试的标准写法，简称<code>3A</code>：</p>

<ol>
<li>组织数据（Arrange）</li>
<li>执行需要被测的函数（Action）</li>
<li>验证结果（Assertion）</li>
</ol>


<p>运行这个测试，此时由于还没有实现代码，因此Jasmine会报告失败。接下来我们用最快速的方法来编写实现，就目前来看，最简单的方式就是：</p>

<p>```js
function mommify() {</p>

<pre><code>return "h";
</code></pre>

<p>}
```</p>

<p>可能有人觉得这种实现太过狡猾，但是从<code>TDD</code>的角度来说，它确实能够令测试通过。这时候，我们需要编写另外一个测试来<code>驱动</code>出正确的行为：</p>

<p>```js
it("should return m when given m", function() {</p>

<pre><code>var expected = "m";

var result = mommify("m");

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>这样，我们的实现就不能仅仅返回一个"h"了，就现在来看，最简单的方式是输入什么就返回什么：</p>

<p>```js
function mommify(word) {</p>

<pre><code>return word;
</code></pre>

<p>}
```</p>

<p>很好，这样我们的第一个<code>任务</code>已经完成了！我们已经经历了<code>失败-成功</code>的循环，这时候需要<code>review</code>一下代码，以保证代码是干净的：实现上来说，并没有可以优化的地方，但是我们发现两个测试用例其实测试的是同一件事情，因此可以删掉一个。</p>

<p>是的，测试代码也是代码，我们需要小心的维护它，以保证所有的代码都是干净的。</p>

<h4>第二个任务</h4>

<p>我们可以开始元音字母的子任务了，很容易想到的一个测试用例为：</p>

<p>```js
it("should return mommy when given a", function() {</p>

<pre><code>var expected = "mommy";

var result = mommify("a");

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>测试失败之后，能想到的最快速的方式是做一个简单的判断：</p>

<p>```js
function mommify(word) {</p>

<pre><code>if(word == "a") {
    return "mommy";
}
return word;
</code></pre>

<p>}
```</p>

<p>这样测试又会通过，接下来就是重复5个元音的场景，不过使用JavaScript可以很容易的将这5个场景归为一组：</p>

<p>```js
it("should return mommy when given a vowel", function() {</p>

<pre><code>var expected = "mommy";

["a", "e", "i", "o", "u"].forEach(function(word) {
    var result = mommify(word);
    expect(result).toEqual(expected);
});
</code></pre>

<p>});
```</p>

<p>而实现则对一个的会变成（记住，用最简单的方式）：</p>

<p>```js
function mommify(word) {</p>

<pre><code>if(word == "a" || word == "e" || word == "i" || word == "o" || word == "u") {
    return "mommy";
}
return word;
</code></pre>

<p>}
```</p>

<p>好了，测试通过了。又是进行重构的时间了，现在看看实现，简直不忍卒读，我们使用JavaScript的字符串的<code>indexOf</code>方法可以简化这段代码：</p>

<p>```js
function mommify(word) {</p>

<pre><code>if("aeiou".indedOf(word) &gt;= 0) {
    return "mommy";
}
return word;
</code></pre>

<p>}
```</p>

<p>好多了！我想你现在已经或多或少的体会到了<code>TDD</code>中<code>任务分解</code>的好处了：进度可以掌握，而且目标非常明确，每一步都有相应的产出。</p>

<h4>第三个任务</h4>

<p>和之前一样，我们还是从测试开始：</p>

<p>```js
it("should mommify if the vowels greater than 30%", function() {</p>

<pre><code>var expected = "shmommy";
var result = mommify("she");

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>现在有一点点挑战了，因为我们的实现上一直都是单一的字符串，现在有多个了，不过没有关系，我们先按照最简单的方式来实现就对了：</p>

<p>```js
function mommify(word) {</p>

<pre><code>var count = 0;
for(var i = 0; i &lt; word.length; i++) {
    if("aeiou".indexOf(word[i]) &gt;= 0) {
        count += 1;
    }
}

var str = "";

if(count/word.length &gt;= 0.30) {
    for(var i = 0; i &lt; word.length; i++) {
        if("aeiou".indexOf(word[i]) &gt;= 0) {
            str += "mommy";
        } else {
            str += word[i];
        }
    }
} else {
    str = word;
}

return str;
</code></pre>

<p>}
```</p>

<p>无论如何，测试通过了，我们首先计算了<code>元音</code>所占的比重，如果超过30%，则替换对应的字符，否则直接返回传入的字符串。</p>

<p>从现在来看，函数<code>mommify</code>中已经有了较多的逻辑，而且有一些重复的判断出现了（<code>"aeuio".indedOf</code>），是时候做一些重构了。</p>

<p>首先将相对独立的计算元音比重的部分抽取成一个函数：</p>

<p>```js
function countVowels(word) {</p>

<pre><code>var count = 0;

for(var i = 0; i &lt; word.length; i++) {
    if("aeiou".indexOf(word[i]) &gt;= 0) {
        count += 1;
    }
}

return count;
</code></pre>

<p>}
```</p>

<p>然后，将重复的<code>"aeiou".indexOf</code>部分抽取为一个独立函数：</p>

<p>```js
function isVowel(character) {</p>

<pre><code>return "aeiou".indexOf(character) &gt;= 0;
</code></pre>

<p>}
```</p>

<p>这样本来的代码就被简化成了：</p>

<p>```js
function mommify(word) {</p>

<pre><code>var count = countVowels(word);
var str = "";

if(count/word.length &gt;= 0.30) {
    for(var i = 0; i &lt; word.length; i++) {
        if(isVowel(word[i])) {
            str += "mommy";
        } else {
            str += word[i];
        }
    }
} else {
    str = word;
}

return str;
</code></pre>

<p>}
```</p>

<p>如果细细读下来，就会发现发现对于元音是否超过30%的判断比较突兀，这里确实了一个<code>业务概念</code>，就是说，此处的<code>if</code>判断并不表意，更好的写法是讲它抽取为一个函数：</p>

<p>```js
function shouldBeMommify(word) {</p>

<pre><code>var count = countVowels(word);
return count/word.length &gt;= 0.30;
</code></pre>

<p>}
```</p>

<p>并且，替换元音的部分，我们也可以从主函数中挪出来，得到一个小函数：</p>

<p>```js</p>

<p>function replace(word) {</p>

<pre><code>var str = "";

for(var i = 0; i &lt; word.length; i++) {
    if(isVowel(word[i])) {
        str += "mommy";
    } else {
        str += word[i];
    }
}

return str;
</code></pre>

<p>}
```</p>

<p>这样，主函数得到了进一步的简化：</p>

<p>```js
function mommify(word) {</p>

<pre><code>if(shouldBeMommify(word)) {
    return replace(word);
} else {
    return word;
}
</code></pre>

<p>}
```</p>

<p>太好了，现在<code>mommify</code>就更加清晰了，并且每个抽取出来的函数都有了更具意义的名字，更清晰的职责。</p>

<h4>第四个任务</h4>

<p>经过了第三步，相信你已经对如何进行<code>TDD</code>有了很好的认识，而且也更有信心进行下一个任务了。同样，我们需要先编写测试用例：</p>

<p>```js
it("should not mommify if there are vowels sequences", function() {</p>

<pre><code>var expected = "shmommyr";
var result = mommify("shear");

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>现在的问题关键是需要判断一个字符串中的前一个是否元音，由于我们之前已经做了足够的重构，现在需要修改的函数就变成了<code>replace</code>子函数，而不是主入口<code>mommify</code>了：</p>

<p>```js
function replace(word) {</p>

<pre><code>var str = "";

for(var i = 0; i &lt; word.length; i++) {
    if(isVowel(word[i])) {
        if(!isVowel(word[i-1])) {
            str += "mommy";
        } else {
            str += "";
        }
    } else {
        str += word[i];
    }
}

return str;
</code></pre>

<p>}
```</p>

<p>测试通过之后，我们可以大胆的进行重构，抽取新的函数<code>next</code>：</p>

<p>```js
function next(current, previous) {</p>

<pre><code>var next = "";

if(isVowel(current)) {
    if(!isVowel(previous)) {
        next = "mommy";
    }
} else {
    next = current;
}

return next;
</code></pre>

<p>}</p>

<p>function replace(word) {</p>

<pre><code>var str = "";

for(var i = 0; i &lt; word.length; i++) {
    str += next(word[i], word[i-1]);
}

return str;
</code></pre>

<p>}
```</p>

<p>最后，如果你想看完整的/最新的代码，可以<a href="https://github.com/abruzzi/mommifier">在github上</a>找到。</p>

<h4>结束（？）</h4>

<p>重构是一个永无止境的实践，你可以不断的抽取，简化，重组。比如上例中对于常量的使用，对于JavaScript中的for的使用等，都可以更进一步。但是你需要权衡，适可而止，如果不小心做的太过，则可能引起过渡设计：引入太过的概念，过于简化的接口等。</p>

<p><code>TDD</code>是一种容易付诸实践的开发方式，在小的，简单的例子上如此，在大的，复杂的场景下也是如此。它优美且高效的地方在于：不假设任何人可以一次就写出完善的应用，而是鼓励小步前进，快速反馈，快速迭代。而演化到最后，得到的往往就是孜孜以求的优美设计。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Yahoo pipes 服务做内容聚合 -- ThoughtWorks好声音]]></title>
    <link href="http://abruzzi.github.com/2014/01/use-yahoo-pipe-service-to-aggregate-blogs-you-care/"/>
    <updated>2014-01-01T19:48:00+11:00</updated>
    <id>http://abruzzi.github.com/2014/01/use-yahoo-pipe-service-to-aggregate-blogs-you-care</id>
    <content type="html"><![CDATA[<h3>ThoughtWorks好声音</h3>

<p><a href="http://voice.thoughtworkers.org/">ThoughtWorks好声音</a>是一个聚合网站，内容来自众ThoughtWorker的博客，我们每周会汇聚一次，从众多的博客中挑选出一些P2(软件卓越)相关的主题，然后编为一辑，再分享出去。</p>

<p>但是从近100个博客中找P2相关的内容，这件事本身非常繁琐，如果每周都做这个重复劳动的话，那么软件卓越从何谈起呢？作为以解放人类为己任的程序员，我们绝对不能忍受纯体力的劳动。</p>

<h4>获取博客地址列表</h4>

<p>之前郑晔做了一个<a href="https://jinshuju.net/">金数据</a>的统计，请各位同事把自己的名字和博客地址登记在一个金数据的表单上：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/blog-colllecting.png" alt="image" /></p>

<p>接下来第一步就是把网页上的所有地址取下来，这一步很容易，从金数据的页面上用jQuery找到表格的第二列，然后将其中的文字取出来：</p>

<p>```js</p>

<p>$("table tr td:nth-child(2)").map(function(key, item) {</p>

<pre><code>return $(item).text().trim(); 
</code></pre>

<p>});</p>

<p>```</p>

<p>写到这里突发奇想，能不能用phantomjs去把这个动作自动化？</p>

<p>```js
page.open(url, function (status) {</p>

<pre><code>if (status !== 'success') {
    console.log('Unable to access network');
} else {
    page.injectJs('jquery.js');

    var links = page.evaluate(function() {
        return $("table tr td:nth-child(2)").map(function(key, value) {
            return $(value).text().trim();
        });
    });

    var results = underscore(links).filter(function(item) {
        return item.length &gt; 0; 
    }).map(function(item) {
        if(!new RegExp('^(https|http)').test(item)) {
            return "http://" + item;
        }
        return item;
    });
}
phantom.exit();
</code></pre>

<p>});</p>

<p>```</p>

<p>这样，results数组中就包含了所有的博客链接了，而且有的同事比较懒，提供的URL中不包含<code>http</code>，这段代码还顺手给这样的url添加了头尾。</p>

<p>然后<strong>第二步</strong>，我<strong>想象</strong>着应该再写个脚本，在这个数组中得每个url的后边加上诸如<code>rss</code>或者<code>atom.xml</code>之类的后缀，然后去获取每个博客的rss文件，然后根据这些信息做一些事情。吃午饭的过程中我还在想象这个工具分为几个模块，用什么样的语言来做开发等等细节。</p>

<p>吃完午饭，突然想起来之前熊杰貌似发过一个yahoo pipes生成的rss，我在邮件中翻出来之后，失望的发现我自己的博客都不在里边，想想熊杰貌似还在乌干达援助非洲人民，那就自己动手重新定义一个吧。</p>

<h4>Yahoo pipes 服务</h4>

<p><a href="http://pipes.yahoo.com/pipes/">Yahoo pipes</a>是一个用来定制聚合的服务，只需要定义好数据源(通常是rss/atom)，然后定义一些操作，比如排序，去重，联合等等。最后这个pipe会生成一个结果集，这些特性简直就是为我们这个需求定制的：</p>

<ol>
<li>将博客地址+'/rss' / 博客地址+'/atom.xml' 添加到一个个的fetcher上</li>
<li>将这些fetcher联合起来</li>
<li>将联合的结果排序(按照发表日期/更新日期)</li>
<li>生成最后的rss</li>
</ol>


<p>yahoo pipes提供的编辑器非常简单易用：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/single-pipe.png" alt="image" /></p>

<p>而且在编辑界面底下有一个预览界面：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/single-preview.png" alt="image" /></p>

<p>当然，当定义好完整的pipe之后，我们的ThoughtWorks好声音的源看起来是这样的：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/tvot-pipe-resized.png" alt="image" /></p>

<p>运行这个pipe之后，得到一个preview的界面：</p>

<p><img src="http://abruzzi.github.com/images/2014/01/tvot-pipe-run-resized.png" alt="image" /></p>

<p>最后，可以将这个pipe公开发布，或者将这个pipe生成的rss订阅到阅读器中，比如<a href="http://www.vienna-rss.org/">vienna</a>:</p>

<p><img src="http://abruzzi.github.com/images/2014/01/vienna-resized.png" alt="image" /></p>

<p>然后就可以一目了然的看到最近有哪些ThoughtWorker更新了自己的博客，又有那些是P2相关的，可以<code>理论上</code>减轻我们编辑很多的工作量。</p>

<h4>结论</h4>

<p>手里是锤子的时候，看着周围的东西都像钉子。有时候，那些又酷又炫的技巧/工具可能并非必须。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2013]]></title>
    <link href="http://abruzzi.github.com/2013/12/by-the-end-of-2013/"/>
    <updated>2013-12-29T16:56:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/12/by-the-end-of-2013</id>
    <content type="html"><![CDATA[<p>总的来说，2013年收获颇丰，感谢同事们(特别鸣谢胡凯，张凯峰，以及RCA的各位同事)的帮助，我的第一本技术书籍<a href="http://icodeit.org/jsccp/">JavaScript核心概念及实践</a>在今年5月出版了。8月到10月，我和王磊，张久坤两位同事，和ThoughtWorks其他office的同事一起，在印度为来自世界各地的毕业生上了近两个月的课。12月从第一个项目上roll off下来，然后加入自己的第一个咨询项目。</p>

<p>在期间还去西电给学生<a href="http://blog.csdn.net/gy0305/article/details/9117859">讲过一次session</a>，<a href="http://www.csdn.net/article/2013-05-29/2815458">接受了CSDN的一次采访</a>，本来打算赶10月份的校园招聘去学校讲点东西，后来由于出差耽搁了。但是感谢王欢给了我一个在郑大晔校上课的机会，我们每周六会对准ThoughtWorker们讲一些软件开发得session(TDD, Refactor, Pair Programming等)。</p>

<p>总之，2013过的充实而紧张，希望来年能更加的充实，也希望可以跟大家分享更多的有意思的session和博客。</p>

<h4>在TWU(ThoughtWorks University) 当老师</h4>

<p>2013年，最大的收获，应该是自己对于<strong>压力</strong>的新的认识。有一回和胡凯聊压力这个事儿，我说我自己是认可平时带着些压力去学习、工作的，胡凯的看法则是不应该是“带着些”，而是带着最大的压力。他给我举了个游泳的例子，说你在岸边是学不会的，只有被被人踢到水里，才有可能学会。</p>

<p>我觉得挺有道理，8月去印度参加TWU，当然有很多困难了，比如语言问题本身；和其他国家来的trainer一起交流的问题；给一群来自世界各地的学生用英文上课的问题；我周五从项目上下来，周六飞去印度普内，周日早上到达休息了半天，然后周三就要给其他国家的trainer用英文讲一个关于社会公正的演讲，而且形式限定在<a href="http://www.pechakucha.org/">pecha kucha</a>上，在这种压力下，我不止一次的后悔为什么把自己逼的这么紧？我的真实想法是把胡凯踢到水里学游泳，我自己回西安的项目继续每天做story。</p>

<p><img src="http://abruzzi.github.com/images/2013/12/twu-prepare-resized.png" alt="image" /></p>

<p>但是周三过去了，我的演讲虽然也不至于震惊四座，但是不论是英文，还是主题，还是演讲技巧本身，都得到了比较正常的feedback。我存活了下来！</p>

<p>如果说这个小范围的，面向trainer的，带有彩排性质的演讲的压力值为100的话，那么下一周，面对着二十多个来自世界各地的毕业生，给他们讲一个关于如何给别人feedback的session，压力值至少为500+。即使是来自墨尔本、伦敦、巴西的trainer都开始表情凝重的备课，我自己的心情就更不用说了。还有人开导我说，不论你有多紧张，坐在底下的那些家伙都比你紧张100倍。</p>

<p><img src="http://abruzzi.github.com/images/2013/12/twu-discuss-resized.png" alt="image" /></p>

<p>我清楚的记得，第一天结束后，我们互相击掌，还去酒吧喝了一杯来庆祝，当然，8点就赶紧撤回住处，准备第二天的session了，但是不管怎样，我又一次的存活下来了！</p>

<p>压力，必须压到自己要放弃，要退缩的那种程度，才能收获最多。一咬牙过去了，就海阔天空，进入一个新境界了。很多时候，自己总会给自己找很多借口，然后自己就把自己荒废了。李仲轩老人讲，练拳也一样，有人一听说有捷径，有了贼心，就不会出功夫了。</p>

<h4>练拳</h4>

<p>我虽然不能算是“自幼喜欢舞刀弄枪”，但是也一直对武术比较感兴趣，只是没有耐心去吃苦练而已。小时候只是跟父亲学过一点小擒拿之类，后来从家中找到一本《少林罗汉十八手》，自学未果，倒是记得一些招式的名字，如<strong>巧纫针，披身捶，僧推门，僧伏虎</strong>之类。2006年，看到了《逝去的武林》后，对内家拳产生了浓厚的兴趣，但是苦于没有老师，倒是我的兄长在石家庄，近水楼台先得月，找到一位教授他练习形意拳的老师，我跟着站了几天三体式，学了个劈拳和崩拳。</p>

<p>但是我自己也知道，那跟没练是一样的，练外行都骗不了。</p>

<p>2007年暑假，我跟<a href="http://v.youku.com/v_show/id_XMjIzNTIyMjY0.html">李林京老师</a>在石家庄学过一段时间的意拳。但是开学之后回到昆明，就开始三天打鱼两天撒网，后来干脆练网也撤了，借口是内家拳练习得有老师，不然十分危险，一旦受伤则后患无穷。武林盛传“练拳容易改拳难”，一旦练错，再来纠正就非常困难，不如不练。</p>

<p>毕业之后，就再也没有练过，但是见过高山，也知道其中的一些窍要，就是不困下功夫练，今年年初开始感觉颈椎不舒服，上班也感觉挺累的，就又开始站站桩休息脊椎。结果一周之内，隐疾全消，而且渐渐觉得精神比以前好一些了，然后就一直坚持站桩，技击桩怕练偏，就站平步桩。</p>

<p>截止今天为止，除了7月份去伦敦的飞机上没站以外（下了飞机赶到酒店赶紧补上），每天都在站。夏天有一次和同事分享任忠信先生的形意拳，有人怀疑是假的，我给他们试了下，虽然没有搭手即飞，发人丈外那么神奇，但是吓吓外行的效果已经有了。</p>

<p>明年一定要抽时间去石家庄找李老师好好学习一段时间。练拳不但在身体上可以让人强健，而且在精神上也有很多的好处。</p>

<p>其实传统武术，最重要的是锻炼脊椎，腰杆挺直之后，内力渐生，丹田气满之后自然中气充足，精神也会变好，再加上老是有一种别人打不过你的优势，自然容易产生自信（大不了打一架嘛，咱不怯）。蔡元培当年说过，要文明其精神，野蛮其体魄，就是这个意思。</p>

<h4>项目</h4>

<p>今年的12月中旬，我从RCA项目上正式Roll off，从2012年4月加入ThoughtWorks之后，就一直在这个项目上。在这个项目上主要关注在软件交付上，和所有的BAU项目一样，在RCA，能学到一个成熟的框架是怎么实实在在运行的，从开发，测试，仿真，生产环境都是通的，如果有心的话，可以接触到自动部署，负载均衡，数据库的主备配置，各级缓存等生产上才会遇到的问题，但是很多时候又会比较无聊，因为可能更多的是在做老代码的维护，bug的修复，新功能的开发可能较少。</p>

<p><img src="http://abruzzi.github.com/images/2013/12/rca-family-resized.png" alt="image" /></p>

<p>RCA总的来说，有经验的人居多，所以交付压力来说要小一些，而且带新人方面也没有太大压力。所以时间长了，大家都会觉得有点疲。我们会定期举行CBS(Come Build Something)，或者CSS(Come Share Something)这样的活动来刺激一下。我们团队上一般有8个人，每次CBS都是有3-4个ideas，然后结对去做，虽然不会产出什么划时代/跨世纪的产品，但是每次也都会有一些产出。可惜在坚持方面做的并不好。从项目上Roll off的当天，团队送我了一本书《人与神话》(据说排在<strong>程序员谎称读过</strong>的经典书籍排行榜的榜首，不过实话实说，当时非常感动，谢谢我们team和我并肩作战近两年的同事+朋友)：</p>

<p><img src="http://abruzzi.github.com/images/2013/12/rca-memory-resized.png" alt="image" /></p>

<p>从项目上roll off之后，加入了西安本地的一个咨询项目，以前端工程师的身份加入，新项目的人对前端开发的经验相对来说都比较少，但是有很强烈的学习愿望，而且动力也很足。新项目本身做起来也比较有意思，各种前端的比较现代的技术(测试，本地构建，CI)，框架(AngularJS, Jasmine)都可以很好的进行实践。</p>

<p><img src="http://abruzzi.github.com/images/2013/12/gis-front-end-resized.png" alt="image" /></p>

<p>刚开始的时候，也是压力巨大，但是咬牙挺过前三天之后，就容易多了。单元在新的一年，可以和新的团队一起将这个项目做好。</p>

<h4>旅游</h4>

<p>年初和老婆去了次厦门，纯粹度假的方式，无计划，无目的，在鼓浪屿上住了两天：</p>

<p>7月份，我和学海兄参加了欧洲的AwayDay，本来准备讲一个关于轻量级web应用开发的session，但是后来由于session太多，我的就被cancel了。</p>

<p><img src="http://abruzzi.github.com/images/2013/12/london-eye-resized.png" alt="image" /></p>

<p>在印度正好赶上印度的AwayDay:</p>

<p><img src="http://abruzzi.github.com/images/2013/12/india-away-day-resized.png" alt="image" /></p>

<p>在普内周边的一个古堡上：</p>

<p><img src="http://abruzzi.github.com/images/2013/12/india-hiking-resized.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将应用程序部署到heroku]]></title>
    <link href="http://abruzzi.github.com/2013/01/developing-with-heroku/"/>
    <updated>2013-01-26T19:02:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/01/developing-with-heroku</id>
    <content type="html"><![CDATA[<h3>heroku</h3>

<p>使用heroku，开发人员可以很容易的将自己的应用程序公开给世界上的其他用户使用，heroku会为你提供一个url，一些预设的空间如数据库（postgresql）等。这对于需要频繁远程showcase的场景提供了非常好的方式，当然对于开发人员向其他的开发人员或者最终用户展现自己的框架的外观/行为等场景也会非常有用。</p>

<h3>在heroku上注册用户</h3>

<p>首先，当然是在heroku上<a href="https://api.heroku.com/signup/devcenter">注册一个开发账户</a>，如果你已经注册过，就请接着第二步</p>

<h3>下载heroku的本地Toolbox</h3>

<p>heroku提供了一个很好用的<a href="https://toolbelt.heroku.com/">工具包</a>，通过这个工具包，开发人员可以很容易的对部署在heroku上的应用程序做操作。</p>

<h3>在本地登陆heroku</h3>

<p>如果没有上传过key的话，heroku会提醒你创建一个新的ssh公钥，然后上传到heroku（这个过程与使用github非常类似）</p>

<p><code>
$ heroku login
Enter your Heroku credentials.
Email: adam@example.com
Password:
Could not find an existing public key.
Would you like to generate one? [Yn]
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
</code></p>

<p>如果已经上传过key，则可以直接登陆</p>

<h3>准备工作</h3>

<p>在本地生成一个应用程序的基本结构，如：<code>Gemfile</code>，目录结构等。然后在本地配置好git环境，比如：</p>

<p><code>
$ git init
$ git add .
$ git commit -m "init"
</code>
准备Procfile：</p>

<p><code>
web: bundle exec ruby app.rb -p $PORT -E production
</code>
<code>app.rb</code>相当于你的应用程序的主入口(main)，<code>-E</code>指定运行环境（此处指定为production），你的应用程序可能会根据次设置来进行一些资源的选择（数据库指向，资源文件位置等）</p>

<p>在上传之前，需要确保自己的应用程序可以在本地正常运行：</p>

<p><code>
foreman start
</code>
应用程序将在本地的5000端口上运行，此时可以做一些简单的验证，保证应用程序运行正常。</p>

<p><code>
$ git add .
$ git commit -m "ready for deploy app to heroku"
</code></p>

<h3>上传你的App</h3>

<p>这时，可以很轻易的将App上传到heroku了：</p>

<p><code>
$ heroku create
$ git push heroku master
</code>
当然，第一次上传可能会比较慢（取决于你应用程序的大小），如果一切正常，heroku将会尝试根据你的Gemfile来安装依赖，安装完成之后，会尝试根据Procfile中的配置启动你的应用程序。</p>

<p>如果你的应用程序会访问数据库（非postgresql的数据库），那么建议在Gemfile中指定当测试时使用该数据库，而在production环境中使用postgresql，因为heroku使用的正是postgresql：</p>

<p>```
configure :test do</p>

<pre><code>DataMapper.setup(:default, ENV['DATABASE_URL'] || "local-db-url")
DataMapper.finalize.auto_upgrade!
</code></pre>

<p>end
```</p>

<p>我的应用在本地使用sqlite，而在heroku中使用其提供的postgresql。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[是时候慢下来了]]></title>
    <link href="http://abruzzi.github.com/2013/01/where-am-i/"/>
    <updated>2013-01-09T20:56:00+11:00</updated>
    <id>http://abruzzi.github.com/2013/01/where-am-i</id>
    <content type="html"><![CDATA[<p>某个晚上，我在网上为自己挑选一个适合出差的行李箱，两个小时之后，我突然发现我停留在了一个瑞士军刀的淘宝店里；本来计划晚上看看AppleScript的资料，结果一个小时之后，我在用python写一个opencv的小程序，又过了一个小时，我停留在Alfred的powerpack的支付页面，面对着15英镑的价格陷入沉思。</p>

<p>而且周围好像每个人都有这样类似的经历。我咨询其他同事遇到类似的情况怎么处理，有人推荐使用Todo列表，而且Todo最好列在纸上。当列表中的Todo被消灭时，会激发你去写下更多的task。这当然是个好办法，我很早的时候就写过一个软件来完成Todo管理：<a href="http://code.google.com/p/stodo/">sTodo</a>。但是当打开电脑之后，时间就完全不受控制了，网络上总是有各种各样好玩的东西，新的框架，新的语言，某种颠覆式的CSS框架，新奇而好用的软件，可以大大提高用户体验的UI库，太多了……。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/stodo_edit.png" alt="sTodo" /></p>

<p>上周三的晚上，回家之后打开电脑，开始了“学习”，事实上是很盲目的在网络上游荡，当我意识到又要重蹈覆辙的时候，我毅然的合起了电脑，然后拿起一本纸质的《JavaScript: The good parts》。最后当我要睡觉时才发现，读了大概30多页，而且以前的一些概念也更加清楚了。而且事实上我并未因为没有打开计算机而有什么实质性的损失。</p>

<p>然后我突然意识到我之前的所谓的学习的方式有很大的问题，网络当然可以为你提供大量的信息，但是很多时候，这些呈碎片装的信息的作用并不如预期般的大。它会帮你解决手头的小问题，但是阻挡了你的视线，你本可以走的更远！</p>

<p>在网络上看资料，总是有一种紧迫感：这么多的东西都不会，落后于时代好多年。打开电脑，一个晚上过去了，你可能读了很多的东西，但是记下来的非常少，因为总是会被各种链接，图片等干扰，这个看似在学习的过程事实上完全是在浪费实践，一天之后，你前一个晚上看到的东西几乎被完全遗忘，然后周而复始。</p>

<p>所以，是时候慢下来，你不会因为没有浏览几个网页，或者少读几篇文章而落后于时代几十年的，你需要好多年才能积累起来的知识，别人同样需要好多年。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/todos.png" alt="image" /></p>

<p>合上电脑，捧起纸质的书籍，世界突然慢了下来，但是却会充盈很多。事实上，放慢脚步，消除网络带来的<strong><em>虚假的紧迫感</em></strong>，反而可以以更快的速度掌握一项技术，一个框架，也可以让印象更加深刻。晚上回家尽量不带电脑，我用trainng经费购买的10本书，现在才读完2.5本，去年5月买的书还有两本没有读完，这些亏欠都需要在脱离电脑的舒服之后才能想起来，也才有可能完成。</p>

<p>慢下来。</p>
]]></content>
  </entry>
  
</feed>
