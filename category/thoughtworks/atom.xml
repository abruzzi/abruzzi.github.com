<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thoughtworks | I code it]]></title>
  <link href="http://abruzzi.github.com/category/thoughtworks/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2013-01-03T18:27:01+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[k-nearest-neighbour算法简介及示例]]></title>
    <link href="http://abruzzi.github.com/blog/2013/01/k-nearest-neighbour/"/>
    <updated>2013-01-03T15:46:00+08:00</updated>
    <id>http://abruzzi.github.com/blog/2013/01/k-nearest-neighbour</id>
    <content type="html"><![CDATA[<h3>background</h3>

<p>元旦放假前，team的同事们想要一起学习一些技术，然后一起做些小东西，有人提到将物理墙上的卡，通过手机拍照，识别出其中的卡号，然后与电子墙同步状态。这是一个非常有意思的主题，会涉及到很多方面的知识，其实有好几个topic，只不过我对人工智能/机器学习等比较有兴趣而已，所以就先自己研究下。</p>

<p>几天下来，关于数字识别的基本的流程已经清晰了，关于图片的预处理及边界标定等都差不多就绪了，剩下比较重要的是<strong>识别</strong>本身了。在这个过程中，遇到了一些很有意思的算法，我自己也花费了好几天才弄明白，所以整理了一下，这一篇先介绍下第一个，也是最简单最好用的KNN算法。</p>

<h3>K-nearest-neighbour简介</h3>

<p>KNN是机器学习中<strong>最简单</strong>的一种无值守的学习方法，但是在实际场景中，效果却经常<strong>非常好</strong>。一般来说，在样本较多，分布均匀的空间中，KNN会收到很好的效果。但是由于KNN会计算空间中的每个点与需要标定的点的距离(甚至需要计算额外的权重信息)，所以计算量会较大。</p>

<p><code>
假设所有的点都均匀的分布在一个平面内，此时的平面密度(单位范围内的点的个数)非常大，而每个子平面内的点的分布与所有点在整个平面内的分布相当。在子平面S中，有一个点Y，则离点X(to be classified)最近的Y很可能与Y同在子平面S中。
</code></p>

<p>比如取出空间中与X距离最近的有5个点(K=5)，其中3个属于C1类，2个属于C2类，则根据少数服从多数原则，X点被归类为C1.这样的一个缺点就是如果空间内的点分布不均匀，那么会有一些误差，如果上面这个场景经常出现，那么分类会越来越偏离(有一个偏心的硬币，投掷100,000次，有90,000次正面)。这样就有引入了对KNN的另一个扩展方式，加入权重的KNN：</p>

<p><code>
当然这种形式的KNN不是很精确，由此引申出了带权重的KNN：可以为每个点都赋予一个权值，每个权值与新的点X的距离有关，通常会取距离的倒数，这样与X最近的点有较高的权重，而较远的点具有较低的权重，这样在投票(voting)阶段可以相对的提高精确度
</code></p>

<h3>KNN的一个python版本示例</h3>

<h4>背景(高斯分布)</h4>

<p>```
import random</p>

<p>def gauss_list(mu, sigma, count=100):</p>

<pre><code>return [random.gauss(mu, sigma) for _ in range(count)]
</code></pre>

<p>```</p>

<p>生成一个随机数数组，数组中的元素符合高斯分布，如</p>

<p><code>
ran = gauss_list(-2, 1, 10)
print ran
</code></p>

<p>运行结果如下：</p>

<p><code>
[-1.3277188634970218, -2.1034487392146817, -0.5924407591392826, -0.30376289085064045, -2.191337071105794, -1.9781081550478732, -3.7937155472105673, -2.538102349796847, -1.3728510997834549, -2.766669661625006]
</code></p>

<p>更进一步，我们可以用这种方式生成平面中的一些点，这些点可以根据分布情况分为两组，一组是以(-4,0)为重心的500个点，另一组是以(4,0)为重心的500个点：</p>

<p>```
def gauss_cluster(center, stdDev, count=500):</p>

<pre><code>return [(random.gauss(center[0], stdDev),
         random.gauss(center[1], stdDev)) for _ in range(count)]
</code></pre>

<p>def make_random_data():</p>

<pre><code>return gauss_cluster((-4, 0), 1) + gauss_cluster((4, 0), 1)
</code></pre>

<p>data = make_random_data()</p>

<p>```</p>

<h4>绘制高斯分布</h4>

<p>```
data = make_random_data()</p>

<p>x = map(lambda x: x[0], data)
y = map(lambda x: x[1], data)</p>

<p>plt.clf()</p>

<p>plt.scatter(x, y, c=x, vmin=0, vmax=20, s=35, alpha=0.75)
plt.colorbar()
plt.grid(True)</p>

<p>plt.show()
```
通过使用matplotlib的绘图功能，将make_random_data生成的点通过图形的方式展现，效果更加直观，图中的两个点集分别表示两个不同的类别。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/gauss-distribution-resized.png" alt="image" /></p>

<h4>KNN</h4>

<p>我们定义KNN分类器，其中两点间的距离按照欧氏公式来求，先计算点集中离x点最近的k个点，然后取得对应的k个label，再按照label个数球max。</p>

<p>比如k=5时，求的的label集合为['O', 'O', 'A', 'A', 'A']，则我们认为这个点应该被分类为A(少数服从多数)。</p>

<p>```
def euclidean_distance(x, y):</p>

<pre><code>return math.sqrt(sum([(a-b)**2 for (a,b) in zip(x,y)]))
</code></pre>

<p>def makeKNNClassifier(data, labels, k, distance):</p>

<pre><code>def classify(x):
    closestPoints = heapq.nsmallest(k, enumerate(data),
                                    key=lambda y: distance(x, y[1]))
    closestLabels = [labels[i] for (i, pt) in closestPoints]
    return max(set(closestLabels), key=closestLabels.count)

return classify
</code></pre>

<p>```</p>

<h4>测试一下</h4>

<p>创建1000个随机点，前500个分类为A(Apple)，后500个分类为O(Orange)，k值为3。</p>

<p>```
data = make_random_data()
labels = ['A'] * 500 + ['O'] * 500</p>

<p>fitter = makeKNNClassifier(data, labels, 3, euclidean_distance)</p>

<p>print fitter((-3, 1))
print fitter((4, 2))
```</p>

<p>图中的两个红色的点分别为P1(-3, 1)和P2(4, 2)。它们都已经被正确的分类。</p>

<p><img src="http://abruzzi.github.com/images/2013/01/knn-plant-resized.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughtworks Immersion Day 3]]></title>
    <link href="http://abruzzi.github.com/blog/2012/08/thoughtworks-immersion-day-3/"/>
    <updated>2012-08-02T00:00:00+08:00</updated>
    <id>http://abruzzi.github.com/blog/2012/08/thoughtworks-immersion-day-3</id>
    <content type="html"><![CDATA[<p><p>早上的热身活动中，我们玩了这样一个游戏：6个人一组坐成一个环，每个人在卡片上写下一句话(或者诗词等)，然后交给下一个人A，A将这句话用图像表达出来，然后传递给下下一个人B，B又根据图像把文字还原出来，交给自己的下一个，依次循环，到最后，你会拿到你自己写的卡，和你的后续们翻译的结果，整个过程中不许讨论。</p> <p><a href="http://abruzzi.github.com/images/2012/08/2012-07-27-09.42.10.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="2012-07-27 09.42.10" border="0" alt="2012-07-27 09.42.10" src="http://abruzzi.github.com/images/2012/08/2012-07-27-09.42.10_thumb.jpg" width="644" height="484" /></a></p> <p>可以看出，仅仅基于“内容”的交流，很难让对方明白你要表达的意思。日常的沟通中，除了最基本的“内容”之外，我们还采用大量的诸如肢体语言，眼神，语调等等，而我们用以表意内容的仅占信息量的7%。事实上，经常有这样的体验，面对面的交流会非常的容易，即使是外语交流也是这样。另一个体验就是我们通过IM聊天的时候，总是会使用表情，标点符号等来使得意思更好的传递。</p> <p>最后一个环节是如何Feedback，<a href="http://www.thoughtworks.com/">Thoughtworks</a>长期以来形成了这样一种机制：你可以给公司的任何同事回馈，比如你的pair在和你结对的时候不注意措辞，某些同事的某些行为令你不舒服等等。这种机制鼓励大家互相促进，增加交流。很多时候，我们很难发现自己身上的问题，但是很容易发现别人的问题，这种feedback机制就可以快速使得自己发现自己的不足，并快速的消除隔阂，更加愉快的投入学习工作中。</p> <p>这里有一些应该注意的地方：</p> <ol> <li>提出Feedback时，要尽量的具体，笼统的描述对当事人没有任何的好处</li> <li>不要对别人的信仰，价值观等方面提出开发，而应局限在行为上</li> <li>Feedback也要注意方式</li></ol> <p>通常可以使用这样的模式：</p> <ol> <li>Ask for permission (Do you have any free time?)</li> <li>One to one</li> <li>I see/hear/smell(<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://abruzzi.github.com/images/2012/08/wlEmoticon-smile.png" />) something</li> <li>And I think/feel it's ……</li> <li>What do you think?</li></ol> <p>不论怎么说，feedback帮助我们快速发现问题，如果有人给feedback，请以开放的态度来对待，并感谢他/她。</p> <p>三天时间很短，但是确实学到了很多的东西。回来后跟<a href="http://www.iamhukai.com/">胡凯</a>聊的时候，他告诉我global的TWI已经取消了，虽然在工作日做这样的培训会有较大的开销，但是公司还是愿意负担这样的成本，因为公司觉得很有必要让我们新入职的社招人员进行一下不同的文化上的冲击。</p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughtworks Immersion Day 2]]></title>
    <link href="http://abruzzi.github.com/blog/2012/08/thoughtworks-immersion-day-2/"/>
    <updated>2012-08-02T00:00:00+08:00</updated>
    <id>http://abruzzi.github.com/blog/2012/08/thoughtworks-immersion-day-2</id>
    <content type="html"><![CDATA[<p><p>日常开发中，我们经常遵循的实践是，使用<em>用户story</em>来划分并确认需求，每个story有一个对应的点(point)。一般来说会将story写在一张卡片上，而很多的story卡会贴到墙上，不同类型的卡可能会用不同的颜色来标注：</p></p>




<p><p><a href="http://abruzzi.github.com/images/2012/08/2012-07-17-08.47.273.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="2012-07-17 08.47.27" border="0" alt="2012-07-17 08.47.27" src="http://abruzzi.github.com/images/2012/08/2012-07-17-08.47.27_thumb.jpg" width="644" height="484" /></a></p></p>




<p><p>而一般书写用的笔会很粗，这样就导致能写在卡片上的信息不会太多，但是又有一些关键信息。这样做的好处就是驱使开发人员尽量频繁的与客户沟通，确认需求，而又不至于在沟通是lost context。</p></p>




<p><p>用户story只是一种确认需求的方式而已，如果一种形式能够做到：</p></p>




<p><ol> <li>回答Why(Feature的商业价值)  </li><li>回答What(Feature做什么)  </li><li>可管理</li></ol></p>




<p><p>那么需求就已经清晰了，不过实践中，我们恰好比较喜欢用户story这种形式而已。另外一个比较容易误解的是估点，比如一个点对应一对pair/天等。事实上，点是一个相对的概念，先将一个迭代(一周-两周为周期)中需要做的需求分割成小的用户story，然后找出一个比较容易估计的作为基准，然后将其他的卡片与此卡对比，如果大家都认为更难一些，那么就从候选数列中选出下一个数字来作为它的点数，反之亦然。通常我们采用的数列是斐波纳契数列(1,2,3,5,8)，但是5个点并不是说比1个点的卡难做5倍(需要投入5倍的人力，时间)，只是说这张卡比1个点的卡更难做，也比2，3个点的卡更难做，仅此而已。</p></p>




<p><p>如果你愿意，完全可以在你的团队中采用其他的表示方法，比如我最近读到一篇博客讲述可以使用自行车，摩托车，小汽车，卡车等来估点。这样可以避免人们对数字长期以来建立的计算关系。</p></p>




<p><p>一般会将一个业务流程绘制出来，然后根据这样的原则进行分割：</p></p>




<p><ol> <li>每个story应该可以独立交付  </li><li>每个story应该具有商业价值，对用户可以带来好处  </li><li>尽可能的不要依赖其他story  </li><li>尽可能的小，这样才能被管理</li></ol></p>




<p><p>我们的课堂作业是模拟网上购物的流程，绘制流程图，切分story，估点。每个小组都有10分钟的brain storm时间，然后大家一起来写卡，很有意思。</p></p>




<p><p><a href="http://abruzzi.github.com/images/2012/08/2012-07-26-11.45.15.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="2012-07-26 11.45.15" border="0" alt="2012-07-26 11.45.15" src="http://abruzzi.github.com/images/2012/08/2012-07-26-11.45.15_thumb.jpg" width="644" height="484" /></a></p></p>




<p><p>下午的培训是将上午讲解到的知识点巩固，但是形式非常有趣，每个组都分配一个客户，客户提出一些需求(用乐高来完成一个小怪物)，然后小组按照用户story来估点，排优先级，然后分成pair来进行开发，过程中要不断的和用户确认需求，做的过程中让客户参与进来，不断改进。在前两个迭代中，我们遇到很多问题，但是很快做出了调整。</p></p>




<p><p>到第三次迭代之后，我们已经基本做出了用户接受的产品：</p></p>




<p><p><a href="http://abruzzi.github.com/images/2012/08/2012-07-26-16.55.11.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="2012-07-26 16.55.11" border="0" alt="2012-07-26 16.55.11" src="http://abruzzi.github.com/images/2012/08/2012-07-26-16.55.11_thumb.jpg" width="644" height="484" /></a></p></p>




<p><p>感受比较深的一点是：</p></p>




<p><ol> <li>要相信自己的term，  </li><li>沟通非常重要，不论是对内还是对外  </li><li>积极与客户协商(好产品会使双方都受益)</li></ol></p>




<p><p>关于这种培训，经常听到一个令人不舒服的词是“洗脑”，没有人的脑可以被别人洗掉。不过话又说回来了，如果非要称其为“洗脑”的话，这次“洗脑”非常成功(虽然我更喜欢称其为“洗礼”)，我们都很喜欢这种形式，这种高含金量的“洗脑”过程，而且大家都很享受这个过程。</p>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughtworks Immersion Day 1]]></title>
    <link href="http://abruzzi.github.com/blog/2012/08/thoughtworks-immersion-day-1/"/>
    <updated>2012-08-01T00:00:00+08:00</updated>
    <id>http://abruzzi.github.com/blog/2012/08/thoughtworks-immersion-day-1</id>
    <content type="html"><![CDATA[<p><p>进入<a href="http://www.thoughtworks.com/">Thoughtworks</a>已经有差不多4个月了，对于TDD，敏捷开发等有了一点基本的，感性的认识，也知道了一些简单的实践，但是知识非常的不系统，很离散，很破碎。</p></p>




<p><p><a href="http://www.thoughtworks.com/">Thoughtworks</a>为社招的，有一定经验的员工提供一种内部培训，名叫TWI(对应的，对于毕业生，有一次为期6周的TWU(ThoughtWorks University)，地点在印度)，初衷是让已经在公司工作了一段时间的同事更好的理解公司的文化(当然，也可以吸收这些在其他公司工作过的同事带进来的不同的文化)。TWI培训主要是针对敏捷开发实践的，当然也有一些公司的历史，文化等的介绍。</p></p>




<p><p><a href="http://abruzzi.github.com/images/2012/08/2012-07-25-17.29.371.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="2012-07-25 17.29.37" border="0" alt="2012-07-25 17.29.37" src="http://abruzzi.github.com/images/2012/08/2012-07-25-17.29.37_thumb1.jpg" width="644" height="484" /></a></p></p>




<p><p><a href="http://www.thoughtworks.com/">Thoughtworks</a>是一个非常尊重dev的公司，这一点可以追溯到公司创建之初，当时公司宣传的理念是“university but pay”，就很明确的表达出了公司的一些理念：这里的层级结构像在大学中一样平坦，大家在这里获得并分享知识，一起成长，但是又有工资。Martin Fowler有篇关于<a href="http://www.martinfowler.com/bliki/RoysSocialExperiment.html">Thoughtworks是什么</a>的文章(事实上，我最初也正是被这篇文章所吸引，而产生加入<a href="http://www.thoughtworks.com/">Thoughtworks</a>的想法的)，非常有意思。</p></p>




<p><p>历史上，当现实与<a href="http://www.thoughtworks.com/">Thoughtworks</a>尊崇的文化有冲突时，如何平衡呢？Thoughtworks的一贯做法是：不向损害文化的现实妥协，哪怕会因此而付出很大的代价。事实上，每个公司都会在不同程度上尊重自己的开发人员(毕竟，他们是为你工作的)，但是很难见到哪个公司做的比Thoughtworks更好。当然，每个人理解的尊重的方式都可能不同的，我自己比较认可而且Thoughtworks也提供给我的方式是这样的：</p></p>




<p><ol> <li>你可以专心致志的做开发  </li><li>你可以自由的表达自己的想法，和别人讨论设计  </li><li>公司提供了宽松，开放的环境，鼓励交流  </li><li>有很多优秀的开发人员在你周围，你可以随意与他们讨论  </li><li>软硬件都是为了支持开发团队而展开的  </li><li>虽然你是开发人员，你可以take更多的responsibility，比如QA/BA等  </li><li>有很多有意思的和不那么有意思的项目，鼓励学习更多的技能  </li><li>没有常见的“死领导”，肩膀上很轻松  </li><li>鼓励你分享自己的知识</li></ol></p>




<p><p>事实上，对于Thoughtworks来说，员工永远是其最为宝贵的资产，办公室，计算机，玻璃墙，所有都是可以替代的，唯独这些自称为Thoughtworker的，才是最宝贵并且不可替代的。</p></p>




<p><p>TWI的组织者也显然为这种内部培训投入了很多的精力和实践，使得我们的学习过程一直处于轻松，活跃的气氛中，可以说是我参加过最精彩的培训，做到了真正的寓教于乐。</p></p>




<p><p><a href="http://abruzzi.github.com/images/2012/08/2012-07-25-15.40.121.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="2012-07-25 15.40.12" border="0" alt="2012-07-25 15.40.12" src="http://abruzzi.github.com/images/2012/08/2012-07-25-15.40.12_thumb.jpg" width="644" height="484" /></a></p></p>




<p><p>言归正传，什么是敏捷呢？简而言之，就是敏捷地进行软件开发。如何做到“敏捷地”呢？有很多不同的理论支持，这些理论也并非凭空产生，是通过大量的工程实践而总结出来的经验，事实上，敏捷开发是由很多的方法论组成的集合，敏捷宣言中提到的：</p></p>




<p><ol> <li>个体与交互 over 过程和工具  </li><li>可以工作的软件 over 面面俱到的文档  </li><li>客户合作 over 合同谈判  </li><li>响应变化 over 遵循计划</li></ol></p>




<p><p>(虽然右边的项也有价值，但是我们认为左边的项有更大的价值)</p></p>




<p><p>可以看到，这些都是比较common的一些原则，并没有规定注入如TDD，结对之类的实践。Thoughtworks为什么要使用这些实践呢？因为这些实践是我们在实际项目中，觉得行之有效：能保证软件质量和开发效率，能帮助团队迅速成长，对公司和个人都很有帮助。与其他所有的学习规律一样：</p></p>




<p><ol> <li>首先follow一种实践，并身体力行  </li><li>与实际问题结合，发现实践可能的不足  </li><li>改进这种实践，并将其分享</li></ol></p>




<p><p>外界对于<a href="http://www.thoughtworks.com/">Thoughtworks</a>有一些传言，经常会给不熟悉的人这样一种错觉：一群不会编程，只是死记硬背下一些方法论的年轻人，到处招摇撞骗。事实上，Thoughtworker们是我见过的，最具活力，也最热心于钻研技术，热爱分享的年轻人。而且我没有遇到任何一个同事是将敏捷奉为圭臬，或者将其上升到不容置疑的高度，大家都会遵守一些原则，也会采用一些实践，但是不会轻易相信那就是最佳的方式。</p></p>




<p><p>可能最后一段看着像是在写广告，那就请将他当成广告吧。给那些曾经像我一样，热爱技术却感觉希望渺茫，每天做一些平淡而无挑战的工作，但是又渴望改变，渴望和更多优秀的同好们一起工作的人们的一个广告。她可能并非最好的选择，但是她绝对是一个值得一试的好选择。</p>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revert workflow in git]]></title>
    <link href="http://abruzzi.github.com/blog/2012/07/revert-workflow-in-git/"/>
    <updated>2012-07-17T00:00:00+08:00</updated>
    <id>http://abruzzi.github.com/blog/2012/07/revert-workflow-in-git</id>
    <content type="html"><![CDATA[<p><h2>git中Revert的基本使用流程</h2></p>




<p><ul>
<li>git log (找出引入bug的commit, 比如说是<em>...d4e5f6...</em>)</li>
<li>git revert <em>...d4e5f6...</em></li>
<li>git push</li>
</ul></p>




<p><p>如果不幸这个过程中有其他同事进行了push，且与你的commit有冲突，则需要</p></p>




<p><pre><code>git pull --rebase
</code></pre></p>




<p><p>解决冲突之后，按照标准的提交流程操作:</p></p>




<p><pre><code>git add &lt;changes&gt;
</code></pre></p>




<p><p>最后再将这个revert(也就是一个commit)push到remote上。</p></p>




<p><p>一般来说，这时候我们需要在<em>work tree</em>里fix引入的bug，所以需要对刚才的revert做一次revert，这时候引入错误的commit应该在我们的<em>work tree</em>中，这样就可以按照正常的开发流程来做了: push(对revert的push)成功之后，会得到一个新的commit的hash，比如叫<em>...a1b2c3...</em>,则使用：</p></p>




<p><pre><code>git revert -n ...a1b2c3...
</code></pre></p>




<p><p>现在我们的work tree里就是需要修改的代码了。</p>
</p>

]]></content>
  </entry>
  
</feed>
