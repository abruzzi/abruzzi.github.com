<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reflux | I code it]]></title>
  <link href="http://abruzzi.github.com/category/reflux/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2015-11-10T00:42:51+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[你为什么应该试一试Reflux？]]></title>
    <link href="http://abruzzi.github.com/2015/11/get-started-with-reflux/"/>
    <updated>2015-11-09T23:03:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/11/get-started-with-reflux</id>
    <content type="html"><![CDATA[<h3>一点背景</h3>

<p>React在设计之初就只关注在View本身上，其余部分如<code>数据的获取</code>，<code>事件处理</code>等，全然不在考虑之内。不过构建大型的Web前端应用，这些点又实在不可避免。所以Facebook的工程师提出了前端的<code>Flux</code>架构，这个架构的最大特点是<code>单向数据流</code>（后面详述）。但是<code>Flux</code>本身的实现有很多不合理的地方，比如单例的Dispatcher会在系统中有多种事件时导致臃肿的<code>switch-cases</code>等。</p>

<p>这里是Facebook官方提供的提供<a href="https://github.com/facebook/flux/tree/master/examples/flux-todomvc#structure-and-data-flow">Flux的结构图</a>。</p>

<p><img src="/images/2015/11/flux-diagram-resized.png" alt="Flux Diagram" /></p>

<p>其实整个Flux背后的思想也<a href="http://bitquabit.com/post/the-more-things-change/">不是什么新东西</a>。在很久之前，Win32的消息机制（以及很多的GUI系统）就在使用这个模型，而且这也是一种被证实可以用来构建大型软件的模型。</p>

<p>鉴于Flux本身只是一个架构，而且Facebook提供的参考实现又有一些问题，所以社区有了很多版本的Flux实现。比如我们这里会用到的<a href="http://spoike.ghost.io/deconstructing-reactjss-flux/">Reflux</a>。</p>

<h3>Reflux简介</h3>

<p>简而言之，<a href="https://github.com/reflux/refluxjs">Reflux</a>里有两个组件：Store和Action。Store负责和数据相关的内容：从服务器上获取数据，并更新与其绑定的React组件（view controller）;Action是一个事件的集合。Action和Store通过convention来连接起来。</p>

<p>具体来说，一个典型的过程是：</p>

<ol>
<li>用户的动作(或者定时器)在组件上触发一个Action</li>
<li>Reflux会调用对应的Store上的callback（自动触发）</li>
<li>这个callback在执行结束之后，会显式的触发（trigger）一个数据</li>
<li>对应的组件（可能是多个）的state会被更新</li>
<li>React组件检测到state的变化后，会自动重绘自身</li>
</ol>


<p><img src="/images/2015/11/reflux-data-flow.png" alt="reflux data flow" /></p>

<h3>一个例子</h3>

<p>我们这里将使用React/Reflux开发一个实际的例子，从最简单的功能开始，逐步将其构建为一个较为复杂的应用。</p>

<p>这个应用是一个书签展示应用（数据来源于我的Google Bookmarks）。第一个版本的界面是这样的：</p>

<p><img src="/images/2015/11/bookmarks-list-resized.png" alt="bookmarks list" /></p>

<p>要构建这样一个列表应用，我们需要这样几个部分：</p>

<ol>
<li>一个用来<code>fetch</code>数据，存储数据的store （BookmarkStore）</li>
<li>一个用来表达事件的<code>Action</code>（BookmarkActions）</li>
<li>一个列表组件（BookmarkList）</li>
<li>一个组件条目组件（Bookmark）</li>
</ol>


<h4>定义Actions</h4>

<p>```js
var Reflux = require('reflux');
var BookmarkActions = Reflux.createActions([</p>

<pre><code>'fetch'
</code></pre>

<p>]);</p>

<p>module.exports = BookmarkActions;
```</p>

<p>第一个版本，我们只需要定义一个<code>fetch</code>事件即可。然后在<code>Store</code>中编写这个Action的回调：</p>

<h4>定义Store</h4>

<p>```js
var $ = require('jquery');
var Reflux = require('reflux');
var BookmarkActions = require('../actions/bookmark-actions');</p>

<p>var Utils = require('../utils/fetch-client');</p>

<p>var BookmarkStore = Reflux.createStore({</p>

<pre><code>listenables: [BookmarkActions],

init: function() {
    this.onFetch();
},

onFetch: function() {
    var self = this;
    Utils.fetch('/bookmarks').then(function(bookmarks) {
        self.trigger({
            data: bookmarks,
            match: ''
        });
    });
}
</code></pre>

<p>});</p>

<p>module.exports = BookmarkStore;
```</p>

<p>此处，我们使用<code>listenables: [BookmarkActions]</code>来将Store和Action关联起来，根据<code>convention</code>，<code>on</code>+事件名称就是回调函数的名称。这样当<code>Action</code>被触发的时候，<code>onFetch</code>会被调用。当获取到数据之后，这里会显式的<code>trigger</code>一个数据。</p>

<h4>List组件</h4>

<p>```js
var React = require('react');
var Reflux = require('reflux');</p>

<p>var BookmarkStore = require('../stores/bookmark-store.js');
var Bookmark = require('./bookmark.js');</p>

<p>var BookmarkList = React.createClass({</p>

<pre><code>mixins: [Reflux.connect(BookmarkStore, 'bookmarks')],

getInitialState: function() {
    return {
        bookmarks: {data: []}
    }
},

render: function() {
    var list = [];
    this.state.bookmarks.data.forEach(function(item) {
      list.push(&lt;Bookmark title={item.title} created={item.created}/&gt;)
    });

    return &lt;ul&gt;
        {list}
    &lt;/ul&gt;
}
</code></pre>

<p>});</p>

<p>module.exports = BookmarkList;
```</p>

<p>在组件中，我们通过<code>mixins: [Reflux.connect(BookmarkStore, 'bookmarks')]</code>将Store和组件关联起来，这样List组件<code>state</code>上的<code>bookmarks</code>就和<code>BookmarkStore</code>连接起来了。当<code>state.bookmarks</code>变化之后，<code>render</code>方法就会被自动调用。</p>

<p>对于每一个书签，就只是简单的展示内容即可：</p>

<h4>Bookmark组件</h4>

<p>```js
var React = require('react');
var Reflux = require('reflux');
var moment = require('moment');</p>

<p>var Bookmark = React.createClass({</p>

<pre><code>render: function() {
    var created = new Date(this.props.created * 1000);
    var date = moment(created).format('YYYY-MM-DD');

    return &lt;li&gt;
        &lt;div className='bookmark'&gt;
            &lt;h5 className='title'&gt;{this.props.title}&lt;/h5&gt;
            &lt;span className='date'&gt;Created @ {date}&lt;/span&gt;
        &lt;/div&gt;
    &lt;/li&gt;;
}
</code></pre>

<p>});</p>

<p>module.exports = Bookmark;
```</p>

<p>这里我使用了<code>moment</code>库将<code>unix timestamp</code>转换为日期字符串，然后写在页面上。</p>

<p>最后，<code>Utils</code>只是一个对<code>jQuery</code>的包装：</p>

<p>```js
var $ = require('jquery');
var Promise = require('promise');</p>

<p>module.exports = {</p>

<pre><code>fetch: function(url) {
    var promise = new Promise(function (resolve, reject) {
        $.get(url).done(resolve).fail(reject);
    });

    return promise;
}
</code></pre>

<p>}
```</p>

<p>我们再来总结一下，<code>BookmarkStore</code>在初始化的时候，显式地调用了<code>onFetch</code>，这个动作会导致<code>BookmarkList</code>组件的<code>state</code>的更新，这个更新会导致<code>BookmarkList</code>的重绘，<code>BookmarkList</code>会依次迭代所有的<code>Bookmark</code>。</p>

<h3>更复杂一些</h3>

<p>当然，Reflux的好处不仅仅是上面描述的这种单向数据流。当<code>Store</code>，<code>Actions</code>以及具体的<code>组件</code>被解耦之后，构建大型的应用才能成为可能。我们来对上面的应用做一下扩展：我们为列表添加一个搜索功能。</p>

<p>随着用户的键入，我们发送请求到服务器，将过滤后的数据渲染为新的列表。我们需要这样几个东西</p>

<ol>
<li>一个SearchBox组件</li>
<li>一个新的<code>Action</code>：<code>search</code></li>
<li><code>BookmarkStore</code>上的一个新方法<code>onSearch</code></li>
<li>组件<code>SearchBox</code>需要和<code>BookmarkActions</code>关联起来</li>
</ol>


<p>为了让用户看到匹配的效果，我们需要将匹配到的关键字高亮起来，这样我们需要在<code>Bookmark</code>组件中监听<code>BookmarkStore</code>，当<code>BookmarkStore</code>发生变化之后，我们就可以即时修改书签的<code>title</code>了。</p>

<h4>搜索框组件</h4>

<p>```js
var React = require('react');
var BookmarkActions = require('../actions/bookmark-actions');</p>

<p>var SearchBox = React.createClass({</p>

<pre><code>performSearch: function() {
    var keyword = this.refs.keyword.value;
    BookmarkActions.search(keyword);
},

render: function() {
    return &lt;div className="search"&gt;
        &lt;input type='text' 
            placeholder='type to search...' 
            ref="keyword"
            onChange={this.performSearch} /&gt;    
    &lt;/div&gt;
}
</code></pre>

<p>});</p>

<p>module.exports = SearchBox;
```</p>

<h4>BookmarkStore</h4>

<p>```js
var $ = require('jquery');
var Reflux = require('reflux');
var BookmarkActions = require('../actions/bookmark-actions');</p>

<p>var Utils = require('../utils/fetch-client');</p>

<p>var BookmarkStore = Reflux.createStore({</p>

<pre><code>listenables: [BookmarkActions],

init: function() {
    this.onFetch();
},

onFetch: function() {
    var self = this;
    Utils.fetch('/bookmarks').then(function(bookmarks) {
        self.trigger({
            data: bookmarks,
            match: ''
        });
    });
},

onSearch: function(keyword) {
    var self = this;

    Utils.fetch('/bookmarks?keyword='+keyword).then(function(bookmarks) {
        self.trigger({
            data: bookmarks,
            match: keyword
        });
    });
}
</code></pre>

<p>});</p>

<p>module.exports = BookmarkStore;
```</p>

<p>我们在<code>BookmarkStore</code>中添加了<code>onSearch</code>方法，它会根据关键字来调用后台API进行搜索，并将结果<code>trigger</code>出去。由于数据本身的结构并没有变化（只是数量会由于过滤而变少），因此<code>BookmarkList</code>是无需修改的。</p>

<h4>书签高亮</h4>

<p>当搜索匹配之后，我们可以将对应的关键字高亮起来，这时候我们需要修改<code>Bookmark</code>组件：</p>

<p>```js
var React = require('react');
var Reflux = require('reflux');
var moment = require('moment');</p>

<p>var BookmarkStore = require('../stores/bookmark-store.js');</p>

<p>var Bookmark = React.createClass({</p>

<pre><code>mixins: [Reflux.listenTo(BookmarkStore, 'onMatch')],

onMatch: function(data) {
    this.setState({
        match: data.match
    });
},

getInitialState: function() {
    return {
        match: ''
    }
},

render: function() {
    var created = new Date(this.props.created * 1000);
    var date = moment(created).format('YYYY-MM-DD');

    var title = this.props.title;
    if(this.state.match.length &gt; 0) {
        title = &lt;span
            dangerouslySetInnerHTML={{
              __html : this.props.title.replace(new RegExp('('+this.state.match+')', "gi"), '&lt;span class="highlight"&gt;$1&lt;/span&gt;')
            }} /&gt;
    }

    return &lt;li&gt;
        &lt;div className='bookmark'&gt;
            &lt;h5 className='title'&gt;{title}&lt;/h5&gt;
            &lt;span className='date'&gt;Created @ {date}&lt;/span&gt;
        &lt;/div&gt;
    &lt;/li&gt;;
}
</code></pre>

<p>});</p>

<p>module.exports = Bookmark;
```</p>

<p><code>mixins: [Reflux.listenTo(BookmarkStore, 'onMatch')]</code>表示，我们需要监听<code>BookmarkStore</code>的变化，当变化发生时，调用<code>OnMatch</code>方法。<code>OnMatch</code>会修改组件的<code>match</code>属性，从而触发<code>render</code>。</p>

<p>在<code>render</code>中，我们替换关键字为<code>&lt;span class="highlight"&gt;$keyword&lt;/span&gt;</code>，这样就可以达到预期的效果了：</p>

<p><img src="/images/2015/11/bookmark-search-resized.png" alt="bookmark search" /></p>

<h3>结论</h3>

<p>从上面的例子可以看到，我们从一开始就引入了Reflux。虽然第一个版本和React原生的写法差异并不是很大，但是当加入<code>SearchBox</code>功能之后，需要修改的地方非常清晰：添加<code>Actions</code>，在对应的<code>Store</code>中添加callback，然后在组件中使用。这种方法不仅可以最大程度的使用<code>React</code>的长处（diff render），而且使得代码逻辑变得较为清晰。</p>

<p>随着业务代码的不断增加，Reflux提供的方式确实可以在一定程度上控制代码的复杂性和可读性。</p>

<p>完整的<a href="https://github.com/abruzzi/react-reflux-demo">代码地址在这里</a>。</p>

<h3>其他参考</h3>

<ul>
<li><a href="http://www.bunniesandbeatings.com/RefluxManifesto/">Reflux“宣言”</a></li>
<li><a href="https://news.ycombinator.com/item?id=10381015">Flux is the new WndProc</a></li>
<li><a href="https://ochronus.com/react-reflux-example/">React Reflux Example</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
