<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Language | I code it]]></title>
  <link href="http://abruzzi.github.com/category/language/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-02-14T09:42:10+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[工程中的编译原理 -- Mapfile解析器]]></title>
    <link href="http://abruzzi.github.com/2015/10/mapfile-parser/"/>
    <updated>2015-10-05T12:59:00+08:00</updated>
    <id>http://abruzzi.github.com/2015/10/mapfile-parser</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>Mapfile是<code>MapServer</code>用来描述一个地图的配置文件。它是一个很简单的<code>声明式</code>语言，一个地图（Map）可以有多个层（Layer），每个层可以有很多属性（键值对）。在一个层的定义中，还可以定义若干个类（Class），这个类用以管理不同的样式（Style）。而每个类或者样式都可以由若干个属性（键值对）。</p>

<p>这里有一个实际的例子：</p>

<p>```
LAYER
  NAME         "counties"
  DATA         "counties-in-shaanxi-3857"
  STATUS       default
  TYPE         POLYGON
  TRANSPARENCY 70</p>

<p>  CLASS</p>

<pre><code>NAME       "polygon"
STYLE
  COLOR     255 255 255
  OUTLINECOLOR 40 44 52
END
</code></pre>

<p>  END
END
```</p>

<h4>最简单的层的定义</h4>

<p>最简单的情形是，我们定义了一个层<code>Layer</code>，但是没有指定任何的属性：</p>

<p><code>
LAYER
END
</code></p>

<p>我们期望parser可以输出：</p>

<p><code>js
{layer: null}
</code></p>

<p>要做到这一步，首先需要定义符号<code>LAYER</code>和<code>END</code>，以及一些对空格，非法字符的处理等：</p>

<p><code>js
\s+                     /* skip whitespace */
\n|\r\n                 /* skip whitespace */
"LAYER"                 return "LAYER"
"END"                   return "END"
&lt;&lt;EOF&gt;&gt;                 return 'EOF'
.                       return 'INVALID'
</code></p>

<p>对于，空格，回车换行等，我们都直接跳过。对应的<code>BNF</code>也非常简单：</p>

<p>```js
expressions</p>

<pre><code>: decls EOF {return $1;}
;
</code></pre>

<p>decls</p>

<pre><code>: LAYER END {$$ = {layer: null}}
;
</code></pre>

<p>```</p>

<h4>为层添加属性</h4>

<p>接下来我们来为层添加<code>Name</code>属性，首先还是添加符号<code>NAME</code>和对字符串的定义。这里的字符串被定义为：由双引号括起来的所有内容。</p>

<p><code>js
"NAME"                  return "NAME"
'"'("\\"["]|[^"])*'"'   return 'STRING'
[a-zA-Z]+               return 'WORD'
</code></p>

<p>然后我们就可以为<code>BNF</code>添加一个新的节：</p>

<p>```js
decls:
  LAYER decl END
  {$$ = {layer: $2}}
  ;</p>

<p>decl:
  NAME STRING
  {$$ = $2.substring(1, $2.length - 1)};
```</p>

<p>在<code>decl</code>中，我们将获得的字符串两头的引号去掉<code>$2.substring</code>。这样<code>decl</code>的值就会是字符串本身，而不是带着双引号的字符串了。修改之后的代码可以解析诸如这样的声明：</p>

<p>```
LAYER</p>

<pre><code>NAME "counties"
</code></pre>

<p>END
```</p>

<p>并产生这样的输出：</p>

<p><code>js
{ layer: 'counties' }
</code></p>

<p>但是如果我们用来解析两个以上的属性：</p>

<p><code>js
LAYER
  NAME         "counties"
  DATA         "counties-in-shaanxi-3857"
END
</code></p>

<p>解析器会报告一个错误：</p>

<p>```sh
$ node map.js expr</p>

<p>/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:106</p>

<pre><code>    throw new Error(str);
          ^
</code></pre>

<p>Error: Parse error on line 2:
...       "counties"  DATA         "counti
----------------------^
Expecting 'END', got 'WORD'</p>

<pre><code>at Object.parseError (/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:106:15)
at Object.parse (/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:171:22)
at Object.commonjsMain [as main] (/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:620:27)
at Object.&lt;anonymous&gt; (/Users/jtqiu/develop/ideas/jison-demo/mapfile/map.js:623:11)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Function.Module.runMain (module.js:497:10)
at startup (node.js:119:16)
</code></pre>

<p>```</p>

<p>即，期望一个<code>END</code>符号，但是却看到了一个<code>WORD</code>符号。我们只需要稍事修改，就可以让当前的语法支持多个属性的定义：</p>

<p>```js
decls:
  LAYER pairs END
  {$$ = {layer: $2}}
  ;</p>

<p>pairs:
  pair
  {$$ = $1}
  |
  pairs pair
  {$$ = merge($1, $2)}
  ;</p>

<p>pair:
  NAME STRING
  {$$ = {name: $2.substring(1, $2.length - 1)}}
  | DATA STRING
  {$$ = {data: $2.substring(1, $2.length - 1)}};
```</p>

<p>先看，<code>pair</code>的定义，它由<code>NAME STRING</code>或者<code>DATA STRING</code>组成，是我们语法中的终结符。再来看<code>pairs</code>的定义：</p>

<p><code>js
pairs: pair | pairs pair;
</code></p>

<p>这个递归的定义可以保证我们可以写一条<code>pair</code>或者多条<code>pairs pair</code>属性定义语句。而对于多条的情况，我们需要将这行属性<code>规约</code>在一起，即当遇到这样的情形时：</p>

<p><code>
NAME         "counties"
DATA         "counties-in-shaanxi-3857"
</code></p>

<p>我们需要产生这样的输出：<code>{name: "counties", data: "counties-in-shaanxi-3857"}</code>。但是由于符号是逐个匹配的，我们会得到这样的匹配结果：<code>{name: "counties"}</code>和<code>{data: "counties-in-shaanxi-3857"}</code>，因此我们需要编写一个简单的函数来合并这些属性：</p>

<p>```js
  function merge(o1, o2) {</p>

<pre><code>var obj = {};

for(var k in o1) {
  obj[k] = o1[k];
}
for(var v in o2) {
  obj[v] = o2[v];
}

return obj;
</code></pre>

<p>  }
```</p>

<p>按照惯例，这种自定义的函数需要被定义在<code>%{</code>和<code>}%</code>括起来的<code>section</code>中：</p>

<p>```js
...
[a-zA-Z]+               return 'WORD'
[0-9]+("."[0-9]+)?      return 'NUMBER'
&lt;<EOF>>                 return 'EOF'
.                       return 'INVALID'</p>

<p>/lex</p>

<p>%{
  function merge(o1, o2) {</p>

<pre><code>var obj = {};

for(var k in o1) {
  obj[k] = o1[k];
}
for(var v in o2) {
  obj[v] = o2[v];
}

return obj;
</code></pre>

<p>  }
%}</p>

<p>%start expressions</p>

<p>%% /<em> language grammar </em>/
...</p>

<p>```</p>

<p>现在我们的解析器就可以识别多条属性定义了：</p>

<p><code>sh
$ node map.js expr
{ layer: { name: 'counties', data: 'counties-in-shaanxi-3857' } }
</code></p>

<h4>嵌套的结构</h4>

<p>现在新的问题又来了，我们的解析器现在可以识别对层的对个属性的解析了，不过由于<code>CLASS</code>并不是由简单的键值对定义的，所以还需要进一步的修改：</p>

<p><code>js
classes:
  CLASS pairs END
  {$$ = {class: $2}}
  ;
</code></p>

<p>类由<code>CLASS</code>关键字和<code>END</code>关键字定义，而类的属性定义和<code>Layer</code>的属性定义并无二致，都可以使用<code>pairs</code>（多条属性）。而<code>classes</code>事实上是<code>pair</code>的另一种形式，就像对属性的定义一样，所以：</p>

<p><code>js
pair:
  NAME STRING
  {$$ = {name: $2.substring(1, $2.length - 1)}}
  | DATA STRING
  {$$ = {data: $2.substring(1, $2.length - 1)}}
  | classes
  {$$ = $1};
</code></p>

<p>这样，解析器就可以识别<code>CLASS</code>子句了。我们注意到，在<code>CLASS</code>中，还可以定义<code>STYLE</code>，因此又需要稍作扩展：</p>

<p>```js
pair:
  NAME STRING
  {$$ = {name: $2.substring(1, $2.length - 1)}}
  | DATA STRING
  {$$ = {data: $2.substring(1, $2.length - 1)}}
  | classes
  {$$ = $1}
  | styles
  {$$ = $1};</p>

<p>styles:
  STYLE pairs END
  {$$ = {style: $2}}
  ;
```</p>

<p>这样，我们的解析器就可以处理样例中的所有语法了：</p>

<p>```sh
node map.js expr
{ layer:
   { name: 'counties',</p>

<pre><code> data: 'counties-in-shaanxi-3857',
 status: 'default',
 type: 70,
 class: { name: 'polygon', style: [Object] } } }
</code></pre>

<p>```</p>

<p>完整的代码在github上的<a href="https://github.com/abruzzi/jison-demos">这个repo中</a>。</p>

<h3>总结</h3>

<p>使用<code>BNF</code>定义一个复杂配置文件的规则，事实上一个比较容易的工作。要手写这样一个解析器需要花费很多的时间，而且当你需要parser多种配置文件时，这将是一个非常无聊且痛苦的事情。学习<code>jison</code>可以帮助你很快的编写出小巧的解析器，在上面的<code>Mapfile</code>的例子中，所有的代码还不到<code>100</code>行。下一次再遇到诸如复杂的文本解析，配置文件读取的时候，先不要忙着编写<code>正则表达式</code>，试试更高效，更轻便的<code>jison</code>吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工程中的编译原理 -- Jison入门篇]]></title>
    <link href="http://abruzzi.github.com/2015/09/write-a-parser/"/>
    <updated>2015-09-30T18:45:00+08:00</updated>
    <id>http://abruzzi.github.com/2015/09/write-a-parser</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>在代码编写中，很多时候我们都会处理字符串：发现字符串中的某些规律，然后将想要的部分抽取出来。对于发杂一些的场景，我们会使用<code>正则表达式</code>来帮忙，正则表达式强大而灵活，主流的变成语言如<code>Java</code>，<code>Ruby</code>的标准库中都对其由很好的支持。</p>

<p>但是有时候，当接收到的字符串结构更加复杂（往往会这样）的时候，正则表达式要么会变的不够用，要么变得超出我们能理解的复杂度。这时候，我们可能借助一些更为强大的工具。</p>

<p>下面是一个实际的例子，这个代码片段是MapServer的配置文件，它用来描述地图中的一个层，其中包含了嵌套的<code>CLASS</code>，而<code>CLASS</code>自身又包含了一个嵌套的<code>STYLE</code>节。显然，正则表达式在解释这样复杂的结构化数据方面，是无法满足需求的。</p>

<p>```
LAYER
  NAME         "counties"
  DATA         "counties-in-shaanxi-3857"
  STATUS       default
  TYPE         POLYGON
  TRANSPARENCY 70</p>

<p>  CLASS</p>

<pre><code>NAME       "polygon"
STYLE
  COLOR     255 255 255
  OUTLINECOLOR 40 44 52
END
</code></pre>

<p>  END
END
```</p>

<p>在UNIX世界，很早的时候，人们就开发出了很多用来生成<code>解释器</code>(parser)的工具，比如早期的<a href="https://en.wikipedia.org/wiki/Lex_(software">lex</a>)/<a href="https://en.wikipedia.org/wiki/Yacc">yacc</a>之类的工具和后来的<a href="https://en.wikipedia.org/wiki/GNU_bison">bison</a>。通过这些工具，程序员只需要定义一个结构化的文法，工具就可以自动生成解释器的C代码，非常容易。在JavaScript世界中，有一个非常类似的工具，叫做<a href="https://zaach.github.io/jison/">jison</a>。在本文中，我将以jison为例，说明在JavaScript中自定义一个解释器是何等的方便。</p>

<p><strong>注意</strong>，我们这里说的<code>解释器</code>不是一个编译器，编译器有非常复杂的后端（抽象语法树的生成，虚拟机器指令，或者机器码的生成等等），我们这里仅仅讨论一个编译器的<strong>前端</strong>。</p>

<h3>一点理论知识</h3>

<p>本文稍微需要一点理论知识，当年编译原理课的时候，各种名词诸如<code>规约</code>，<code>推导式</code>，<code>终结符</code>，<code>非终结符</code>等等，</p>

<h4>上下文无关文法（Context Free Grammar）</h4>

<p>先看看维基上的这段定义：</p>

<blockquote><p>在计算机科学中，若一个形式文法 G = (N, Σ, P, S) 的产生式规则都取如下的形式：V -> w，则称之为上下文无关文法（英语：context-free grammar，缩写为CFG），其中 V∈N ，w∈(N∪Σ)* 。上下文无关文法取名为“上下文无关”的原因就是因为字符 V 总可以被字串 w 自由替换，而无需考虑字符 V 出现的上下文。</p></blockquote>

<p>基本上跟没说一样。要定义一个上下文无关文法，数学上的精确定义是一个在4元组：<code>G = (N, Σ, P, S)</code>，其中</p>

<ol>
<li>N是“非终结符”的集合</li>
<li>Σ是“终结符”的集合，与N的交集为空（不想交）</li>
<li>P表示规则集（即N中的一些元素以何种方式）</li>
<li>S表示起始变量，是一个“非终结符”</li>
</ol>


<p>其中，规则集P是重中之重，我们会在下一小节解释。经过这个形式化的解释，基本还是等于没说，在继续之前，我们先来看一下BNF，然后结合一个例子来帮助理解。</p>

<p>话说我上一次写这种<a href="http://www.cnblogs.com/abruzzi/archive/2009/06/06/1497449.html">学院派的文章</a>还是2009年，时光飞逝。</p>

<h4>巴科斯范式（Backus Normal Form）</h4>

<p>维基上的解释是：</p>

<blockquote><p>巴科斯范式（英语：Backus Normal Form，缩写为 BNF），又称为巴科斯-诺尔范式（英语：Backus-Naur Form，也译为巴科斯-瑙尔范式、巴克斯-诺尔范式），是一种用于表示上下文无关文法的语言，上下文无关文法描述了一类形式语言。它是由约翰·巴科斯（John Backus）和彼得·诺尔（Peter Naur）首先引入的用来描述计算机语言语法的符号集。</p></blockquote>

<p>简而言之，它是由推导公式的集合组成，比如下面这组公式：</p>

<p><code>
S -&gt; T + T | T - T | T
T -&gt; F * F | F / F | F
F -&gt; NUMBER | '(' S ')'
NUMBER -&gt;  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
</code></p>

<p>可以被“继续分解”的元素，我们称之为“非终结符”，如上式中的<code>S</code>, <code>T</code>, <code>NUMBER</code>，而无法再细分的如<code>0..9</code>，<code>(</code>，<code>)</code>则被称之为终结符。<code>|</code>表示或的关系。在上面的公式集合中，<code>S</code>可以被其右边的<code>T+T</code>替换，也可以被<code>T-T</code>替换，还可以被<code>T</code>本身替换。回到上一小节最后留的悬疑，在这里：</p>

<ol>
<li>N就是{<code>S</code>, <code>T</code>, <code>F</code>, <code>NUMBER</code>}</li>
<li>Σ就是{<code>0</code>, <code>1</code>, ..., <code>9</code>, <code>(</code>, <code>)</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>}</li>
<li>P就是上面的BNF式子</li>
<li>S就是这个的<code>S</code>(第一个等式的左边状态)</li>
</ol>


<p>上面的BNF其实就是四则运算的形式定义了，也就是说，由这个BNF可以解释一切出现在四则运算中的文法，比如：</p>

<p><code>
1+1
8*2+3
(10-6)*4/2
</code></p>

<p>而所谓上下文无关，指的是在推导式的左边，都是非终结符，并且可以<strong>无条件</strong>的被其右边的式子替换。此处的<strong>无条件</strong>就是上下文无关。</p>

<h3>实现一个四则运算计算器</h3>

<p>我们这里要使用<a href="https://zaach.github.io/jison/">jison</a>，jison是一个npm包，所以安装非常容易：</p>

<p><code>sh
npm install -g jison
</code></p>

<p>安装之后，你本地就会有一个命令行工具<code>jison</code>，这个工具可以将你定义的<code>jison</code>文件编译成一个<code>.js</code>文件，这个文件就是解释器的源码。我们先来定义一些<code>符号</code>(token)，所谓<code>token</code>就是上述的<code>终结符</code>：</p>

<h4>第一步：识别数字</h4>

<p>创建一个新的文本文件，假设就叫<code>calc.jison</code>，在其中定义一段这样的符号表:</p>

<p><code>js
\s+                   /* skip whitespace */
[0-9]+("."[0-9]+)?    return 'NUMBER'
&lt;&lt;EOF&gt;&gt;               return 'EOF'
.                     return 'INVALID'
</code></p>

<p>这里我们定义了4个符号，所有的空格（<code>\s+</code>），我们都跳过；如果遇到数字，则返回<code>NUMBER</code>；如果遇到文件结束，则返回<code>EOF</code>；其他的任意字符(.)都返回<code>INVALID</code>。</p>

<p>定义好符号之后，我们就可以编写<code>BNF</code>了：</p>

<p>```js
expressions</p>

<pre><code>: NUMBER EOF
    {
    console.log($1);
    return $1;
    }
;
</code></pre>

<p>```</p>

<p>这里我们定义了一条规则，即<code>expressions -&gt; NUMBER EOF</code>。在<code>jison</code>中，当匹配到规则之后，可以执行一个代码块，比如此处的输出语句<code>console.log($1)</code>。这个产生式的右侧有几个元素，就可以用<code>$加序号</code>来引用，如<code>$1</code>表示<code>NUMBER</code>实际对应的值，<code>$2</code>为<code>EOF</code>。</p>

<p>通过命令</p>

<p><code>sh
jison calc.jison
</code></p>

<p>可以在当前目录下生成一个<code>calc.js</code>文件，现在来创建一个文件<code>expr</code>，文件内容为一个数字，然后执行：</p>

<p><code>sh
node calc.js expr
</code></p>

<p>来测试我们的解释器：</p>

<p><code>sh
$ echo "3.14" &gt; expr
$ node calc.js expr
3.14
</code></p>

<p>目前我们完整的代码仅仅20行：</p>

<p>```js
/<em> lexical grammar </em>/
%lex
%%</p>

<p>\s+                   /<em> skip whitespace </em>/
[0-9]+("."[0-9]+)?    return 'NUMBER'
&lt;<EOF>>               return 'EOF'
.                     return 'INVALID'</p>

<p>/lex</p>

<p>%start expressions</p>

<p>%% /<em> language grammar </em>/</p>

<p>expressions</p>

<pre><code>: NUMBER EOF
    {
    console.log($1);
    return $1;
    }
;
</code></pre>

<p>```</p>

<h4>加法</h4>

<p>我们的解析器现在只能计算一个数字（输入给定的数字，给出同样的输出），我们来为它添加一条新的规则:加法。首先我们来扩展目前的BNF，添加一条新的规则：</p>

<p>```js
expressions</p>

<pre><code>: statement EOF
    {
    console.log($1);
    return $1;
    }
;
</code></pre>

<p>statement:
  NUMBER PLUS NUMBER
  {$$ = $1 + $3}
  |
  NUMBER
  {$$ = $1}
  ;
```</p>

<p>即，<code>expressions</code>由<code>statement</code>组成，而<code>statement</code>可以有两个规则规约得到，一个就是纯数字，另一个是<code>数字 加号 数字</code>，这里的<code>PLUS</code>是我们定义的一个新的符号：</p>

<p><code>js
"+"    return "PLUS"
</code></p>

<p>当输入匹配到规则<code>数字 加号 数字</code>时，对应的块<code>{$$ = $1 + $3}</code>会被执行，也就是说，两个<code>NUMBER</code>对应的值会加在一起，然后赋值给整个表达式的值，这样就完成了<strong>语义</strong>的翻译。</p>

<p>我们在文件<code>expr</code>中写入算式：<code>3.14+1</code>，然后测试：</p>

<p><code>sh
$ jison calc.jison
$ node calc.js expr
13.14
</code></p>

<p>嗯，结果有点不对劲，两个数字都被当成了字符串而拼接在一起了，这是因为JavaScript中，<code>+</code>的二义性和弱类型的自动转换导致的，我们需要做一点修改：</p>

<p><code>js
statement:
  NUMBER PLUS NUMBER
  {$$ = parseFloat($1) + parseFloat($3)}
  |
  NUMBER
  {$$ = $1}
  ;
</code></p>

<p>我们使用JavaScript内置的<code>parseFloat</code>将字符串转换为数字类型，再做加法即可：</p>

<p><code>sh
$ jison calc.jison
$ node calc.js expr
4.140000000000001
</code></p>

<h4>更多的规则</h4>

<p>剩下的事情基本就是把BNF翻译成<code>jison</code>的语法了：</p>

<p><code>
S -&gt; T + T | T - T | T
T -&gt; F * F | F / F | F
F -&gt; NUMBER | '(' S ')'
NUMBER -&gt;  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
</code></p>

<p>```js
expressions</p>

<pre><code>: statement EOF
    {
    console.log($1);
    return $1;
    }
;
</code></pre>

<p>statement:
  term PLUS term {$$ = $1 + $3}
  |
  term MINUS term {$$ = $1 - $3}
  |
  term {$$ = $1}
  ;</p>

<p>term:
  factor MULTIPLE factor {$$ = $1 * $3}
  |
  factor DIVIDE factor {$$ = $1 / $3}
  |
  factor {$$ = $1}
  ;</p>

<p>factor:
  NUMBER {$$ = parseFloat($1)}
  |
  LP statement RP {$$ = $2}
  ;</p>

<p>```</p>

<p>这样，像复杂一些的四则运算：<code>(10-2) * 3 + 2/4</code>，我们的计算器也已经有能力来计算出结果了：</p>

<p><code>sh
$ jison calc.jison
$ node calc.js expr
24.5
</code></p>

<h3>总结</h3>

<p>我们在本文中讨论了BNF和上下文无关文法，以及这些理论如何与工程实践联系起来。这里的<code>四则运算计算器</code>当然是一个很简单的例子，不过我们从中可以看到将<code>BNF</code>形式文法翻译成实际可以工作的代码是多么方便。我在后续的文章中会介绍<code>jison</code>更高级的用法，以及如何在实际项目中使用<code>jison</code>产生的解释器。</p>
]]></content>
  </entry>
  
</feed>
