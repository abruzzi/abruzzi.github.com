<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gis | I code it]]></title>
  <link href="http://abruzzi.github.com/category/gis/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2018-01-13T16:18:13+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[全球地震信息的可视化（使用OpenLayers）]]></title>
    <link href="http://abruzzi.github.com/2014/04/render-geojson-by-using-openlayers/"/>
    <updated>2014-04-15T21:33:00+08:00</updated>
    <id>http://abruzzi.github.com/2014/04/render-geojson-by-using-openlayers</id>
    <content type="html"><![CDATA[<h4>OpenLayers</h4>

<p>使用<a href="http://openlayers.org/">OpenLayers</a>可以很容易的搭建基于Web的GIS系统，OpenLayers支持不同的数据源(符合WMS协议的服务器，Google Maps API, Bing Maps，KML以及<a href="http://geojson.org/">GeoJSON</a>等等)。通过将不同的数据源的数据整合，我们可以开发出丰富而用户友好的GIS系统。</p>

<p>OpenLayers可以轻松的处理GeoJSON数据，并将其生成矢量层，我们可以将这个层叠加在其他数据源（比如OSM）提供的地图上，以得到一个完整的小应用。</p>

<p>最后的运行结果是这样的：</p>

<p><img src="/images/2014/04/openlayers-earthquake-resized.png" alt="image" /></p>

<h4>GeoJSON</h4>

<p><a href="http://www.usgs.gov/aboutusgs/">美国地理信息调查局</a>是一个科学组织，他公开了很多地球上的灾难信息，比如对地震的统计，并提供编程接口。它公开的地震统计信息，包含全世界各地报告过的地震，以及全美所有检测到的地震，并以多种周期（小时，天，周，月等），多种格式（GeoJSON，KML，Atom等），以便应用程序的开发者只用这些数据。</p>

<h4>实现</h4>

<h5>设置基本环境</h5>

<p>我们将借助bower来安装所有的代码依赖。首先，我们需要bower将所有的包都安装在<code>components</code>目录下，这个可以通过在当前目录的<code>.bowerrc</code>文件中制定<code>directory</code>：</p>

<p>```json
{</p>

<pre><code>"directory": "components"
</code></pre>

<p>}
```</p>

<p>然后运行bower安装jquery以及openlayers：</p>

<p><code>sh
$ bower install jquery
$ bower install openlayers
</code></p>

<p>通过bower安装OpenLayers之后，可以通过OpenLayers自带的build工具将所有的源码合并压缩为一个文件：</p>

<p><code>sh
$ cd components/openlayers/build
$ ./build.py #将会在当前目录下生成一个OpenLayers.js的文件
$ mv OpenLayers.js ../
</code></p>

<p>然后，创建一个简单的HTML文件，引用jquery.js和OpenLayers.js，以及我们的入口脚本app.js，本文所有的代码都只是修改这个文件。</p>

<p>```html
&lt;!DOCTYPE HTML>
<html></p>

<pre><code>&lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;
    &lt;title&gt;Earthquake distribution&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css" /&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="container"&gt;
        &lt;div id="map"&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src="components/jquery/jquery.js" type="text/javascript"&gt;&lt;/script&gt;        
    &lt;script src="components/openlayers/OpenLayers.js" type="text/javascript"&gt;&lt;/script&gt;        
    &lt;script src="app.js" type="text/javascript"&gt;&lt;/script&gt;        
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>还可以运行<code>bower init</code>来将生成<code>bower.json</code>，以方便别人使用我们的应用：</p>

<p><code>js
$ bower init
</code></p>

<h5>基本代码</h5>

<p>一个最简单的OpenLayers应用，只需要7行代码：</p>

<p>```js
$(function() {</p>

<pre><code>var map = new OpenLayers.Map("map");
var osm = new OpenLayers.Layer.OSM();

map.addLayers([osm]);
map.zoomToMaxExtent();
</code></pre>

<p>});
```</p>

<p>这段代码在id为<code>map</code>的HTML元素创建了一个地图，这个地图上有一个叫OSM的层（即<a href="http://www.openstreetmap.org/">OpenStreetMap</a>，一个开源，开放的地图平台），并将地图缩小到边界范围（以获得最大的视野）:</p>

<p><img src="/images/2014/04/openlayers-osm-resized.png" alt="image" /></p>

<h5>生成矢量层</h5>

<p>通过GeoJSON生成矢量图非常容易：</p>

<p>```js
var geo = new OpenLayers.Layer.Vector("EarthQuake", {</p>

<pre><code>strategies: [new OpenLayers.Strategy.Fixed()],
protocol: new OpenLayers.Protocol.HTTP({
    url: '/all_day.geojson',
    format: new OpenLayers.Format.GeoJSON({ignoreExtraDims: true})
})
</code></pre>

<p>});
```</p>

<p>注意此处的<a href="http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson">all_day.geojson</a>是从USGS网站上下载的，过去一天中世界各地的所有地震统计。</p>

<p>上边的代码创建了一个名称为<code>EarthQuake</code>的矢量层，<code>strategies</code>中的Fixed策略表示仅请求一次资源，然后缓存在前端，不再请求。<code>protocol</code>表明数据来源为<code>all_day.geojson</code>，格式为<code>OpenLayers.Format.GeoJSON</code>。由于USGS返回的地理信息除了经纬度还包含深度，而OpenLayers默认只处理经纬度的，因此需要此处的<code>ignoreExtraDims</code>来忽略那个额外的深度信息。</p>

<p><img src="/images/2014/04/openlayers-geojson-resized.png" alt="image" /></p>

<h5>定制样式</h5>

<p>虽然我们已经加上了新的层，也可以看到很多表示地震的点信息，但是并不能看出哪些地震是严重的，比如里氏3级以下的地震，几乎没有危害，可以标注成一种颜色；而更高震级的可以标记成另外一种颜色。</p>

<p>OpenLayers可以很容易的做到这个定制化:</p>

<p>```js</p>

<pre><code>var style = new OpenLayers.Style();

var ruleLow = new OpenLayers.Rule({
  filter: new OpenLayers.Filter.Function({
        evaluate: function(properties) {
            return properties.mag &lt; 3.0;
        }
    }),
  symbolizer: {pointRadius: 3, fillColor: "green",
               fillOpacity: 0.5, strokeColor: "black"}
});

var ruleHigh = new OpenLayers.Rule({
  filter: new OpenLayers.Filter.Function({
        evaluate: function(properties) {
            return properties.mag &gt;= 3.0;
        }
    }),
    symbolizer: {pointRadius: 5, fillColor: "red",
               fillOpacity: 0.7, strokeColor: "black"}
});

style.addRules([ruleLow, ruleHigh]);

geo.styleMap = new OpenLayers.StyleMap(style);
</code></pre>

<p>```</p>

<p>首先创建一个Style对象，为Style添加两条规则Rule，然后将Style对象包装成StyleMap并赋值给表示地震的矢量层<code>earthquake</code>。</p>

<p>对于规则ruleLow，我们定义了，当一个feature的属性值mag(震级)小于三的时候后，使用绿色的，半径为3px的小圆圈来表示。而ruleHigh则定义了当震级大于等于三的时候，用红色，半径为5px的圆圈来表示。</p>

<p><img src="/images/2014/04/openlayers-geojson-styling-resized.png" alt="image" /></p>

<h5>加上事件处理</h5>

<p>虽然我们已经可以直观的根据震级不同而看到不同颜色的点，但是整个应用仍然没有多少意义：它不具备于用户的交互能力。我们需要添加上事件处理，当用户点击地图上的一个圆点的时候，应该看到一个更详细的窗口。</p>

<p>```js
var selectControl = new OpenLayers.Control.SelectFeature(geo, {</p>

<pre><code>onSelect: onFeatureSelect,
onUnselect: onFeatureUnselect 
</code></pre>

<p>});</p>

<p>map.addControl(selectControl);
selectControl.activate();</p>

<p>function onFeatureSelect(feature) {</p>

<pre><code>var html = "&lt;span&gt;"+feature.attributes.title+"&lt;/span&gt;";

var popup = new OpenLayers.Popup.FramedCloud("popup",
        feature.geometry.getBounds().getCenterLonLat(),
        null,
        html,
        null,
        true
    );

popup.panMapIfOutOfView = true;
popup.autoSize = true;

feature.popup = popup;

map.addPopup(popup);
</code></pre>

<p>}</p>

<p>function onFeatureUnselect(feature) {</p>

<pre><code>map.removePopup(feature.popup);
feature.popup.destroy();
feature.popup = null;
</code></pre>

<p>}
```</p>

<p>我们在地图上添加了一个<code>SelectFeature</code>元素，并注册了回调函数：当矢量层中的矢量被选中之后，函数<code>onFeatureSelect</code>将被执行，我们可以在这个函数中添加对弹出窗口的控制。当<code>onFeatureSelect</code>执行时，OpenLayers会将当前的Feature传递进来，我们可以动态的取得震级，标题，链接等信息，并展现给最终用户。</p>

<p><img src="/images/2014/04/openlayers-geojson-popup-resized.png" alt="[image]" /></p>

<p>如果将数据源扩大到本周的所有地震：</p>

<p>```js
var geo = new OpenLayers.Layer.Vector("EarthQuake", {</p>

<pre><code>strategies: [new OpenLayers.Strategy.Fixed()],
protocol: new OpenLayers.Protocol.HTTP({
    url: '/all_week.geojson',
    format: new OpenLayers.Format.GeoJSON({ignoreExtraDims: true})
})
</code></pre>

<p>});
```</p>

<p><img src="/images/2014/04/openlayers-geojson-weekly-resized.png" alt="image" /></p>

<p>完整的代码示例<a href="https://github.com/abruzzi/earthquake-viz">可以看这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIS系统如何工作]]></title>
    <link href="http://abruzzi.github.com/2014/04/intro-map-gis/"/>
    <updated>2014-04-10T23:45:00+08:00</updated>
    <id>http://abruzzi.github.com/2014/04/intro-map-gis</id>
    <content type="html"><![CDATA[<h4>GIS系统如何工作</h4>

<p>去年十二月中旬从RCA项目上下来之后，就一直在一个<a href="http://en.wikipedia.org/wiki/Geographic_information_system">GIS</a>项目上做咨询。在新的项目上，日常工作的重点主要是放在前端开发上（比如AngularJS，Grunt，Jamsine之类），对于业务（与GIS相关）方面，则完全没有涉及。</p>

<p>虽说之前也接触过<a href="http://icodeit.org/2013/03/guan-yu-hack-day/">一点GIS相关的开发</a>，比如Google Maps API，<a href="http://openlayers.org/">OpenLayers</a>之类，但是仅仅停留在使用别人的API搭建个小应用的层次。</p>

<p><img src="/images/2014/04/roads-resized.png" alt="image" /></p>

<p>直到最近，在GIS专家芦康平的指导下，才真正开始接触GIS，很快我就发现这是另一个十分好玩的新天地。简而言之，这个新的天地里，所有的东西都有一种似曾相识的感觉，但是又非常新鲜。比如地图服务器，渲染引擎，缓存，地理信息数据库等，都可以在其他的系统中找到对应。这种感觉好比收集硬币，或者收集邮票一样，当你看到新的有着不同花纹，大小，材质，年代的硬币时，那种既在意料之中又在意料之外的感觉简直太有意思了。</p>

<p>GIS系统，毋庸置疑可以帮助人们更加直观的分析数据，当数据与地理信息有所关联的时候，GIS系统会变得十分友好，也可以更充分的提供信息。</p>

<p>鉴于GIS对我来说是一个完全崭新的领域，那么学习之前，自然有很多的问题出现：</p>

<ol>
<li>地图的信息（建筑物，河流，街道）从何而来？</li>
<li>数据在服务器端以何种方式存储？</li>
<li>地图数据到底如何被渲染出来？</li>
<li>一个GIS系统的部署结构是什么样的？需要哪些组件？</li>
<li>业界的标准是什么，有哪些开源的项目和工具可供参考？</li>
</ol>


<p>等等。</p>

<h5>地图是如何被渲染的？</h5>

<p>通常来讲，我们看到的地图是由一个底图和若干个层的叠加来达到的最终结果。其中每个层次都会保存不同类型的地理信息，比如将所有的河流信息放在一个层，将建筑物放在另外一个层。</p>

<p><img src="/images/2014/04/elevation-map.jpg" alt="image" /></p>

<p>这些信息存储在数据文件中（<a href="http://en.wikipedia.org/wiki/Shapefiles">shapefiles</a>）或者数据库中，通过使用专门的工具来将这些地理信息转换成图片。由于每张图片都是透明的，这样叠加起来的最后效果就是如Google Maps之类应用的结果了。当然，叠加过程一般都发生在服务器端（有些简单应用则是在客户端完成某些层次的绘制，比如我之前发过的<a href="http://icodeit.org/placesihavebeen">我去过的地方</a>，这些热力图就是在客户端通过JavaScript加上去的。）。</p>

<p>地图在服务器端被渲染出来之后，尺寸一般会非常大。需要有工具将这些大图切分成很多组的小图，这些小图被称之为瓦片（tile）。为了给不同缩放级别的客户端提供不同的图片，这些瓦片被精心的分成了多个组，每个组都有编号。如果地图支持18级的缩放，就会现有18个分组。当然分组好越靠后，分组中的瓦片越多。</p>

<p><img src="/images/2014/04/tiles-resized.png" alt="image" /></p>

<p>比如当客户端请求缩放级别为10的地图时，客户端（比如OpenLayers）会根据经纬度计算好图片的边界，然后请求第10级的一些瓦片，并将这些瓦片排列在画布上。一般而言，这些瓦片都是正方形（256x256或者512x512）。</p>

<h5>WMS服务</h5>

<p><a href="http://en.wikipedia.org/wiki/Web_Map_Service">WMS(Web Map Service)</a>是一个基于HTTP的简单协议，客户端发送的请求中包含请求类型，地图的层次，边界等信息，服务器根据这个信息生成图片，并返回该图片：</p>

<p><img src="/images/2014/04/wms-request.png" alt="image" /></p>

<p>当然，WMS本身支持多种请求，最常见的就是<code>GetMap</code>，细节可以参考OGC规范及具体服务器的实现。而对于后端的服务器来说，从请求中获取这些信息之后，会首先从数据库/数据文件中得到数据，并使用渲染引擎绘制图片，并最后将图片返回客户端。</p>

<h5>图片类型</h5>

<p>图片分为栅格类型和矢量类型两种。栅格图片一般的原始来源是航拍，遥感等，本质上来说是照片，照片必然会有大小，如果放大到某一个范围之外，就会模糊。而矢量图是数学上的抽象，比如在某个坐标系统中，在某处有一个点A，另一处有一个点B，两点之间有一条线连接。矢量图的特点是与缩放程度无关。</p>

<p><img src="/images/2014/04/bangor_oli_2014040_red_swir_tir_720.jpg" alt="栅格图" /></p>

<p>栅格图的特点是真实，矢量图的特点是抽象（存储方便，占用空间更少，也更容易修改）。但是为了绘制正确，完整的地图，两种类型的图片信息都是必要的：</p>

<p><img src="/images/2014/04/polygon-resized.png" alt="矢量图" /></p>

<h5>常用文件格式</h5>

<p>Shapefiles是Esri公司开发出来的用于存储地理信息的文件格式。说是文件，其实是一个文件族，Shapefile包含了数种文件，其中有三种必须的(.shp，.shx，.dbf)。其他有一些可选的(.prj，.sbn/.sbx等等)。</p>

<p>OSM格式是由OpenStreetMap采用的文件格式，其实是一个XML。</p>

<p>```xml
<osm version="0.6" generator="Osmosis 0.43.1">
  <bounds minlon="144.26600" minlat="-38.55200" maxlon="145.81000" maxlat="-37.36500" origin="http://www.openstreetmap.org/api/0.6"/>
  <node id="579259" version="3" timestamp="2008-12-17T02:28:22Z" uid="57437" user="Canley" changeset="431325" lat="-37.9309048" lon="145.1282066"/>
  <node id="579260" version="5" timestamp="2009-12-03T21:42:45Z" uid="1679" user="andrewpmk" changeset="3284133" lat="-37.9388304" lon="145.1266866"/>
  <node id="579261" version="4" timestamp="2013-02-15T20:00:37Z" uid="79475" user="AlexOnTheBus" changeset="15043978" lat="-37.9404366" lon="145.1395848"/>
  <node id="579262" version="18" timestamp="2013-01-31T21:37:02Z" uid="79475" user="AlexOnTheBus" changeset="14864580" lat="-37.9295116" lon="145.1266366"></p>

<pre><code>&lt;tag k="highway" v="traffic_signals"/&gt;
</code></pre>

<p>  </node>
  <node id="579265" version="2" timestamp="2010-06-24T12:05:34Z" uid="57437" user="Canley" changeset="5065613" lat="-37.9369707" lon="145.140732"/>
  ...
</osm><br/>
```</p>

<h4>技术栈</h4>

<p>和传统的三层架构一样，一个典型的GIS系统也是由三部分组成：客户端，服务器，存储。在实际的场景中，可能又会引入缓存服务器，负载均衡服务器等。</p>

<p><img src="/images/2014/04/gis-stack-resized.png" alt="image" /></p>

<ol>
<li><a href="http://openlayers.org/">OpenLayers</a> / Leaflet</li>
<li><a href="http://mapnik.org/">Mapnik</a> / Mapnik::OGCServer</li>
<li><a href="http://www.postgresql.org/">Postgres</a> + <a href="http://postgis.net/">PostGIS</a> / OSM Data / Shapefiles</li>
</ol>


<p><a href="http://openlayers.org/">OpenLayers</a>是一个前端的JavaScript库，几乎可以算是前端的必选了，它提供众多的特性：与任意的后端地图服务集成（Google Maps，Bing Maps，OSM等等），对向量层的支持使得其非常方便的展示用户自定义的元素（多边形，点，InfoWindow等）。OpenLayers的API也非常清晰易用：</p>

<p>```js
$(function() {</p>

<pre><code>var map = new OpenLayers.Map('map', {});

var layer = new OpenLayers.Layer.WMS('Tile Cache', 
    'tilecache?', {
        layers: 'basic',
        format: 'image/png'
    });

map.addLayer(layer);
</code></pre>

<p>});
```</p>

<ol>
<li>创建Map对象</li>
<li>创建Layer对象</li>
<li>将Layer添加到Map上</li>
</ol>


<p>即可完成基本的设置，并将地图展现在页面上。</p>

<p><a href="http://www.openstreetmap.org/">OSM</a>是Open Street Map的缩写，它本身是一个开源项目，全世界各地的贡献者可以很方便的编辑地图信息，并与其他人分享，整个运作方式非常像Wikipedia，任何人都可以对地图进行编辑。基于这个原因，OSM数据文件是基于XML的。</p>

<p>有很多组织都将OSM的数据下载下来，搭建自己的地图服务器，然后向外部提供<a href="http://en.wikipedia.org/wiki/Web_Map_Service">WMS(Web Map Service)</a>服务。</p>

<p>Mapnik是一个渲染引擎，它可以将地理数据渲染成图片。Mapnik支持来自多种数据源的数据，比如Shapefile，PostGIS中的数据等。而对于OSM数据（一种XML文件），可以使用<a href="https://github.com/openstreetmap/osm2pgsql">osm2postgis</a>工具将其导入到PostGIS数据库，然后使用。</p>

<p>Mapnik本身只是一个C++编写的渲染引擎，并提供很多编程语言的bind，最常用的时python版本的bind，接口非常清晰明了。使用Mapnik可以很容易的定制对地图层次的样式，比如地图中所有土地的颜色，河流的颜色，道路的颜色，标签的字体，属性等等都可以很方便的定制。</p>

<p>实际使用Mapnik+OpenLayers搭建自己的服务器将在下一篇文章中详细描述。</p>

<h5>一些数据源</h5>

<ol>
<li><a href="http://www.naturalearthdata.com/">Natural Earth</a></li>
<li><a href="http://download.geofabrik.de/osm/">GEO Fabrik</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
