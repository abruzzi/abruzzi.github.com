<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Automation | I code it]]></title>
  <link href="http://abruzzi.github.com/category/automation/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-01-06T20:46:07+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[微服务场景下的自动化测试]]></title>
    <link href="http://abruzzi.github.com/2016/10/testing-in-microservice-context/"/>
    <updated>2016-10-01T18:49:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/10/testing-in-microservice-context</id>
    <content type="html"><![CDATA[<h2>新的挑战</h2>

<p>微服务和传统的单块应用相比，在测试策略上，会有一些不太一样的地方。简单来说，在微服务架构中，测试的层次变得更多，而且对环境的搭建要求更高。比如对单块应用，在一个机器上就可以setup出所有的依赖，但是在微服务场景下，由于依赖的服务往往很多，要搭建一个完整的环境非常困难，这对团队的<code>DevOps</code>的能力也有比较高的要求。</p>

<p>相对于单块来说，微服务架构具有以下特点：</p>

<ul>
<li>每个微服务在物理上分属不同进程</li>
<li>服务间往往通过<code>RESTful</code>来集成</li>
<li>多语言，多数据库，多运行时</li>
<li>网络的不可靠特性</li>
<li>不同的团队和交付周期</li>
</ul>


<p>上述的这些微服务环境的特点，决定了在微服务场景中进行测试自然会面临的一些挑战：</p>

<ul>
<li>服务间依赖关系复杂</li>
<li>需要为每个不同语言，不同数据库的服务搭建各自的环境</li>
<li>端到端测试时，环境准备复杂</li>
<li>网络的不可靠会导致测试套件的不稳定</li>
<li>团队之间的<code>沟通成本</code></li>
</ul>


<h3>测试的分层</h3>

<p>相比于常见的<a href="https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid">三层测试金字塔</a>，在微服务场景下，这个层次可以被扩展为5层（如果将UI测试单独抽取出来，可以分为六层）。</p>

<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>组件测试</li>
<li>契约测试</li>
<li>端到端测试</li>
</ul>


<p><img src="/images/2016/10/microservice-testing-zhcn-resized.png" alt="Test layers" /></p>

<p>和测试金字塔的基本原则相同：</p>

<ol>
<li>越往上，越接近业务/最终用户；越往下，越接近开发</li>
<li>越往上，测试用例越少</li>
<li>越往上，测试成本越高（越耗时，失败时的信息越模糊，越难跟踪）</li>
</ol>


<h4>单元测试</h4>

<p>单元测试，即每个微服务内部，对于领域对象，领域逻辑的测试。它的隔离性比较高，无需其他依赖，执行速度较快。</p>

<p>对于业务规则：</p>

<ol>
<li>商用软件需要License才可以使用，License有时间限制</li>
<li>需要License的软件在到期之前，系统需要发出告警</li>
</ol>


<p>```java
@Test
public void license_should_expire_after_the_evaluation_period() {</p>

<pre><code>LocalDate fixed = getDateFrom("2015-09-03");
License license = new License(fixed.toDate(), 1);

boolean isExpiredOn = license.isExpiredOn(fixed.plusYears(1).plusDays(1).toDate());
assertTrue(isExpiredOn);
</code></pre>

<p>}</p>

<p>@Test
public void license_should_not_expire_before_the_evaluation_period() {</p>

<pre><code>LocalDate fixed = getDateFrom("2015-09-05");
License license = new License(fixed.toDate(), 1);

boolean isExpiredOn = license.isExpiredOn(fixed.plusYears(1).minusDays(1).toDate());
assertFalse(isExpiredOn);
</code></pre>

<p>}
```</p>

<p>上面这个例子就是一个非常典型的单元测试，它和其他组件基本上没有依赖。即使要测试的对象对其他类有依赖，我们会Stub/Mock的手段来将这些依赖消除，比如使用<a href="http://mockito.org/">mockito</a>/<a href="https://github.com/jayway/powermock">PowerMock</a>。</p>

<h4>集成测试</h4>

<p>系统内模块（一个模块对其周边的依赖项）间的集成，系统间的集成都可以归类为集成测试。比如</p>

<ul>
<li>数据库访问模块与数据库的集成</li>
<li>对外部<code>service</code>依赖的测试，比如对第三方支付，通知等服务的集成</li>
</ul>


<p>集成测试强调模块和外部的交互的验证，在集成测试时，通常会涉及到外部的组件，比如数据库，第三方服务。这时候需要尽可能真实的去与外部组件进行交互，比如使用和真实环境相同类型的数据库，采用独立模式（Standalone）的<a href="http://wiremock.org/">WireMock</a>来启动外部依赖的RESTful系统。</p>

<p>通常会用来做模拟外部依赖工具包括：</p>

<ul>
<li><a href="http://wiremock.org/">WireMock</a></li>
<li><a href="http://www.mbtest.org/">mountebank</a></li>
</ul>


<p>其中，mountbank还支持Socket级别的Mock，可以在非HTTP协议的场景中使用。</p>

<p><img src="/images/2016/10/1905-funcional-teamwork.jpg" alt="Integration Test" /></p>

<h4>组件测试</h4>

<p>贯穿应用层和领域层的测试。不过通常来说，这部分的测试不会访问真实的外部数据源，而是使用同<code>schema</code>的内存数据库，而且对外部service的访问也会使用Stub的方式：</p>

<ul>
<li>内存数据库</li>
<li>Stub外部服务（<a href="http://wiremock.org/">WireMock</a>）</li>
<li><a href="https://github.com/rest-assured/rest-assured">RestAssured</a></li>
</ul>


<p>比如使用<a href="http://www.h2database.com/html/main.html">h2</a>来做内存数据库，并且自动生成schema。使用WireMock来Stub外部的服务等。</p>

<p>```java
@Test
public void should_create_user() {</p>

<pre><code>given().contentType(ContentType.JSON).body(prepareUser()).
        when().post("/users").
        then().statusCode(201).
        body("id", notNullValue()).
        body("name", is("Juntao Qiu")).
        body("email", is("juntao.qiu@gmail.com"));
</code></pre>

<p>}</p>

<p>private User prepareUser() {</p>

<pre><code>User user = new User();
user.setName("Juntao Qiu");
user.setEmail("juntao.qiu@gmail.com");
user.setPassword("password");
return user;
</code></pre>

<p>}
```</p>

<p>如果使用Spring，还可以通过<code>profile</code>来切换不同的数据库。比如下面这个例子中，默认的profile会连接数据库<code>jigsaw</code>，而<code>integration</code>的profile会连接<code>jigsaw_test</code>数据库：</p>

<p>```
spring:
  datasource:</p>

<pre><code>url: jdbc:mysql://localhost:3306/jigsaw
driver-class-title: com.mysql.jdbc.Driver
username: root
password: password
</code></pre>

<hr />

<p>spring:
  profiles: integration</p>

<p>  datasource:</p>

<pre><code>url: jdbc:mysql://localhost:3306/jigsaw_test
driver-class-title: com.mysql.jdbc.Driver
username: root
password: password
</code></pre>

<p>```</p>

<p>组件测试会涉及到的组件包括：</p>

<ul>
<li>URL路由</li>
<li>序列化与反序列化</li>
<li>应用对领域层的访问</li>
<li>领域层对数据的访问</li>
<li>数据库访问层</li>
</ul>


<h5>前后端分离</h5>

<p>除了后端的测试之外，在目前的前后端分离场景下，前端的应用越来越复杂，在这种情况下，前端的组件测试也是一个测试的重点。</p>

<p>一个前端应用至少包括了这样一些组件：</p>

<ul>
<li>前端路由</li>
<li>模板</li>
<li>前端的MVVM</li>
<li>拦截器</li>
<li>事件的响应</li>
</ul>


<p>要确保这些组件组合起来还能如预期的执行，相关测试必不可少。<a href="http://icodeit.org/2015/06/whats-next-after-separate-frontend-and-backend/">这篇文章</a>详细讨论了前后端分离之后的测试及开发实践。</p>

<h4>契约测试</h4>

<p>在微服务场景中，服务之间会有很多依赖关系。根据<code>消费者驱动契约</code>，我们可以将服务分为消费者端和生产者端，通常消费者自己会定义需要的数据格式以及交互细节，并生成一个契约文件。然后生产者根据自己的契约来实现自己的逻辑，并在持续集成环境中持续验证。</p>

<p><a href="https://github.com/realestate-com-au/pact">Pact</a>已经基本上是<code>消费者驱动契约</code>（Consumer Driven Contract）的事实标准了。它已经有多种语言的实现，Java平台的可以使用<code>pact-jvm</code>及相应的<code>maven</code>/<code>gradle</code>插件进行开发。</p>

<ul>
<li><a href="https://github.com/realestate-com-au/pact">pact</a>/<a href="https://github.com/DiUS/pact-jvm">pact-jvm</a></li>
<li><a href="https://github.com/bethesque/pact_broker">pact-broker</a></li>
</ul>


<p><img src="/images/2016/10/pactExample-resized.png" alt="pact example" /></p>

<p>(图片来源：<a href="http://techblog.newsweaver.com/why-should-you-use-consumer-driven-contracts-for-microservices-integration-tests/">Why you should use Consumer-Driven Contracts for Microservice integration tests</a>)</p>

<p>通常在工程实践上，当消费者根据需要生成了契约之后，我们会将契约上传至一个公共可访问的地址，然后生产者在执行时会访问这个地址，并获得最新版本的契约，然后对着这些契约来执行相应的验证过程。</p>

<p>一个典型的契约的片段是这样的（使用pact）：</p>

<p>```json
"interactions": [</p>

<pre><code>{
    "description": "Project Service",
    "request": {
        "method": "GET",
        "path": "/projects/11046"
    },
    "response": {
        "status": 200,
        "headers": {
            "Content-Type": "application/json; charset=UTF-8"
        },
        "body": {
            "project-id": "004c97"
        },
        "matchingRules": {
            "$.body.project-id": {
                "match": "type"
            }
        }
    },
    "providerState": "project service"
}
</code></pre>

<p>]
```</p>

<h4>端到端测试</h4>

<p>端到端测试是整个微服务测试中最困难的，一个完整的环境的创建于维护可能需要花费很大的经历，特别是当有多个不同的团队在独立开发的场景下。</p>

<p>另一方面，从传统的测试金字塔来看，端到端测试应该覆盖那些业务价值最高的Happy Path。也就是说，端到端测试并不关注异常场景，甚至大部分的业务场景都不考虑。要做到这一点，需要在设计测试时，从最终用户的角度来考虑，通过<code>用户画像</code>和<code>User Journey</code>来确定测试场景。</p>

<p>在端到端测试中，最重要的反而不是测试本身，而是环境的自动化能力。比如可以通过一键就可以将整个环境<code>provision</code>出来：</p>

<ul>
<li>安装和配置相关依赖</li>
<li>自动将测试数据Feed到数据库</li>
<li>自动部署</li>
<li>服务的自动重启</li>
</ul>


<p>随着容器技术和容器的编排技术的成熟，这部分工作已经可以比较好的自动化，依赖的工具包括：</p>

<ul>
<li><a href="https://www.docker.com/">Docker</a></li>
<li><a href="http://rancher.com/">Rancher</a></li>
</ul>


<p>一个典型的流程是：</p>

<ol>
<li>搭建持续发布流水线</li>
<li>应用代码的每一次提交都可以构建出docker镜像</li>
<li>将docker镜像发布在内部的docker-hub上</li>
<li>触发部署任务，通过rancher的upgrade命令将新的镜像发布</li>
<li>执行端到端测试套件</li>
</ol>


<p>端到端测试还可以细分为两个不同的场景：</p>

<ul>
<li>没有用户交互的场景，如一系列的微服务组成了一个业务API</li>
<li>有用户交互的场景</li>
</ul>


<h5>UI测试</h5>

<p>最顶层的UI测试跟传统方式的UI测试并无二致。我们可以使用BDD与实例化需求（<a href="https://books.gojko.net/specification-by-example/">Specification By Example</a>）的概念，从用户使用的角度来描述需求，以及相关的验收条件。这里我们会使用WebDriver来驱动浏览器，并通过诸如<a href="https://github.com/jnicklas/capybara">Capybara</a>等工具来模拟用户的操作。</p>

<ul>
<li>BDD工具：<a href="https://cucumber.io/">Cucumber</a></li>
<li>Web应用验收测试工具：<a href="https://github.com/jnicklas/capybara">Capybara</a></li>
<li>Page Object的DSL工具：<a href="https://github.com/natritmeyer/site_prism">Site_prism</a></li>
</ul>


<h3>扩展阅读</h3>

<ul>
<li><a href="http://www.infoq.com/cn/articles/QA-in-Production-practice">产品环境下的QA</a></li>
<li><a href="http://insights.thoughtworkers.org/bdd/">醒醒吧少年，只用Cucumber不能帮助你BDD</a></li>
<li><a href="http://martinfowler.com/articles/microservice-testing/">Testing Strategies in a Microservice Architecture</a></li>
<li><a href="http://icodeit.org/2015/01/page-object-with-site-prism/">编写体面的UI测试</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试自动化后，我们还需要QA吗？]]></title>
    <link href="http://abruzzi.github.com/2016/09/what-should-qa-do-in-a-agile-team/"/>
    <updated>2016-09-24T23:43:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/09/what-should-qa-do-in-a-agile-team</id>
    <content type="html"><![CDATA[<h2>QA的职责</h2>

<p>我们先讨论一下传统的瀑布模型下QA是如何工作的，其中最主要的问题是什么；然后作为对比，我们来看看在敏捷团队里QA又是如何工作的，工作重点又是什么；最后，我们详细看一看在新的职责下，QA应该如何做。</p>

<h3>瀑布开发模型</h3>

<p>即使在今天，在很多企业中，瀑布模型仍然是主流。每一个需求都需要经过分析，设计，开发，测试，上线部署，运维等阶段。虽然一些企业已经在实施<code>敏捷开发</code>，比如项目/产品以迭代的方式运作，也有诸如每日站会，代码检视等敏捷实践，但是如果仔细审视，你会发现其实<em>开发模式</em>骨子里还是瀑布：按照软件组件划分的部门结构（详见<a href="https://en.wikipedia.org/wiki/Conway%27s_law">康威定律</a>），按照职能划分的团队（开发和测试分属不同部门），过长的反馈周期，永远无法摆脱的集成难题等等。</p>

<p>随着软件变得越来越复杂，团队里没有任何一个人可以说出系统是如何运作的，也不知道最终用户是谁，以及最终用户会以何种方式来使用最终的软件。</p>

<p>更糟糕的是，按照职能划分的团队在物理上都是隔离的，比如独立的测试部门，独立的运维部门，整日忙碌而难以预约到档期的业务人员，当然还有经常疲于交付，无处吐槽的<em>苦逼</em>开发。由于这些隔离，信息的反馈周期会非常长，一个本来很容易修复的缺陷可能在4周之后才可能被另一个部门的测试发现，然后通过复杂的工作流（比如某种形式的缺陷追踪系统）流到开发那里，而开发可能还在拼命的完成早就应该交付的功能，从而形成恶性循环。</p>

<h3>瀑布模式中的QA</h3>

<p>在这样的环境中，QA们能做的事情非常有限。在需求开始时会他们参加需求澄清的会议，制定一些<code>测试计划</code>，然后进行测试用例的设计。有的企业会用诸如Excel之类的工具来记录这些用例。这些写在Excel里的，<code>死</code>的用例用处非常有限。而最大的问题在于：它们无法<code>自动化执行</code>。另外，在实际软件开发中，需求总是会经常发生变化，需求的优先级也会有调整，然后这些记录在Excel中的<code>死</code>的用例会很快过期，变得无人问津。</p>

<p>除此之外，QA中的有些成员会使用工具来录制一些UI测试的场景，然后在每个新版本出来之后进行回放即可。然而，当UI发生一点变化之后，这些自动化的用例就会失效：比如<code>HTML</code>片段中元素位置的调整，<code>JavaScript</code>的异步调用超时等等。</p>

<p>显然，这种单纯以黑盒的形式来<strong>检查功能点</strong>的测试方式是不工作的，要真正有效的提升软件质量，仅仅通过<strong>事后检查</strong>是远远不够的，软件的质量也应该内建于软件之中。QA的工作也应该是一个贯穿软件生命周期的活动，从商业想法，到真实上线，这其中的所有环节，都应该有QA的参与。</p>

<h3>系统思考</h3>

<p>如果不从一个系统的角度来思考软件质量，就无法真正构建出健壮的、让业务和团队都有信心的软件系统。<strong><em>质量从来都不只是QA的职责，而是整个团队的职责。</em></strong></p>

<p>关于软件质量，一个根深蒂固的误解是：缺陷在开发过程中被引入，然后在测试阶段被发现，最后在QA和开发的来来回回的撕扯中被解决（或者数量被大规模降低），最后在生产环境中，就只会有很少的，优先级很低的缺陷。</p>

<p>然而事实上，很多需求就没有仔细分析，业务价值不很确定，验收条件模糊，流入开发后又会引入一些代码级别的错误，以及业务规则上的缺陷，测试阶段会漏掉一些功能点，上线之后更是问题百出（网络故障，缓存失效，黑客攻击，操作系统补丁，甚至内存溢出，log文件将磁盘写满等等）。</p>

<p>在一个敏捷团队中，<strong>每个个人都应该对质量负责</strong>，而QA则以自己的丰富经验和独特视角来发掘系统中可能的质量隐患，并帮助团队将这些隐患消除。</p>

<p><img src="/images/2016/09/circle-resized.png" alt="测试职责" /></p>

<p>我在ThoughtWorks的同事<code>Anand Bagmar</code>在他的演讲<a href="http://www.slideshare.net/abagmar/what-is-agile-testing-how-does-automation-help">What is Agile testing- How does automation help?</a>中详细讨论过这部分内容。</p>

<h3>QA到底应该干什么？</h3>

<p>本质上来说，任何软件项目的目标都应该是：<strong>更快地将<code>高质量</code>的软件从想法变成产品</strong>。</p>

<p>将这个大目标细分一下，会得到这样几个子项，即企业需要：</p>

<ul>
<li>更多的商业回报（发掘业务价值）</li>
<li>更快的上线时间（做最简单，直接的版本）</li>
<li>更好的软件质量（质量内嵌）</li>
<li>更少的资源投入（减少浪费）</li>
</ul>


<p>其实就是传说中的<strong>多、快、好、省</strong>。如果说这是每一个软件项目的目标的话，那么团队里的每一个个人都应该向着这个目标而努力，任何其他形式的工作都可以归类为<code>浪费</code>。用Excel记录那些经常会失效，而且无法自动执行的测试用例是浪费，会因为页面布局变化而大面积失效的UI测试也是浪费，一个容易修复的缺陷要等到数周之后才被发现也是浪费。</p>

<p>在这个大前提下，我们再来思考QA在团队里应该做什么以及怎么做。</p>

<h3>QA的职责</h3>

<p>Lisa Crispin在<a href="https://book.douban.com/subject/5338399/">《敏捷软件测试》</a>中提到过一个很著名的模型：敏捷测试四象限。这个模型是QA制定测试策略时的一个重要参考：</p>

<p><img src="/images/2016/09/agile-testing-quadrants.png" alt="敏捷软件测试" /></p>

<p>如果按照纵向划分的话，图中的活动，越向上越面向业务；越向下越面向技术。横向划分的话，往左是支撑团队；往右是评价产品。</p>

<p>其实简化一下，QA在团队里的工作，可以分为两大类：</p>

<ul>
<li>确保我们在<code>正确的</code>交付产品</li>
<li>确保我们交付了<code>正确的</code>产品</li>
</ul>


<p>根据这个四象限的划分，大部分团队可能都会从Q2起步：QA会和BA，甚至UX一起，从需求分析入手，进行需求分析，业务场景梳理，这时候没有具体的可以被测试的软件代码。不过这并不妨碍<strong>测试</strong>活动，比如一些纸上原型的设计（感谢刘海生供图）：</p>

<p><img src="/images/2016/09/prototype-resized.png" alt="" /></p>

<p>通过这一阶段之后，我们已经有了用户故事，这时候QA需要和开发一起编写用户故事的自动化验收测试。当开发交付一部分功能之后，QA就可以做常规的用户故事测试，几个迭代之后，QA开始进行跨功能需求测试和探索性测试等。根据探索性测试的结果，QA可能会调整测试策略，调整测试优先级，完善测试用例等等。</p>

<p>根据项目的不同，团队可以从不同的象限开始测试策略的制定。事实上，Q1-Q4仅仅是一个编号，与时间、阶段并无关系，Lisa Crispin还专门<a href="http://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/">撰文解释</a>过。</p>

<p>关于QA如何在软件分析的上游就介入，然后通过BDD的方式与业务分析师一起产出软件的各种规格描述，并通过实例的方式来帮助整个团队对需求的理解，ThoughtWorks的林冰玉有一篇文章很好的介绍了<a href="http://insights.thoughtworkers.org/when-we-talk-about-bdd/">BDD的正确做法</a>。如果将QA的外延扩展到在线的生产环境，制定合理的测量指标，调整测试策略，强烈推荐林冰玉写的另一篇文章<a href="http://www.jianshu.com/p/20b454a88bdb">产品环境中的QA</a>。</p>

<h4>其他职责</h4>

<p>事实上，软件生命周期中有很多的活动，有很多处于<code>灰色</code>地段。既可以说是应该开发做，又可以说应该QA做，甚至可以推给其他角色（比如OPs）。不过我们知道，一旦涉及角色，人们就再也不会按照<code>全局优化</code>的思路来应对问题了。这种<code>灰色</code>的活动包括：</p>

<ul>
<li>持续集成的搭建</li>
<li>测试环境的创建于维护</li>
<li>UAT上的数据准备</li>
<li>代码中的测试代码的维护</li>
<li>测试代码的重构</li>
</ul>


<p>在团队实践中，这些活动我们通常会让QA和开发或者OPs同事一起结对来完成。一方面避免知识孤岛的形成，另一方面在跨角色的工作中，也可以激发出更多不同的思路。</p>

<h3>万能的QA？</h3>

<p>虽然在这些活动中，QA都会参与，但是并不是说团队里只要有一个QA就可以了。QA在参与这些活动时，侧重点还是有很大不同的。</p>

<p>比如需求分析阶段，如果有QA的加入，一些从QA角度可以发现的有明显缺陷的场景，则可以在分析阶段就得到很好的处理。另一方面，尽早介入可以设计出更合理的测试计划（比如哪些功能的优先级比较高，用户更会频繁使用，那么对应的测试比重也会更高）。在Story分析与书写阶段，QA可以帮助写出更加合理的验收条件，既满足业务需求，又可以很好的指导开发。</p>

<p>在和开发一起编写澄清需求时，主要是编写自动化验收测试，而不是实际编写业务逻辑的实现（虽然QA应该参与<code>Code Reivew</code>环节，学习并分享自己的观点）；甚至在上线运维阶段，QA还需要和OPs一起来设计用户数据的采集指标（比如用户访问的关键路径，浏览器版本，地区的区分等），从而制定出新的测试策略。</p>

<h3>扩展阅读</h3>

<ul>
<li><a href="http://www.slideshare.net/abagmar/what-is-agile-testing-how-does-automation-help">What is Agile testing - How does automation help?</a></li>
<li><a href="http://insights.thoughtworkers.org/agile-showcase-se7en/">敏捷实践Showcase的七宗罪</a></li>
<li><a href="http://www.jianshu.com/p/20b454a88bdb">产品环境下的QA</a></li>
<li><a href="https://book.douban.com/subject/5338399/">《敏捷软件测试》</a></li>
</ul>


<p>P.S. 感谢林冰玉对本文的<code>Review</code>和指导。</p>
]]></content>
  </entry>
  
</feed>
