<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: functional programming | I code it]]></title>
  <link href="http://abruzzi.github.com/category/functional-programming/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2015-02-20T23:09:46+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[underscore.js中的函数式编程]]></title>
    <link href="http://abruzzi.github.com/2015/02/functional-programming-in-underscore-dot-js/"/>
    <updated>2015-02-20T20:11:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/02/functional-programming-in-underscore-dot-js</id>
    <content type="html"><![CDATA[<h2>JavaScript中的map/reduce</h2>

<p>在过去的10年间，不论你是否对大数据有所涉足，你肯定听过<code>map/reduce</code>这个貌似很高大上的词。这个高大上的词事实上来自于<code>函数式编程</code>世界。<code>map</code>的意思是影射，即将一个集合中的内容，通过应用某种函数，形成另外一个集合。<code>reduce</code>表示求和，或者规约，即将一个集合以某种函数规约为一个值。</p>

<p><a href="http://underscorejs.org/">underscore.js</a>是一个<code>非常强大</code>的JavaScript库，也是我的工具箱里的必备品。事实上在我自己的小项目中，我更倾向于使用<code>jQuery</code>+<code>underscore.js</code>来完成所有的功能，而不是使用诸如<code>AngularJS</code>之类的框架。</p>

<p>作为一个库，<code>underscore.js</code>提供了丰富的API来操作JavaScript中的集合，对象，函数等，可以节省程序员大量的时间，我们在这篇文章中来看看<code>underscore.js</code>中基本的函数式编程特性。</p>

<h3>使用map消除for-loop</h3>

<p>我们先来看一个小例子：我们要编写一个名为<code>makeQuery</code>的函数，它接受一个JavaScript对象和一个分隔符，然后将JavaScript对象展开，形成<code>key=value[分隔符key=value]</code>的形式。正如下面这个测试所反映的：</p>

<p>```js
it("make query from object", function() {</p>

<pre><code>var cookies = {
    "JSESSIONID": "6C729E682C05AA56017E3D1675CE8E5F",
    "_USER": "GEO-NASTAR"
};

var expected = "JSESSIONID=6C729E682C05AA56017E3D1675CE8E5F;_USER=GEO-NASTAR";

expect(makeQuery(cookies, ";")).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>一个直接的解决方案是：</p>

<p>```js
function makeQuery(obj, delimiter) {</p>

<pre><code>var strArray = [];

for (var key in obj) {
    strArray.push(key + "=" + obj[key]);
}

return strArray.join(delimiter);
</code></pre>

<p>}
```</p>

<p>我们再来看另外一个小例子：给定一个字符串（人名）数组，将数组中的所有人名都变成大写字母开头。正如下面这个测试所反映：</p>

<p>```js
it("capitalize", function() {</p>

<pre><code>var names = ["juanchen", "mingliang", "lu", "juntao"];
var expected = ["Juanchen", "Mingliang", "Lu", "Juntao"];

expect(capitalize(names)).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>一个可能的函数如下：</p>

<p>```js
function capitalize(strArrays) {</p>

<pre><code> var newArray= [];

 strArrays.forEach(function(str) {
      str = str.charAt(0).toUpperCase() + str.slice(1);
      newArray.push(str);
 });

 return newArray;
</code></pre>

<p>}
```</p>

<p>如果仔细观看这两函数实现，会发现虽然做的事情完全不同（一个做对象到字符串到的连接，一个做字符串的首字母大写转换），但是如果从稍微高一点的抽象层次来看，会发现其实这两个函数式<code>一样的</code>！！</p>

<p>如果写成伪代码：</p>

<p>```js
function xxx(array) {</p>

<pre><code>var newArray = [];

forLoop(array, function(item) {
    newArray.push(doSomething(item));
});

return newArray;
</code></pre>

<p>}
```</p>

<p>即，声明一个新的数组，迭代传入的数组，然后做<code>某种操作</code>，将结果存入数组，最后返回该数组。由于JavaScript是一个支持函数式变成范式的语言，我们可以将<code>某种操作</code>从外部传入，这样，这部分代码就可以被重用了！！</p>

<p>```js
function xxx(array, func) {</p>

<pre><code>var newArray = [];

forLoop(array, func(item));

return newArray;
</code></pre>

<p>}
```</p>

<p>看着很眼熟对吧，没错，这就是<code>map</code>操作。目前<code>V8</code>引擎已经把这个操作内置到了语言级别了，你可以直接在数组上调用<code>map</code>来完成映射的操作。不过我们这篇文章的主角是<code>underscore.js</code>，因此来看看在<code>underscore.js</code>里怎么使用<code>map</code>吧，还是上面这两个例子：</p>

<p>```js
function makeQuery(params, delimiter) {</p>

<pre><code>return _.map(params, function (value, key) {
    return key + '=' + value;
}).join(delimiter);
</code></pre>

<p>}</p>

<p>function capitalize(items) {</p>

<pre><code>return _.map(items, function(item) {
    return item.charAt(0).toUpperCase() + item.substring(1).toLowerCase();
});
</code></pre>

<p>}
```</p>

<p>对比一下会发现，我们已经将<code>for</code>语句消除掉了（它被内置到了<code>_.map</code>函数中了）。这是一个非常伟大的提升，而代码更加表意。</p>

<h3>使用reduce简化<code>规约</code></h3>

<p>我们来看另一个例子：给定一个工资列表，我们要计算公司为我们交纳的公积金的总和，假设比率为15%。测试如下：</p>

<p>```js
it("calculate rate", function() {</p>

<pre><code>var rate = 0.15;
var salaries = [3200.00, 1768.00, 4020.00];

var total = calcRate(salaries, rate);

expect(total).toEqual(1348.2);
</code></pre>

<p>})
```</p>

<p>一个直观的实现如下：</p>

<p>```js
function calcRate (salaries) {</p>

<pre><code>var rate = 0.15;
var minimunCost = 0;

salaries.forEach(function(salary) {
    minimunCost += salary * rate;
});

return minimunCost;
</code></pre>

<p>}
```</p>

<p>再来看一个例子：我们有一个单词列表，需要统计出每个单词出现的次数。测试如下：</p>

<p>```js
it("count word", function() {</p>

<pre><code>var words = ["hello", "hello", "my", "friend", "my", "heart"];

var result = count(words);

expect(result["hello"]).toEqual(2);
expect(result["my"]).toEqual(2);
expect(result["friend"]).toEqual(1);
expect(result["heart"]).toEqual(1);
</code></pre>

<p>});
```</p>

<p>一个直接的实现函数如下：</p>

<p>```js
function count(words) {</p>

<pre><code>var result = {};

words.forEach(function(word) {
    result[word] = (result[word] || 0) + 1;
});

return result;
</code></pre>

<p>}
```</p>

<p>现在再来仔细对比这两个实现，如果从稍微<code>高级别</code>的层次来抽象，会发现这两段代码是<code>一样的</code>，如果写成伪代码的话，看起来是这样的：</p>

<p>```js
function xxx(array [,func]) {</p>

<pre><code>var result;

array.forEach(function(item) {
    result += func(item);
});

return result;
</code></pre>

<p>}
```</p>

<p>注意可以传入一个可选的<code>func</code>作为计算子，另外此处的<code>+=</code>表示某种形式的累加（count函数中的复赋值其实是另一种形式的累加）。</p>

<p>这种<code>传入一个数组，通过某种形式的累加而生成一个单独的值</code>的计算，被称为<code>reduce</code>函数。当然，现在<code>V8</code>引擎已经内置了对<code>reduce</code>的支持。我们来看看在<code>underscore.js</code>中如何使用<code>reduce</code>：</p>

<p>```js
function calcRate(items, rate) {</p>

<pre><code>return _.reduce(items, function (total, value) {
    return total + value * rate;
}, 0);
</code></pre>

<p>}</p>

<p>function count(words) {</p>

<pre><code>return _.reduce(words, function(frequencies, word) {
    frequencies[word] = (frequencies[word] || 0) + 1;
    return frequencies;
}, {});
</code></pre>

<p>}
```</p>

<p><code>_.reduce</code>接受三个参数，分别是集合，累加器，和一个可选的初始值。应该注意的是第二个参数是一个函数，而这个函数的参数需要特别说明：第一个参数是上一次累加器的返回值，在迭代的第一次，这个值是调用<code>_.reduce</code>时传入的初始值。</p>

<p>以<code>calcRate</code>为例，调用
<code>calcRate([1000, 2000, 1500], 0.15)</code>时，第一次调用中间匿名函数时，total的值为初始值<code>0</code>；第二次则为<code>0+1000*0.15 = 150</code>；第三次则为<code>150+2000*0.15 = 450</code>。</p>

<h3>一个实际的例子</h3>

<p>如果纯粹列举<code>underscore.js</code>的特性，难免变得枯燥，我们来编写一个<code>实际</code>的例子来学习<code>map/reduce</code>的用法。</p>

<p>假设我们有一段文本：</p>

<p>```
var text =
"Hello darkness, my old friend,
I've come to talk with you again,
Because a vision softly creeping,
Left its seeds while I was sleeping,
And the vision that was planted in my brain
Still remains
Within the sound of silence.</p>

<p>In restless dreams I walked alone
Narrow streets of cobblestone,
'Neath the halo of a street lamp,
I turned my collar to the cold and damp
When my eyes were stabbed by the flash of a neon light
That split the night
And touched the sound of silence.</p>

<p>And in the naked light I saw
Ten thousand people, maybe more.
People talking without speaking,
People hearing without listening,
People writing songs that voices never share
And no one dared
Disturb the sound of silence."
```</p>

<p>我们来统计一下每个单词出现的次数，<strong>不区分</strong>大小写。JavaScript中的字符串对象有一个<code>match</code>方法，<code>match</code>的参数可以是正则表达式，返回该字符串的第一个匹配：</p>

<p>```js
"hello world".match(/\w+/)
//["hello"]</p>

<p>"... hello world".match(/\w+/)
//["hello"]
```</p>

<p>注意<code>...</code>没有匹配正则表达式<code>\w</code>。当参数为带有<code>g</code>(global)选项的正则表达式时，该函数会返回所有匹配该正则表达式的数组：</p>

<p>```js
"hello world".match(/\w+/g)
//["hello", "world"]</p>

<p>"... hello world".match(/\w+/g)
//["hello", "world"]
```</p>

<p>有了这个<code>match</code>我们就可以很容易的将上述的文本分割为一个单词的数组，而根据要求，我们需要将所有的单词都转成小写。</p>

<p>可以先编写一个分割文本并转换小写的函数：</p>

<p>```js
function text2words(text) {</p>

<pre><code>return _.map(text.match(/\w+/g), function(word) {
    return word.toLowerCase();
});
</code></pre>

<p>}
```</p>

<p>而对应的count函数则为：</p>

<p>```js
function count(words) {</p>

<pre><code>return _.reduce(words, function(frequencies, word) {
    frequencies[word] = (frequencies[word] || 0) + 1;
    return frequencies;
}, {});
</code></pre>

<p>}
```</p>

<p>还可以使用<code>underscore.js</code>的链式操作，使用<code>_(object)</code>生成一个<code>underscore</code>包装过的对象。然后就可以使用<code>_(object).map(...).reduce(...)</code>的形式了：</p>

<p>```js
function count(text) {</p>

<pre><code>return _(text.match(/\w+/g)).map(function(word) {
    return word.toLowerCase()
}).reduce(function(frequencies, word) {
    frequencies[word] = (frequencies[word] || 0) + 1;
    return frequencies;
}, {});
</code></pre>

<p>}
```</p>

<p><img src="/images/2015/02/wordcount-resized.png" alt="wordcount" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Lisp中的宏(Macro)]]></title>
    <link href="http://abruzzi.github.com/2013/06/macro-in-common-lisp/"/>
    <updated>2013-06-15T11:12:00+10:00</updated>
    <id>http://abruzzi.github.com/2013/06/macro-in-common-lisp</id>
    <content type="html"><![CDATA[<h4>Lisp与其他语言之区别</h4>

<p>函数式编程，前缀表达式，繁多的括号，奇怪的操作符等等，这些都足以让Lisp和其他编程语言看起来有很大的区别，但是这些区别并非本质上的差异。让Lisp和其他编程语言有本质区别的是它对<code>宏</code>的支持。</p>

<p>C语言中的，被称为<code>宏</code>的预编译系统自有其好处，但是和Lisp中的<code>宏</code>比起来，好比的Notepad和Vim或者Emacs之间的差异。</p>

<h4>数据与代码</h4>

<p>在Lisp中，数据和代码间的差异非常小，<a href="http://icodeit.org/2013/06/common-lisp-basic/">上一篇文章</a>简单讨论了<code>引用</code>的基本概念，其中对数据与代码的差异已经有所涉及。</p>

<h4>宏(Macro)</h4>

<p>简而言之，<code>宏</code>即替换，在Lisp中，可以通过程序生成代码(s-expr)，而这些代码又可以被执行（当然，需要是合法的s-expr）。这一点赋予了<code>宏</code>无限的可能性，比如定义一个新的语法：</p>

<p><code>
(defmacro only (condition &amp;rest body)
  `(if ,condition (progn ,@body)))
</code></p>

<p>Lisp中函数macroexpand-1可以用来查看调用时<code>宏</code>是如何展开的：</p>

<p>```</p>

<blockquote><p>(macroexpand-1 '(only (> x 10) (format t "big than 10")))</p></blockquote>

<p>(IF (> X 10)</p>

<pre><code>(PROGN (FORMAT T "big than 10")))
</code></pre>

<p>```</p>

<p>上例中，<code>(&gt; x 10)</code>被作为<code>condition</code>，而<code>(format t "big than 10")</code>作为<code>body</code>传递给了宏。</p>

<p>```</p>

<blockquote><p>(macroexpand-1 '(only (> x 10)</p>

<pre><code>(format t "big than 10")
(format t "~%")))
</code></pre></blockquote>

<p>(IF (> X 10)</p>

<pre><code>(PROGN (FORMAT T "big than 10") (FORMAT T "~%")))
</code></pre>

<p>```</p>

<p>使用<code>progn</code>是为了让剩余的多条语句(如果有的话)，逐条执行，并返回最后一条语句的值（正如在函数中那样）。</p>

<h4>可能的陷阱</h4>

<p><a href="http://icodeit.org/2013/06/common-lisp-basic/">上一篇文章</a>中讨论了迭代的通用方式<code>do</code>，虽然很通用，但是三段式的定义略显繁琐。</p>

<p>我们可以编写一个简单的宏<code>ntimes</code>，它接受一个数字参数N和一个代码块Block，并执行N次这个Block：</p>

<p><code>
(ntimes 10 (format t "Hello, world~%"))
</code></p>

<p>将打印10次<code>Hello, world</code>，<code>宏</code>的定义如下：</p>

<p><code>``
(defmacro ntimes (n &amp;rest prog)
 </code>(do ((x 0 (1+ x)))</p>

<pre><code>   ((&gt;= x ,n))
 ,@prog))
</code></pre>

<p>```</p>

<p>但是这个宏在某些场景下不能如预期般的工作：比如当在使用<code>ntimes</code>的context中，本身有一个变量x，而在代码块Block中，尝试修改这个x，会发生什么呢？</p>

<p>```
(let ((x 10))</p>

<pre><code>(ntimes 5
   (format t "~a~%" x)))
</code></pre>

<p>```</p>

<p>预期的执行结果为打印5次10，但是事实上：</p>

<p><code>
0
1
2
3
4
</code></p>

<p>这是因为<code>宏</code>的内部使用了同名的变量，而由于作用域的原因，外部的let被屏蔽了，事实上宏的设计者貌似无法避免这类事情的发生，因为使用者如何使用是不能预料的，Lisp提供了另一种解决方案(类似于UUID)，使用<code>gensym</code>，以避免这种情况：</p>

<p>```</p>

<blockquote><p>(gensym)</p></blockquote>

<h1>:G778</h1>

<blockquote><p>(gensym)</p></blockquote>

<h1>:G779</h1>

<p>```</p>

<p>函数<code>gensym</code>每次都会分配一个新的ID作为标示，因此宏的实现可以修改为：</p>

<p>```
(defmacro ntimes (n &amp;rest prog)
  (let ((g (gensym)))</p>

<pre><code>`(do ((,g 0 (+ ,g 1)))
     ((&gt;= ,g ,n))
   ,@prog)))
</code></pre>

<p>```</p>

<p>事实上，这个版本还是有一个隐藏的bug：这里我们预期的n是一个数字，而实际上使用者是可以传入一个表达式如：<code>(setf x (- x 1))</code>，而由于<code>do</code>的特性，迭代中每次都查看测试条件是否满足<code>(&gt;= ,g ,n)</code>，这会使得<code>(setf x (- x 1))</code>会被执行N次。也就是说，当数字N是一个有副作用的表达式时，我们的宏的行为是错误的，可以通过引入额外的临时变量来解决这个问题。</p>

<p>即在最开始的适合对N求值并赋值给一个临时变量，然后每次的测试都是基于这个临时变量而来：</p>

<p>```
(defmacro ntimes (n &amp;rest prog)
  (let ((g (gensym))</p>

<pre><code>    (h (gensym)))
`(let ((,h ,n))
   (do ((,g 0 (+ ,g 1)))
       ((&gt;= ,g ,h))
     ,@prog))))
</code></pre>

<p>```</p>

<h4>定义新的语法</h4>

<p>这一小节的一个例子是for循环的<code>宏</code>定义：</p>

<p>```
(defmacro for (var start stop &amp;body body)
  (let ((gstop (gensym)))</p>

<pre><code>`(do ((,var ,start (1+ ,var))
      (,gstop ,stop))
     ((&gt; ,var ,gstop))
   ,@body)))
</code></pre>

<p>```</p>

<p>这样，可以很方便的使用我们比较熟悉的for语句了：</p>

<p>```</p>

<blockquote><p>(for x 1 5</p>

<pre><code> (print x))
</code></pre></blockquote>

<p>1
2
3
4
5
```</p>

<p>另一个有意思的例子是求平均值的<code>avg</code>宏：</p>

<p><code>
(defmacro avg (&amp;rest args)
  `(/ (+ ,@args) ,(length args)))
</code></p>

<p>由于Lisp中采取前缀表达式，因此像<code>+</code>这种函数可以很方便的apply到一个列表上，如果是中缀表达式，则这种形式的抽象就变得非常复杂。</p>

<p>```</p>

<blockquote><p>(macroexpand-1 '(avg 1 2 3 4 5 6 7 8 9 10))
(/ (+ 1 2 3 4 5 6 7 8 9 10) 10)</p>

<p>(avg 1 2 3 4 5 6 7 8 9 10)
11/2
```</p></blockquote>

<hr />

<p>附：文中部分代码示例来源于《ANSI Common Lisp》一书。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[common lisp 里的一些基本概念]]></title>
    <link href="http://abruzzi.github.com/2013/06/common-lisp-basic/"/>
    <updated>2013-06-13T16:15:00+10:00</updated>
    <id>http://abruzzi.github.com/2013/06/common-lisp-basic</id>
    <content type="html"><![CDATA[<h3>Common Lisp</h3>

<p>之前一直说JavaScript是一门被误解很深的语言，现在学习了一段时间Lisp后发现，Lisp才是！Lisp一直为人所诟病的是它虽然很强大，但是有点学院派，难当大用。但是读了七，八章<a href="http://book.douban.com/subject/6859720/">《Practical Common Lisp》</a>和几章<a href="http://book.douban.com/subject/1456906/">《ANSI Common Lisp》</a>之后发现，怎么就学院派了，其他编程语言能处理的，Lisp一样可以处理，其他语言处理不了的（或者很繁琐的，比如java中的循环，map之类），Lisp却能处理。</p>

<p>Lisp本质上是一个抽象语法树（AST）而已，但是又提供了一些操作这个AST的方法（比如强大的宏），这样很容易用Lisp开发出来一个新的DSL。用函数式编程的好处之一就是在编写完一个应用程序之后，通常还可以获得一个新的语言（于业务领域很匹配的语言）。</p>

<p><a href="http://zh.wikipedia.org/wiki/Common_Lisp">Common Lisp</a>本身是Lisp的一个方言，是有一个标准来定义，其目的是为了标准化众多的Lisp分支而定。</p>

<h4>sbcl环境</h4>

<p><a href="http://icodeit.org/2013/06/setup-lisp-development-env-on-mac/">上一篇文章</a>已经介绍了如何在Mac下配置Common Lisp的开发环境：</p>

<p><img src="http://abruzzi.github.com/images/2013/06/sbcl.resized.png" alt="image" /></p>

<h4>引用（quote）</h4>

<p>由于在Lisp中，数据和代码都是通过S-expr来表示，所以需要用一种标记法来告诉解释器：这个表达式表示数据/代码。这就是引用的作用：</p>

<p>```</p>

<blockquote><p>(+ 1 2 3 4 5)
15</p>

<p>'(+ 1 2 3 4 5)
(+ 1 2 3 4 5)
```
解释器会将s-expr的第一项作为函数(car)，而将后续的元素(cdr)作为参数传递给第一项来调用，并求值。可以通过引用（quote）来阻止解释器这样解释。</p></blockquote>

<h4>反引号(`)</h4>

<p>与引用对应的，有一个反引号形式的引用(在键盘上1的左边)。一般的用法上，它与<code>quote</code>的含义一样，都是防止解释器解释被引用的列表。</p>

<p>```</p>

<blockquote><p>`(a b c)
(a b c)</p>

<p>`(a b (+ 1 2))
(a b (+ 1 2))
```</p></blockquote>

<p>但是，反引号引用的列表提供了重新启动求值的能力，这……，我的意思是，如上式中，如果想要将<code>(+1 2)</code>这个子列表求值，怎么做到呢？反引号引用提供了这个能力，用逗号(,)作为子列表的前缀即可：</p>

<p>```</p>

<blockquote><p>`(a b ,(+ 1 2))
(a b 3)
```</p></blockquote>

<p>这个当然在此刻看起来毫无用处，或者感觉略有画蛇添足之嫌，但是在宏中，这个操作符却有很广泛的用途，这里有一个有意思的例子：</p>

<p><code>
(defun foo (x)
  (only (&gt; x 10) (format t "big than 10")))
</code></p>

<p>我们可以通过<code>if</code>来实现此处的only，当only之后的条件满足的话，就执行后续的所有语句：</p>

<p><code>
(defmacro only (condition &amp;rest body)
  `(if ,condition (progn ,@body)))
</code></p>

<p>此处可以看到，对于宏代码体中，有部分代码我们不需要引用，如(if, progn)，而另外一部分则需要解释器真实地去解释来获得值。另外，我们需要宏本身返回一个列表(被引用的列表)。</p>

<h4>通用的循环（do）</h4>

<p><code>do</code>是Lisp中通用的处理迭代的操作符，可以在其中创建局部变量：</p>

<p>```
(do ((i 0 (1+ i)))</p>

<pre><code>((&gt;= i 4))
</code></pre>

<p>  (print i))
```</p>

<p><code>do</code>的格式比较复杂：</p>

<p>```
(do (variable-definition*)</p>

<pre><code>(end-test-form result-form*)
statement*)
</code></pre>

<p>```</p>

<p>其中，变量声明部分的格式为：</p>

<p><code>
(variable init-form step-form)
</code></p>

<p>然后是测试，如果测试成功，有一个可选的返回值（上例中为nil），然后是statement部分，如果测试失败，则执行一次statement，然后通过step-from修改变量的值，测试，执行。</p>

<p>上例的代码会打印<strong>0-3</strong>的数字。<code>do</code>的另外一个功用是它支持多个变量并发的循环，这是(dolist, dotimes等无法完成的，所以在很多宏中，do是不二之选)。</p>

<p>```
(do ((n 0 (1+ n))</p>

<pre><code> (cur 0 next)
 (next 1 (+ cur next)))
((= 10 n) cur))
</code></pre>

<p>```</p>

<p>这个例子则没有statement部分，当n等于10这个测试条件成立后，返回cur当前的值。</p>

<h4>apply 和 funcall</h4>

<p><code>apply/call</code> 这两个函数当然是FP编程语言的必备了：</p>

<p>```</p>

<blockquote><p>(apply #'(lambda (x y) (+ x y)) '(3 4))
7</p>

<p>(funcall #'(lambda (x y) (+ x y)) 3 4)
8
```</p></blockquote>

<p>注意这里的<code>#'</code>操作符，它表示对函数对象的引用，就像<code>'</code>是对list的引用一样。</p>

<h4>list的基本操作</h4>

<p>构造列表（cons），<code>cons</code>的作用是将两个对象结合成一个对象（这个新的对象由两部分组成），这两部分分别由<code>car</code>,<code>cdr</code>来引用。</p>

<p>```</p>

<blockquote><p>(cons 'a nil)
(a)</p>

<p>(cons 'a (cons 'b nil))
(a b)
```</p></blockquote>

<p>当然可以用更简洁的方式：使用list函数：</p>

<p>```</p>

<blockquote><p>(list a b)
(a b)
```</p></blockquote>

<p><code>car</code>, <code>cdr</code>的用法如下：</p>

<p>```</p>

<blockquote><p>(setf x '(a b c (d e)))
(a b c (d e))</p>

<p>(car x)
a</p>

<p>(cdr x)
(b c (d e))</p></blockquote>

<p>```</p>

<p>有了<code>car</code>,<code>cdr</code>，对于既定的list，我们总是可以将其遍历（这在宏中非常有用）。</p>
]]></content>
  </entry>
  
</feed>
