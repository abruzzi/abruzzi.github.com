<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | I code it]]></title>
  <link href="http://abruzzi.github.com/category/python/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-03-02T10:57:21+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[看看这些年你都学了什么？]]></title>
    <link href="http://abruzzi.github.com/2015/11/what-you-have-learnt-those-years/"/>
    <updated>2015-11-01T17:03:00+08:00</updated>
    <id>http://abruzzi.github.com/2015/11/what-you-have-learnt-those-years</id>
    <content type="html"><![CDATA[<h3>数据可视化</h3>

<p>多年下来，我的<code>Google Bookmarks</code>里已经有近万条的书签。大部分内容是我在读过一遍之后就收藏起来的，也有很多看了一眼之后，觉得不错，然后收藏起来准备以后读的（当然，你也知道，再也没有打开过）。</p>

<p>有没有一个方法可以让我以可视化的方式，看到这些年我都学了那些东西呢？将书签列表作为源数据，然后将这些信息可视化出来会非常有意思：比如收藏夹中的热门词是什么，哪段时间收藏了多少条的书签（学习投入程度趋势）等等。</p>

<p>下图是我的书签中，排行前<code>30</code>的关键字排序。可以明显的看出，我对于<code>JavaScript</code>的喜爱程度相当高，对<code>美食</code>的喜爱也超过了<code>python</code>和<code>linux</code>。</p>

<p><img src="/images/2015/11/bookmarks-trending-resized.png" alt="bookmarks trending" /></p>

<p>这里我将使用<code>python</code>，结合<code>python</code>的一些库来实现<code>书签可视化</code>。简而言之，整个过程可以分成这样几个步骤：</p>

<ol>
<li>将Google Bookmarks导出为本地文件</li>
<li>将书签文件解析为容易处理的内部格式（比如python的dict等）</li>
<li>由于书签中会有中文的句子，所以会涉及到分词</li>
<li>统计词语的频率，并绘制成图标</li>
</ol>


<h4>数据源</h4>

<p><code>Google Bookmarks</code>本身可以直接导出成<code>HTML</code>文件。该<code>HTML</code>文件包含了时间戳和书签的标题，我们可以通过<code>python</code>的库<code>BeautifulSoup</code>将HTML中的文本抽取出来：</p>

<p>```python
from bs4 import BeautifulSoup</p>

<p>def load_bookmarks_data():</p>

<pre><code>soup = BeautifulSoup(open('bookmarks_10_21_15.html').read(), "html.parser")
return soup.get_text()
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>print load_bookmarks_data() 
</code></pre>

<p>```</p>

<p><code>BeautifulSoup</code>提供非常好用的API来抽取结构化文档中的内容。</p>

<p><img src="/images/2015/11/bookmark-titles-resized.png" alt="bookmark titles" /></p>

<h4>分词</h4>

<p><code>BeautifulSoup</code>获得的是一条条独立的句子，我们需要使用分词器将所有的句子分解成片段。这里我使用了<code>jieba</code>（<a href="https://github.com/fxsjy/jieba">结巴分词</a>）分词器来完成这个任务：</p>

<p>```python
import jieba</p>

<p>data = "我在出报表，你的博客写的怎么样了"
seg_list = jieba.cut(data, cut_all=False)</p>

<p>for seg in seg_list:</p>

<pre><code> print seg
</code></pre>

<p>```</p>

<p>将会输出：</p>

<p><code>
我
在
出
报表
，
你
的
博客
写
的
怎么样
了
</code></p>

<p>我们定义一个方法来将上一步中的文本分词：</p>

<p>```python</p>

<p>def extract_segments(data):</p>

<pre><code>seg_list = jieba.cut(data, cut_all=False)
return [seg.strip().lower() for seg in seg_list if len(seg) &gt; 1]
</code></pre>

<p>```</p>

<p>分词之后，我们将单词转换为小写，并剔除掉那些长度小于1的字符串。这样可以保证所有的词都是词语。python的<code>list推导式</code>写起来非常简洁，一行代码就完成了<code>过滤</code>和<code>映射</code>的工作。</p>

<h4>可视化</h4>

<p>有了分好的词之后，只需要统计每个词出现的频率，然后按照频率来绘制图表。我们使用<code>python</code>标准库中的<code>Counter</code>来实现：</p>

<p>```python
from collections import Counter</p>

<p>def tokenize():</p>

<pre><code>filtered = extract_segments(load_bookmarks_data())
return Counter([word for word in filtered])
</code></pre>

<p>```</p>

<p>要获取前<code>N</code>个，只需要使用<code>most_common(N)</code>即可：</p>

<p><code>python
tokenize().most_common(10)
</code></p>

<p><code>
[(u'and', 552), (u'the', 501), (u'with', 485), (u'to', 446), (u'javascript', 432), (u'in', 330), (u'for', 308), (u'...', 270), (u'java', 270), (u'blog', 269)]
</code></p>

<p>有了数据之后，使用<code>matplotlib</code>做一个简单的<code>bar</code>图标：</p>

<p>```python
import matplotlib
import matplotlib.pyplot as plt</p>

<p>from pandas import DataFrame</p>

<p>def visualize():</p>

<pre><code>frame = DataFrame(tokenize().most_common(20), columns=['keywords', 'frequencies'])

ax = frame.plot(kind='bar')

plt.savefig('bookmarks_trending.png', format='png', dpi=600)
</code></pre>

<p>```</p>

<p><img src="/images/2015/11/bookmarks-trending-with-stops-resized.png" alt="" /></p>

<h4>stopwords</h4>

<p>不过，上图中有很多噪音信息，如<code>and</code>, <code>the</code>等，这些在所有文章中都会出现的词并没有实际意义，统称为<code>stopwords</code>。通常在计算过程中会将其忽略：</p>

<p>```python</p>

<p>def tokenize():</p>

<pre><code>stoplist = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now']
stoplist.extend(['...', 'com', 'using', u'使用', 'blog', u'博客', u'博客园', u'做法', u'论坛', 'part', u'部分', u'天下'])
filtered = extract_segments(load_bookmarks_data())

return Counter([word for word in filtered if word not in stoplist])
</code></pre>

<p>```</p>

<p>重新绘制即可获得上文中的图：</p>

<p><img src="/images/2015/11/bookmarks-trending-resized.png" alt="bookmarks trending" /></p>

<p>完整的代码<a href="https://github.com/abruzzi/bookmarks-viz">请参考这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中的 list comprehension 以及 generator]]></title>
    <link href="http://abruzzi.github.com/2015/03/list-comprehension-in-python/"/>
    <updated>2015-03-30T17:06:00+08:00</updated>
    <id>http://abruzzi.github.com/2015/03/list-comprehension-in-python</id>
    <content type="html"><![CDATA[<h3>一个小故事</h3>

<p>三年前，我在<a href="http://icodeit.org/2012/07/post-from-python-vim-2/">一篇博客</a>里不无自豪的记录了python编写的小函数，当时感觉python真强大，11行代码就写出了一个配置文件的解析器。</p>

<p>```py
def loadUserInfo(fileName):</p>

<pre><code>userinfo = {}
file = open(fileName, "r")
while file:
    line = file.readline()
    if len(line) == 0:
        break
    if line.startswith('#'):
        continue
    key, value = line.split("=")
    userinfo[key.strip()] = value.strip()

return userinfo
</code></pre>

<p>```</p>

<p>最近正在跟同事学习<code>python在数据挖掘中的应用</code>，又专门学习了一下python本身，然后用<code>list comprehension</code>简化了以下上面的代码：</p>

<p>```py
def loadUserInfo(file):</p>

<pre><code>return dict([line.strip().split("=")
    for line in open(file, "r")
        if len(line) &gt; 0 and not line.startswith("#")])
</code></pre>

<p>```</p>

<p>这个函数和上面的函数的功能一样，都是读取一个指定的<code>key=value</code>格式的文件，然后构建出来一个<code>映射</code>（当然，在Python中叫做<code>字典</code>）对象，该函数还会跳过空行和<code>#</code>开头的行。</p>

<p>比如，我想要查看一下<code>.wgetrc</code>配置文件：</p>

<p>```py
if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>print(loadUserInfo("/Users/jtqiu/.wgetrc"))
</code></pre>

<p>```</p>

<p>假设我的<code>.wgetrc</code>文件配置如下：</p>

<p>```
http-proxy=10.18.0.254:3128
ftp-proxy=10.18.0.254:3128</p>

<h1>http_proxy=10.1.1.28:3128</h1>

<p>use_proxy=yes
```</p>

<p>则上面的函数会产生这样的输出：</p>

<p><code>
{'use_proxy': 'yes', 'ftp-proxy': '10.18.0.254:3128', 'http-proxy': '10.18.0.254:3128'}
</code></p>

<h3>list comprehension（列表推导式）</h3>

<p>在python中，<code>list comprehension</code>（或译为列表推导式）可以很容易的从一个列表生成另外一个列表，从而完成诸如<code>map</code>, <code>filter</code>等的动作，比如：</p>

<p>要把一个字符串数组中的每个字符串都变成大写：
```py
names = ["john", "jack", "sean"]</p>

<p>result = []
for name in names:</p>

<pre><code>result.append(name.upper())
</code></pre>

<p>```</p>

<p>如果用列表推导式，只需要一行：</p>

<p><code>py
[name.upper() for name in names]
</code></p>

<p>结果都是一样：</p>

<p><code>
['JOHN', 'JACK', 'SEAN']
</code></p>

<p>另外一个例子，如果想要过滤出一个数字列表中的所有偶数：</p>

<p>```py
numbers = [1, 2, 3, 4, 5, 6]</p>

<p>result = []
for number in numbers:</p>

<pre><code>if number % 2 == 0:
    result.append(number)
</code></pre>

<p>```</p>

<p>如果写成列表推导式：</p>

<p><code>py
[x for x in numbers if x%2 == 0]
</code></p>

<p>结果也是一样：</p>

<p><code>
[2, 4, 6]
</code></p>

<p>显然，列表推导更加短小，也更加表意。</p>

<h3>迭代器</h3>

<p>在了解<code>generator</code>之前，我们先来看一个<code>迭代器</code>的概念。有时候我们不需要将整个列表都放在内存中，特别是当列表的尺寸比较大的时候。</p>

<p>比如我们定义一个函数，它会返回一个连续的整数的列表：</p>

<p>```py
def myrange(n):</p>

<pre><code>num, nums = 0, []
while num &lt; n:
    nums.append(num)
    num += 1
return nums
</code></pre>

<p>```</p>

<p>当我们计算诸如<code>myrange(50)</code>或者<code>myrange(100)</code>时，不会有任何问题，但是当获取诸如<code>myrange(10000000000)</code>的时候，由于这个函数的内部会将数字保存在一个临时的列表中，因此会有很多的内存占用。</p>

<p>因此在python有了迭代器的概念：</p>

<p>```py
class myrange(object):</p>

<pre><code>def __init__(self, n):
    self.i = 0
    self.n = n

def __iter__(self):
    return self

# for python 3
def __next__(self):
    return self.next()

def next(self):
    if self.i &lt; self.n:
        i = self.i
        self.i += 1
        return i
    else:
        raise StopIteration()
</code></pre>

<p>```</p>

<p>这个对象其实实现了两个特殊的方法：<code>__iter__</code>（对于python3来说，是<code>__next__</code>）和<code>next</code>方法。其中<code>next</code>每次只返回一个值，如果迭代已经结束，就抛出一个<code>StopIteration</code>的异常。实现了这两个方法的类都可以算作是一个迭代器，他们可以被用于<code>可迭代</code>的上下文中，比如：</p>

<p>```py</p>

<blockquote><blockquote><blockquote><p>from myrange import myrange
x = myrange(10)
x.next()
0
x.next()
1
x.next()
2
```</p></blockquote></blockquote></blockquote>

<p>但是可以看到这个函数中有很多的样板代码，因此我们有了生成器表达式来简化这个过程：</p>

<p>```py
def myrange(n):</p>

<pre><code>num = 0
while num &lt; n:
    yield num
    num += 1
</code></pre>

<p>```</p>

<p>注意此处的<code>yield</code>关键字，每次使用<code>next</code>来调用这个函数时都会求值一次num并返回，具体的细节可以<a href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">参考这里</a>。</p>

<h3>区别</h3>

<p>简单来说，两者都可以在迭代器上下文中使用，看起来几乎是一样的。不同的地方是<code>generator</code>可以节省内存空间，从而提高执行速度。<code>generator</code>更适合一次性的列表处理，比如只是需要一个中间列表作为转换。而列表推导则更适合要将<code>列表</code>保存下来，以备后续使用的场景。</p>

<p>这里也有<a href="http://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension">一些讨论</a>，可以一并参看。</p>

<h3>参考</h3>

<ol>
<li><a href="http://anandology.com/python-practice-book/iterators.html">Iterators &amp; Generators</a></li>
<li><a href="https://wiki.python.org/moin/Generators">Generators Wiki</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建地图服务器（使用Mapnik）]]></title>
    <link href="http://abruzzi.github.com/2014/04/setup-map-server-by-mapnik/"/>
    <updated>2014-04-12T14:07:00+08:00</updated>
    <id>http://abruzzi.github.com/2014/04/setup-map-server-by-mapnik</id>
    <content type="html"><![CDATA[<h4>渲染引擎Mapnik</h4>

<p><a href="http://icodeit.org/2014/04/intro-map-gis/">上一篇文章</a>中大概介绍了<a href="https://github.com/mapnik">Mapnik</a>，它是一个渲染引擎，一般开发中都会使用他的python的bind做开发。</p>

<p>Mapnik的文档写的比较详细，我们这里只是做一些必要的介绍，详细的细节可以参看Mapnik在<a href="https://github.com/mapnik/mapnik/wiki">Github上的文档</a>。</p>

<p>在Mac下，安装Mapnik十分容易，使用brew即可，注意我们在此处带上<code>--with-postgresql</code>选项，使得Mapnik可以通过PostGIS来访问数据库：</p>

<p><code>sh
brew install mapnik --with-postgresql
</code></p>

<p>安装完成之后，可以通过一个小的python脚本来测试：</p>

<p>```python
import mapnik</p>

<p>map = mapnik.Map(256, 256)
map.background = mapnik.Color('red')
map.zoom_all()</p>

<p>mapnik.render_to_file(map, 'red.png', 'png')
```</p>

<p>这段脚本可以在当前目录下生成一个红色的256x256的小图片。好了，有了渲染引擎，我们需要一些数据来进行渲染了。</p>

<h4>数据源</h4>

<p>最通用的数据格式为Shapefiles，目前有很多的免费地理信息供公共下载，我们可以从<a href="http://metro.teczno.com/">Metro的站点</a>上下载一些小的数据文件。</p>

<p><code>sh
$ wget http://osm-extracted-metros.s3.amazonaws.com/chengdu.osm2pgsql-shapefiles.zip
$ mkdir chengdu
$ cd chengdu
$ unzip chengdu.osm2pgsql-shapefiles.zip
</code>
这样就得到了一组文件：</p>

<p><code>
$ find . -name "*.shp"
./chengdu.osm-line.shp
./chengdu.osm-point.shp
./chengdu.osm-polygon.shp
</code></p>

<p>每一个shp文件都会对应几个其他类型的文件，比如投影信息，属性表等。仅仅查看shp的话，有表示所有点的文件chengdu.osm-line.shp，又表示所有线的chengdu.osm-line.shp，以及表示所有面（区域）的chengdu.osm-polygon.shp文件。</p>

<p>有了这些文件，我们就可以做一些测试了，比如我们首先加载所有的线条，并根据这些线条生成一个图层：</p>

<p>```python
import mapnik</p>

<p>map = mapnik.Map(800, 800)
map.background = mapnik.Color('#ffffff')</p>

<p>style = mapnik.Style()
rule = mapnik.Rule()</p>

<p>point_symbolizer = mapnik.PointSymbolizer()
rule.symbols.append(point_symbolizer)</p>

<p>style.rules.append(rule)</p>

<p>map.append_style('default', style)</p>

<p>ds_point = mapnik.Shapefile(file='chengdu.osm-point.shp')
point = mapnik.Layer('point')
point.datasource = ds_point
point.styles.append('default')</p>

<p>map.layers.append(point)
map.zoom_all()</p>

<p>mapnik.render_to_file(map, 'chengdu.png', 'png')
```</p>

<p>可以得到：</p>

<p><img src="/images/2014/04/chengdu-point.png" alt="points" /></p>

<p>这里介绍一下Mapnik中的一些概念：一个Map可以包含若干个层（Layer），每个层可以独立着色，即可以为每个层定制样式（Style），每个样式由若干个规则组成（Rule）。每个规则由是由若干个符号定制。</p>

<p><img src="/images/2014/04/chengdu-line.png" alt="lines" /></p>

<p>如果将两者重叠，则可以得到：</p>

<p><img src="/images/2014/04/chengdu-point-and-line.png" alt="lines" /></p>

<p>```python
polygon_symbolizer = mapnik.PolygonSymbolizer(mapnik.Color('#c8102e'))
polygon_rule.symbols.append(polygon_symbolizer)</p>

<p>ds_polygon = mapnik.Shapefile(file='chengdu.osm-polygon.shp')
polygon = mapnik.Layer('polygon')
polygon.datasource = ds_polygon
polygon.styles.append('polygon')</p>

<p>map.layers.append(polygon)
```</p>

<p><img src="/images/2014/04/chengdu-polygon.png" alt="image" /></p>

<p>将这三个层叠加在一起，会得到最终的结果：</p>

<p><img src="/images/2014/04/chengdu-point-and-line-and-polygon.png" alt="lines" /></p>

<h4>数据转化</h4>

<p>在进一步之前，我们需要将数据存储在数据库中。我们可以将shapefile通过转化存入到数据库中。PostGIS本身自带了一个用于此作用的工具：<code>shp2pgsql</code>。可以通过这个工具来先将shapefile导入到数据库中。也可以直接导入别的开放数据，比如很多OSM格式的数据源，我们此处仅仅简单的从别的数据源将OSM格式的数据下载并导入到PostGIS中。</p>

<p>创建数据库<code>chengdu</code>:</p>

<p>```sh
$ createdb chengdu -O gis -E UTF8 -e
CREATE DATABASE chengdu OWNER gis ENCODING 'UTF8';</p>

<p>$ psql -U gis -d chengdu
```</p>

<p>登陆PostGres，然后为数据库<code>chengdu</code>启动PostGIS扩展：</p>

<p><code>sql
-- Enable PostGIS (includes raster)
CREATE EXTENSION postgis;
-- Enable Topology
CREATE EXTENSION postgis_topology;
-- fuzzy matching needed for Tiger
CREATE EXTENSION fuzzystrmatch;
-- Enable US Tiger Geocoder
CREATE EXTENSION postgis_tiger_geocoder;
</code></p>

<p><code>sh
$ wget http://osm-extracted-metros.s3.amazonaws.com/chengdu.osm.bz2
$ bunzip2 -d chengdu.osm.bz2
$ osm2pgsql -U gis -d chengdu -s -S ./default.style chengdu.osm
</code></p>

<p>这个命令将chengdu.osm导入到了名称为<code>chengdu</code>的数据库中。</p>

<p>可以通过SQL命令查看其中的数据：</p>

<p><code>sql
select ST_Extent(ST_Transform(way,4326)) from planet_osm_roads;
</code></p>

<p>结果如下：</p>

<p>```</p>

<pre><code>                            st_extent                                 
</code></pre>

<hr />

<p> BOX(103.564165069794 30.3634139134986,104.554549945024 30.9869936005376)
(1 row)
```</p>

<h4>WMS服务器</h4>

<p>生成图片之后，我们还需要将这些图片切成瓦片，然后公开给外部以便使用。Mapnik提供了切图的功能，并且还提供一个实现了<a href="https://github.com/mapnik/OGCServer">WMS协议的服务器</a>，以便使用。</p>

<p>安装这个OGCServer服务器非常容易：</p>

<p><code>sh
$ git clone git@github.com:mapnik/OGCServer.git
$ cd OGCServer
$ sudo python setup.py install
</code></p>

<p>但是OGCServer的启动，需要一个配置XML配置文件，这个配置文件可以由Mapnik提供的工具集生成：</p>

<p><code>sh
$ svn co http://svn.openstreetmap.org/applications/rendering/mapnik/
</code></p>

<p>这个svn仓库中包含了众多的小工具，generate_xml.py用于生成Mapnik的样式文件，generate_image.py用于生成图片，generate_tiles.py用于生成众多的瓦片。</p>

<p>此处我们将使用<code>generate_xml.py</code>来创建一个地图样式文件，</p>

<p><code>sh
$ cd svn.openstreetmap.org/applications/rendering/mapnik/
$ ./generate_xml.py osm.xml chengdu.xml --dbname chengdu --user gis --accept-none
</code></p>

<p>generate_xml.py根据osm.xml作为模板，生成<code>chengdu.xml</code>。这个文件即可用于测试OGCServer：</p>

<p><code>sh
$ OGCServer chengdu.xml
Listening at 0.0.0.0:8000....
</code></p>

<p>然后在浏览器中查看：</p>

<p><img src="/images/2014/04/ogcserver-localhost-resized.png" alt="ogcserver" /></p>

<h4>使用OpenLayers测试</h4>

<p>有了一张图片，那么我们就需要有更多的图片组成的瓦片，这就需要使用引入GIS的前端利器OpenLayers了：</p>

<p>```
$(function() {</p>

<pre><code>var map, layer;
map = new OpenLayers.Map('map', {});

layer = new OpenLayers.Layer.WMS('Tile Cache', 
    'http://localhost:8000/?', {
        layers: '__all__',
        format: 'image/png'
    });

map.addLayer(layer);

if (!map.getCenter()) {
    map.zoomToMaxExtent();
}
</code></pre>

<p>});
```</p>

<p><img src="/images/2014/04/openlayers-chengdu-resized.png" alt="openlayers" /></p>

<p><img src="/images/2014/04/openlayers-chengdu-detail-resized.png" alt="openlayers" /></p>

<p>应该注意的是，此处在OpenLayers中使用了来自与OSM导入的数据，而并非Shapefile中的数据（Shapefile中仅有三个层次，point, line, polygon）。而OSM的数据则丰富的多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIS系统如何工作]]></title>
    <link href="http://abruzzi.github.com/2014/04/intro-map-gis/"/>
    <updated>2014-04-10T23:45:00+08:00</updated>
    <id>http://abruzzi.github.com/2014/04/intro-map-gis</id>
    <content type="html"><![CDATA[<h4>GIS系统如何工作</h4>

<p>去年十二月中旬从RCA项目上下来之后，就一直在一个<a href="http://en.wikipedia.org/wiki/Geographic_information_system">GIS</a>项目上做咨询。在新的项目上，日常工作的重点主要是放在前端开发上（比如AngularJS，Grunt，Jamsine之类），对于业务（与GIS相关）方面，则完全没有涉及。</p>

<p>虽说之前也接触过<a href="http://icodeit.org/2013/03/guan-yu-hack-day/">一点GIS相关的开发</a>，比如Google Maps API，<a href="http://openlayers.org/">OpenLayers</a>之类，但是仅仅停留在使用别人的API搭建个小应用的层次。</p>

<p><img src="/images/2014/04/roads-resized.png" alt="image" /></p>

<p>直到最近，在GIS专家芦康平的指导下，才真正开始接触GIS，很快我就发现这是另一个十分好玩的新天地。简而言之，这个新的天地里，所有的东西都有一种似曾相识的感觉，但是又非常新鲜。比如地图服务器，渲染引擎，缓存，地理信息数据库等，都可以在其他的系统中找到对应。这种感觉好比收集硬币，或者收集邮票一样，当你看到新的有着不同花纹，大小，材质，年代的硬币时，那种既在意料之中又在意料之外的感觉简直太有意思了。</p>

<p>GIS系统，毋庸置疑可以帮助人们更加直观的分析数据，当数据与地理信息有所关联的时候，GIS系统会变得十分友好，也可以更充分的提供信息。</p>

<p>鉴于GIS对我来说是一个完全崭新的领域，那么学习之前，自然有很多的问题出现：</p>

<ol>
<li>地图的信息（建筑物，河流，街道）从何而来？</li>
<li>数据在服务器端以何种方式存储？</li>
<li>地图数据到底如何被渲染出来？</li>
<li>一个GIS系统的部署结构是什么样的？需要哪些组件？</li>
<li>业界的标准是什么，有哪些开源的项目和工具可供参考？</li>
</ol>


<p>等等。</p>

<h5>地图是如何被渲染的？</h5>

<p>通常来讲，我们看到的地图是由一个底图和若干个层的叠加来达到的最终结果。其中每个层次都会保存不同类型的地理信息，比如将所有的河流信息放在一个层，将建筑物放在另外一个层。</p>

<p><img src="/images/2014/04/elevation-map.jpg" alt="image" /></p>

<p>这些信息存储在数据文件中（<a href="http://en.wikipedia.org/wiki/Shapefiles">shapefiles</a>）或者数据库中，通过使用专门的工具来将这些地理信息转换成图片。由于每张图片都是透明的，这样叠加起来的最后效果就是如Google Maps之类应用的结果了。当然，叠加过程一般都发生在服务器端（有些简单应用则是在客户端完成某些层次的绘制，比如我之前发过的<a href="http://icodeit.org/placesihavebeen">我去过的地方</a>，这些热力图就是在客户端通过JavaScript加上去的。）。</p>

<p>地图在服务器端被渲染出来之后，尺寸一般会非常大。需要有工具将这些大图切分成很多组的小图，这些小图被称之为瓦片（tile）。为了给不同缩放级别的客户端提供不同的图片，这些瓦片被精心的分成了多个组，每个组都有编号。如果地图支持18级的缩放，就会现有18个分组。当然分组好越靠后，分组中的瓦片越多。</p>

<p><img src="/images/2014/04/tiles-resized.png" alt="image" /></p>

<p>比如当客户端请求缩放级别为10的地图时，客户端（比如OpenLayers）会根据经纬度计算好图片的边界，然后请求第10级的一些瓦片，并将这些瓦片排列在画布上。一般而言，这些瓦片都是正方形（256x256或者512x512）。</p>

<h5>WMS服务</h5>

<p><a href="http://en.wikipedia.org/wiki/Web_Map_Service">WMS(Web Map Service)</a>是一个基于HTTP的简单协议，客户端发送的请求中包含请求类型，地图的层次，边界等信息，服务器根据这个信息生成图片，并返回该图片：</p>

<p><img src="/images/2014/04/wms-request.png" alt="image" /></p>

<p>当然，WMS本身支持多种请求，最常见的就是<code>GetMap</code>，细节可以参考OGC规范及具体服务器的实现。而对于后端的服务器来说，从请求中获取这些信息之后，会首先从数据库/数据文件中得到数据，并使用渲染引擎绘制图片，并最后将图片返回客户端。</p>

<h5>图片类型</h5>

<p>图片分为栅格类型和矢量类型两种。栅格图片一般的原始来源是航拍，遥感等，本质上来说是照片，照片必然会有大小，如果放大到某一个范围之外，就会模糊。而矢量图是数学上的抽象，比如在某个坐标系统中，在某处有一个点A，另一处有一个点B，两点之间有一条线连接。矢量图的特点是与缩放程度无关。</p>

<p><img src="/images/2014/04/bangor_oli_2014040_red_swir_tir_720.jpg" alt="栅格图" /></p>

<p>栅格图的特点是真实，矢量图的特点是抽象（存储方便，占用空间更少，也更容易修改）。但是为了绘制正确，完整的地图，两种类型的图片信息都是必要的：</p>

<p><img src="/images/2014/04/polygon-resized.png" alt="矢量图" /></p>

<h5>常用文件格式</h5>

<p>Shapefiles是Esri公司开发出来的用于存储地理信息的文件格式。说是文件，其实是一个文件族，Shapefile包含了数种文件，其中有三种必须的(.shp，.shx，.dbf)。其他有一些可选的(.prj，.sbn/.sbx等等)。</p>

<p>OSM格式是由OpenStreetMap采用的文件格式，其实是一个XML。</p>

<p>```xml
<osm version="0.6" generator="Osmosis 0.43.1">
  <bounds minlon="144.26600" minlat="-38.55200" maxlon="145.81000" maxlat="-37.36500" origin="http://www.openstreetmap.org/api/0.6"/>
  <node id="579259" version="3" timestamp="2008-12-17T02:28:22Z" uid="57437" user="Canley" changeset="431325" lat="-37.9309048" lon="145.1282066"/>
  <node id="579260" version="5" timestamp="2009-12-03T21:42:45Z" uid="1679" user="andrewpmk" changeset="3284133" lat="-37.9388304" lon="145.1266866"/>
  <node id="579261" version="4" timestamp="2013-02-15T20:00:37Z" uid="79475" user="AlexOnTheBus" changeset="15043978" lat="-37.9404366" lon="145.1395848"/>
  <node id="579262" version="18" timestamp="2013-01-31T21:37:02Z" uid="79475" user="AlexOnTheBus" changeset="14864580" lat="-37.9295116" lon="145.1266366"></p>

<pre><code>&lt;tag k="highway" v="traffic_signals"/&gt;
</code></pre>

<p>  </node>
  <node id="579265" version="2" timestamp="2010-06-24T12:05:34Z" uid="57437" user="Canley" changeset="5065613" lat="-37.9369707" lon="145.140732"/>
  ...
</osm><br/>
```</p>

<h4>技术栈</h4>

<p>和传统的三层架构一样，一个典型的GIS系统也是由三部分组成：客户端，服务器，存储。在实际的场景中，可能又会引入缓存服务器，负载均衡服务器等。</p>

<p><img src="/images/2014/04/gis-stack-resized.png" alt="image" /></p>

<ol>
<li><a href="http://openlayers.org/">OpenLayers</a> / Leaflet</li>
<li><a href="http://mapnik.org/">Mapnik</a> / Mapnik::OGCServer</li>
<li><a href="http://www.postgresql.org/">Postgres</a> + <a href="http://postgis.net/">PostGIS</a> / OSM Data / Shapefiles</li>
</ol>


<p><a href="http://openlayers.org/">OpenLayers</a>是一个前端的JavaScript库，几乎可以算是前端的必选了，它提供众多的特性：与任意的后端地图服务集成（Google Maps，Bing Maps，OSM等等），对向量层的支持使得其非常方便的展示用户自定义的元素（多边形，点，InfoWindow等）。OpenLayers的API也非常清晰易用：</p>

<p>```js
$(function() {</p>

<pre><code>var map = new OpenLayers.Map('map', {});

var layer = new OpenLayers.Layer.WMS('Tile Cache', 
    'tilecache?', {
        layers: 'basic',
        format: 'image/png'
    });

map.addLayer(layer);
</code></pre>

<p>});
```</p>

<ol>
<li>创建Map对象</li>
<li>创建Layer对象</li>
<li>将Layer添加到Map上</li>
</ol>


<p>即可完成基本的设置，并将地图展现在页面上。</p>

<p><a href="http://www.openstreetmap.org/">OSM</a>是Open Street Map的缩写，它本身是一个开源项目，全世界各地的贡献者可以很方便的编辑地图信息，并与其他人分享，整个运作方式非常像Wikipedia，任何人都可以对地图进行编辑。基于这个原因，OSM数据文件是基于XML的。</p>

<p>有很多组织都将OSM的数据下载下来，搭建自己的地图服务器，然后向外部提供<a href="http://en.wikipedia.org/wiki/Web_Map_Service">WMS(Web Map Service)</a>服务。</p>

<p>Mapnik是一个渲染引擎，它可以将地理数据渲染成图片。Mapnik支持来自多种数据源的数据，比如Shapefile，PostGIS中的数据等。而对于OSM数据（一种XML文件），可以使用<a href="https://github.com/openstreetmap/osm2pgsql">osm2postgis</a>工具将其导入到PostGIS数据库，然后使用。</p>

<p>Mapnik本身只是一个C++编写的渲染引擎，并提供很多编程语言的bind，最常用的时python版本的bind，接口非常清晰明了。使用Mapnik可以很容易的定制对地图层次的样式，比如地图中所有土地的颜色，河流的颜色，道路的颜色，标签的字体，属性等等都可以很方便的定制。</p>

<p>实际使用Mapnik+OpenLayers搭建自己的服务器将在下一篇文章中详细描述。</p>

<h5>一些数据源</h5>

<ol>
<li><a href="http://www.naturalearthdata.com/">Natural Earth</a></li>
<li><a href="http://download.geofabrik.de/osm/">GEO Fabrik</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[utouch编辑器代码开源]]></title>
    <link href="http://abruzzi.github.com/2012/02/utouch%E7%BC%96%E8%BE%91%E5%99%A8%E4%BB%A3%E7%A0%81%E5%BC%80%E6%BA%90/"/>
    <updated>2012-02-11T00:00:00+08:00</updated>
    <id>http://abruzzi.github.com/2012/02/utouch编辑器代码开源</id>
    <content type="html"><![CDATA[<p><a href="https://code.google.com/p/utouch/" target="_blank">utouch</a>是一个基于<a href="http://wxpython.org/" target="_blank">wxpython</a>中wx.StyledEditCtrl控件的简易编辑器，而wx.StyledEditCtrl又是基于<a href="http://www.scintilla.org/" target="_blank">scintilla</a>的。utouch即使用到了python的便利性，又使用了了成熟而功能强大的<a href="http://www.scintilla.org/" target="_blank">scintilla</a>。而从扩展性上而言，python几乎原生就支持的非常好。</p>




<p><a href="http://abruzzi.github.com/images/2012/02/utouch-editor.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="utouch-editor" src="http://abruzzi.github.com/images/2012/02/utouch-editor_thumb.png" alt="utouch-editor" width="644" height="484" border="0" /></a></p>




<p><a href="https://code.google.com/p/utouch/" target="_blank">utouch</a>的前身是一个公司内部使用的IDE的原型，在开发过程中，我对其进行了抽取，将编辑器部分独立出来。这样我在整个系统中就可以独立的创建多个类型的编辑器，比如日志编辑器，编译结果编辑器等。类结构图如下：</p>




<p><a href="http://abruzzi.github.com/images/2012/02/utouch-uml.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="utouch-uml" src="http://abruzzi.github.com/images/2012/02/utouch-uml_thumb.png" alt="utouch-uml" width="350" height="484" border="0" /></a></p>




<p>TouchEditorBase提供界面的初始化，如字体的选择，大小，语法高亮，margin的定制，如何folding等等。NormalEditor提供资源的加载/保存/另存为等常规编辑器应该具备的功能集合。</p>




<p>目前的utouch的功能列表如下：
<ul>
    <li>C语法高亮</li>
    <li>书签定义/跳转</li>
    <li>自动缩进</li>
    <li>简单的snippet支持</li>
    <li>跳转到指定行</li>
    <li>常规编辑功能</li>
</ul>
其中snippet功能是对<a href="https://code.google.com/p/utouch/" target="_blank">TouchEditor</a>的一个扩展，我将在<a href="http://www.icodeit.org/utouch%E7%9A%84snippet%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/" target="_blank">下一篇文章</a>中详细讨论。</p>

]]></content>
  </entry>
  
</feed>
