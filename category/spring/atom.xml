<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | I code it]]></title>
  <link href="http://abruzzi.github.com/category/spring/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2016-09-10T14:34:18+10:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为故障和失败做设计]]></title>
    <link href="http://abruzzi.github.com/2016/05/design-for-failure/"/>
    <updated>2016-05-17T22:34:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/05/design-for-failure</id>
    <content type="html"><![CDATA[<h2>为故障和失败做设计</h2>

<p>先来看一个笑话：</p>

<blockquote><p>QA工程师走进酒吧，要了一杯啤酒，要了0杯啤酒，要了999999999杯啤酒，要了一只蜥蜴，要了-1杯啤酒，要了一个sfdeljknesv，酒保从容应对，QA工程师 很满意。接下来，一名顾客来到了同一个酒吧，问厕所在哪，酒吧顿时起了大火，然后整个建筑坍塌了。</p></blockquote>

<p>事实上，无论我们事先做多么详尽的计划，我们还是会失败。而且大多数时候，失败、故障都会从一个我们无法预期的角度发生，令人猝不及防。</p>

<p>如果没有办法避免失败（事先要考虑到这么多的异常情况不太现实，而且会投入过多的精力），那么就需要设计某种机制，使得当发生这种失败时系统可以将损失降低到最小。</p>

<p>另一方面，系统需要具备从灾难中回复的能力。如果由于某种原因，服务进程意外终止了，那么一个<code>watchdog</code>机制就会非常有用，比如supervisord就可以用来保证进程意外终止之后的自动启动。</p>

<p><code>ini
[program:jigsaw]
command=java -jar /app/jigsaw.jar
startsecs=0
stopwaitsecs=0
autostart=true
autorestart=true
stdout_logfile=/var/log/jigsaw/app.log
stderr_logfile=/var/log/jigsaw/app.err
</code></p>

<p>在现实世界中，设计一个无缺陷的系统显然是不可能的，但是通过努力，我们还是有可能设计出具有弹性，能够快速失败，从失败中恢复的系统来。</p>

<h3>错误无可避免</h3>

<h4>令人担心的错误处理</h4>

<p>我们先来看两个代码片段，两段代码都是在实现一个典型的Linux下的Socket服务器：</p>

<p>```c
int main (int argc, char *argv[]) {
  int serversock;
  struct sockaddr_in server;</p>

<p>  serversock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)
  setup_sockaddr(&amp;server);
  bind(serversock, (struct sockaddr *) &amp;server, sizeof(server));
  listen(serversock, MAXPENDING)
  //...
}
```</p>

<p>如果加上现实中可能出现的各种的处理，代码会变长一些：</p>

<p>```c
int main (int argc, char *argv[]) {
  int serversock;
  struct sockaddr_in server;</p>

<p>  if (argc != 2) {</p>

<pre><code>fprintf(stderr, "USAGE: server &lt;port&gt;\n");
exit(-1);
</code></pre>

<p>  }</p>

<p>  if ((serversock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt; 0) {</p>

<pre><code>fprintf(stderr, "Failed to create socket\n");
exit(-1);
</code></pre>

<p>  }</p>

<p>  setup_sockaddr(&amp;server);
  if (bind(serversock, (struct sockaddr *) &amp;server,</p>

<pre><code>                           sizeof(server)) &lt; 0) {
fprintf(stderr, "Failed to bind the server socket\n");
exit(-1);
</code></pre>

<p>  }</p>

<p>  if (listen(serversock, MAXPENDING) &lt; 0) {</p>

<pre><code>fprintf(stderr, "Failed to listen on server socket\n");
exit(-1);
</code></pre>

<p>  }</p>

<p>  //...
}
```</p>

<p>早在上学的时候，我在编写程序时就非常害怕处理错误情况。一方面加入错误处理会导致代码变长、变难看，另一方面是担心有遗漏掉的点，更多的则是对复杂多变的现实环境中不确定性的担忧。</p>

<p>每当写这样的代码时，我都会陷入深深的焦虑：如果真的出错了怎么办？事实上我也经常会遇到错误，比如命令行参数没有写对，绑定一个
已经被占用的端口，磁盘空间不足等等。工作之后，这些烦人的问题其实也并不经常出现。偶尔出现时我们也有很好的日志来帮助定位，最后问题总会解决，不过那种对不确定性的担心仍然深藏心底。</p>

<h4>UDP协议</h4>

<p>早在大学网络课上，我就已经对不靠谱的<code>UDP</code>协议非常不满了：作为一个网络协议，竟然不能保证数据可靠的传送到网络的另一端，如果数据没有丢失，也无法保证次序。这种有点不负责任的协议我从来不用，甚至在做练习时都会将其自动过滤，不管那种编程语言，我都会优先考虑<code>TCP</code>。</p>

<p>不过在学习网络视频传输的时候，我发现很多时候人们都会采用<code>UDP</code>。另外很多场景下，比如最早的<code>QQ</code>也都使用了<code>UDP</code>来作为内网穿透等设计者可能都没有考虑到的功能。</p>

<p>事实上，这种看似不靠谱的协议在很多IM软件中都在采用（混合模式），比如Skype：</p>

<p><code>sh
lsof -i -n | grep -i skype | awk '{print $1, $8, $9}'    
Skype TCP 192.168.0.101:52093-&gt;91.190.219.39:12350
Skype UDP 127.0.0.1:50511
Skype TCP 192.168.0.101:53090-&gt;40.113.87.220:https
Skype UDP *:*
Skype TCP 192.168.0.101:52240-&gt;64.4.61.220:https
Skype TCP 192.168.0.101:14214
Skype UDP *:63639
Skype UDP 192.168.0.101:14214
Skype TCP 192.168.0.101:52544-&gt;168.63.205.106:https
Skype TCP 192.168.0.101:52094-&gt;157.55.56.145:40032
Skype TCP 192.168.0.101:52938-&gt;40.113.87.220:https
Skype TCP 192.168.0.101:53091-&gt;40.113.87.220:https
Skype TCP 192.168.0.101:53092-&gt;40.113.87.220:https
</code></p>

<p>这种简单，不保证可靠性的协议有强大的适应性，在大部分网络环境都是适用的。在工程中，人们会将它和TCP混合适用，在诸如视频，语音的传输中，小规模的丢包，失序都是可以接受的，毕竟还有人类大脑这样的高级处理器负责纠正那些网络错误。</p>

<h3>处理失败的模式</h3>

<h4>超时机制</h4>

<p>对于网络上的第三方依赖，你无法预料它的响应延迟是什么样子的，它可能每秒钟可以处理10000次请求而游刃有余，也可能在处理100个并发时就会无限期阻塞，你需要为这种情况有所准备。</p>

<p><code>nginx</code>通常被用作一个网关，它总是处于请求的最前端，因此其中有很多关于超时的设置：</p>

<p>```
location /api {
  proxy_pass http://api.backend;
  proxy_connect_timeout 500s;
  proxy_read_timeout 500s;
  proxy_send_timeout 500s;</p>

<p>  proxy_set_header        X-Real-IP $remote_addr;
  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header        Host $http_host;
 }
```</p>

<p>比如上面<code>/api</code>这个虚拟host中就有连接超时，读超时，后端写超时等设置。在实际环境中，<code>Fail Fast</code>是对无法预料错误的<strong>最好</strong>处理方法。缓慢的处理会阻塞其他请求，并很快堆积，然后耗尽系统资源。</p>

<p>系统超时配置只是一部分，在你自己的代码中也应该为所有网络依赖加上合适的超时机制：</p>

<p>```java
public Observable<Staff> fetchUserByName(String name) {</p>

<pre><code>String url = JIGSAW_ENDPOINT + name;

Client client = ClientBuilder.newClient(new ClientConfig());
client.property(ClientProperties.CONNECT_TIMEOUT, 10);
client.property(ClientProperties.READ_TIMEOUT,    10);

Invocation.Builder request = client.target(url).request(MediaType.APPLICATION_JSON);

Observable&lt;Staff&gt; staff;

try {
    staff = Observable.just(request.get(Staff.class));
} catch (Exception ex) {
    staff = Observable.just(null);
}

return staff;
</code></pre>

<p>}
```</p>

<h4>回退机制</h4>

<p>如果应用程序无法获得正常的响应，那么提供优雅的回退机制在大多数情况下是必须的，而且这样做通常也不会很复杂。以Netflix的<code>Hystrix</code>库为例，如果一个异步命令失败（比如网络异常，超时等），它提供<code>Fallback</code>机制来返回客户端一个默认实现（或者一份本地缓存中的数据）。</p>

<p>```java
@HystrixCommand(fallbackMethod = "getDefaultStaffInfo")
public Staff getStaffInfo(String loginName) {</p>

<pre><code>//fetch from remote server
</code></pre>

<p>}</p>

<p>public Staff getDefaultStaffInfo(String loginName) {</p>

<pre><code>return new Staff();
</code></pre>

<p>}
```</p>

<h4>熔断器</h4>

<p><img src="/images/2016/05/circuit_breaker.jpg" alt="Circuit Breaker" /></p>

<p>熔断器模式指当应用在依赖方响应过慢或者出现很多超时时，调用方主动熔断，这样可以防止对依赖方造成更严重的伤害。过一段时间之后，调用方会以较慢的速度开始重试，如果依赖方已经恢复，则逐步加大负载，直到恢复正常调用。如果依赖方还是没有就绪，那就延长等待时间，然后重试。这种模式使得系统在某种程度上显现出动态性和智能。</p>

<p>Netflix的Hystrix库已经提供了这种能力，事实上，如果你使用Spring Cloud Netfilx，这个功能是内置在系统中的，你只需要一些注解就可以让系统具备这样的能力：</p>

<p>```java
@SpringBootApplication
@EnableCircuitBreaker
public class Application {</p>

<pre><code>public static void main(String[] args) {
    SpringApplication.run(Application.class, args);
}
</code></pre>

<p>}
```</p>

<p>如果5秒内连续失败了20次，Hystrix会进入<code>熔断</code>模式，后续的请求不会再发送。过一段时间之后，Hystrix又会逐步尝试恢复负载。</p>

<h3>后记</h3>

<p>扩展阅读：</p>

<ul>
<li><a href="https://book.douban.com/subject/26304417/">《发布！软件的设计与部署》</a></li>
<li><a href="https://book.douban.com/subject/24838618/">《反脆弱》</a></li>
</ul>


<p>技术文章：</p>

<ul>
<li><a href="http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html">Spring Cloud &amp; Docker</a></li>
<li><a href="http://ryanjbaxter.com/2015/10/12/building-cloud-native-apps-with-spring-part-5/">Build Cloud Native Apps</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[保护你的API（下）]]></title>
    <link href="http://abruzzi.github.com/2016/05/about-session-and-security-api-2/"/>
    <updated>2016-05-12T22:50:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/05/about-session-and-security-api-2</id>
    <content type="html"><![CDATA[<h2>前后端分离之后</h2>

<p>前后端分离之后，在部署上通过一个反向代理就可以实现动静态分离，跨域问题的解决等。但是一旦引入鉴权，则又会产生新的问题。通常来说，鉴权是对于后台API/API背后的资源的保护，即<strong>未经授权的用户不能访问受保护资源</strong>。</p>

<p>要实现这个功能有很多种方式，在应用程序之外设置完善的安全拦截器是最常见的方式。不过有点不够优雅的是，一些不太纯粹的、非功能性的代码和业务代码混在同一个代码库中。</p>

<p>另一方面，各个业务系统都可能需要某种机制的鉴权，所以很多企业都会搭建SSO机制，即<a href="https://en.wikipedia.org/wiki/Single_sign-on">Single Sign-On</a>。这样可以避免人们在多个系统创建不同账号，设置不同密码，不同的超时时间等等。如果SSO系统已经先于系统存在了很久，那么新开发的系统完全不需要自己再配置一套用户管理机制了（一般SSO只会完成<strong>鉴权</strong>中<strong>鉴别</strong>的部分，<strong>授权</strong>还是需要各个业务系统自行处理）。</p>

<p>本文中，我们使用基础设施（反向代理）的一些配置，来完成<strong>保护未授权资源</strong>的目的。在这个例子中，我们假设系统由这样几个服务器组成：</p>

<h3>系统组成</h3>

<p>这个实例中，我们的系统分为三部分</p>

<ol>
<li><code>kanban.com:8000</code>（业务系统前端）</li>
<li><code>api.kanban.com:9000</code>（业务系统后端API）</li>
<li><code>sso.kanban.com:8100</code> （单点登录系统，登陆界面）</li>
</ol>


<p>前端包含了HTML/JS/CSS等资源，是一个纯静态资源，所以本地磁盘即可。后端API则是一组需要被保护的API（比如查询工资详情，查询工作经历等）。最后，单点登录系统是一个简单的表单，用户填入用户名和密码后，如果登录成功，单点登录会将用户重定向到登录前的位置。</p>

<p>我们举一个具体场景的例子：</p>

<ol>
<li>未登录用户访问<code>http://kanba.com:8000/index.html</code></li>
<li>系统会重定向用户到<code>http://sso.kanban.com:8100/sso?return=http://kanba.com:8000/index.html</code></li>
<li>用户看到登录页面，输入用户名、密码登录</li>
<li>用户被重定向回<code>http://kanba.com:8000/index.html</code></li>
<li>此外，<code>index.htm</code>l页面上的<code>app.js</code>对<code>api.kanban.com:9000</code>的访问也得到了授权</li>
</ol>


<h4>环境设置</h4>

<p>简单起见，可以通过修改/etc/hosts文件来设置服务器环境：</p>

<p><code>
127.0.0.1 sso.kanban.com
127.0.0.1 api.kanban.com
127.0.0.1 kanban.com
</code></p>

<h3>nginx及auth_request</h3>

<p>反向代理nginx有一个auth_request的模块。在一个虚拟host中，每个请求会先发往一个内部<code>location</code>，这个内部的<code>location</code>可以指向一个可以做鉴权的Endpoint。如果这个请求得到的结果是200，那么nginx会返回用户本来请求的内容，如果返回401，则将用户重定向到一个预定义的地址：</p>

<p>```
server {</p>

<pre><code>listen 8000;
server_name kanban.com;

root /usr/local/var/www/kanban/;

error_page 401 = @error401;

location @error401 {
    return 302 http://sso.kanban.com:8100/sso?return=$scheme://$http_host$request_uri;
}

auth_request /api/auth;

location = /api/auth {
    internal;

    proxy_pass http://api.kanban.com:9000;

    proxy_pass_request_body     off;

    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    if ($http_cookie ~* "w3=(\w+)") {
        set $token "$1";
    }

    proxy_set_header X-KANBAN-TOKEN $token;
}
</code></pre>

<p>}
```</p>

<p>比如上面这个例子中，<code>auth_request</code>的URL为<code>/api/auth</code>，它是一个内部的location，外部无法访问。在这个<code>locaiton</code>中，请求会被转发到<code>http://api.kanban.com:9000</code>，根据nginx的正则语法，请求将会被转发到<code>http://api.kanban.com:9000/api/auth</code>（我们随后可以看到这个Endpoint的定义）。</p>

<p>我们设置了请求的原始头信息，并禁用了request_body，如果cookie中包含了<code>w3=(\w+)</code>字样，则将这个w3的值抽取出来，并赋值给一个<code>X-KANBAN-TOKEN</code>的HTTP头。</p>

<h4>权限Endpoint</h4>

<p>对应的<code>/api/auth</code>的定义如下：</p>

<p>```java
@RestController
@RequestMapping("/auth")
public class AuthController {</p>

<pre><code>@RequestMapping
public ResponseEntity&lt;String&gt; simpleAuth(@RequestHeader(value="X-KANBAN-TOKEN", defaultValue = "") String token) {
    if(StringUtils.isEmpty(token)) {
        return new ResponseEntity&lt;&gt;("Unauthorized", HttpStatus.UNAUTHORIZED);
    } else {
        return new ResponseEntity&lt;&gt;("Authorized", HttpStatus.OK);
    }
}
</code></pre>

<p>}
```</p>

<p>如果HTTP头上有<code>X-KANBAN-TOKEN</code>且值不为空，则返回200，否则返回401。</p>

<p>当这个请求得到401之后，用户被重定向到<code>http://sso.kanban.com:8100/sso</code></p>

<p>```
error_page 401 = @error401;</p>

<p>location @error401 {</p>

<pre><code>return 302 http://sso.kanban.com:8100/sso?return=$scheme://$http_host$request_uri;
</code></pre>

<p>}
```</p>

<h3>SSO组件（简化版）</h3>

<p>这里用<code>sinatra</code>定义了一个简单的SSO服务器（去除了实际的校验部分）</p>

<p>```ruby
require 'sinatra'
require 'uri'</p>

<p>set :return_url, ''
set :bind, '0.0.0.0'</p>

<p>get '/sso' do</p>

<pre><code>settings.return_url = params[:return]
send_file 'public/index.html'
</code></pre>

<p>end</p>

<p>post '/login' do</p>

<pre><code>credential = params[:credential]
# check credential against database
uri = URI.parse(settings.return_url)
response.set_cookie("w3", {
    :domain =&gt; ".#{uri.host}",
    :expires =&gt; Time.now + 2400,
    :value =&gt; "#{credential['name']}",
    :path =&gt; '/'
})
redirect settings.return_url, 302
</code></pre>

<p>end
```</p>

<p><code>/sso</code>对应的Login Form是：</p>

<p>```html
<form action="/login" method="post"></p>

<pre><code>&lt;input type="text" name="credential[name]" /&gt;
&lt;input type="password" name="credential[password]" /&gt;
&lt;input type="submit"&gt;
</code></pre>

<p></form>
```</p>

<p>当用户提交表单之后，我们只是简单的设置了<code>cookie</code>，并重定向用户到跳转前的URL。</p>

<h3>前端页面</h3>

<p>这个应用的前端应用非常简单，我们只需要将这些静态文件放到<code>/usr/local/var/www/kanban</code>目录下：</p>

<p>```
$ tree /usr/local/var/www/kanban</p>

<p>├── index.html
└── scripts</p>

<pre><code>├── app.js
└── jquery.min.js
</code></pre>

<p>```</p>

<p>其中<code>index.html</code>中引用的<code>app.js</code>会请求一个受保护的资源：</p>

<p>```js
$(function() {</p>

<pre><code>$.get('/api/protected/1').done(function(message) {
    $('#message').text(message.content);
});
</code></pre>

<p>});
```</p>

<p>从下图中的网络请求可以看到重定向的流程：</p>

<p><img src="/images/2016/05/redirection-resized.png" alt="redirection" /></p>

<h3>总结</h3>

<p>本文我们通过配置反向代理，将多个Endpoint组织起来。这个过程可以在应用程序中通过代码实现，也可以在基础设施中通过配置实现，通常来讲，如果可以通过配置来实现的，就尽量将其与负责业务逻辑的代码隔离出来。这样可以保证各个组件的独立性，也可以使得优化和定位问题更加容易。</p>

<p>完整的代码可以在这里下载：</p>

<ul>
<li><a href="https://github.com/abruzzi/fake-sso">Fake SSO</a></li>
<li><a href="https://github.com/abruzzi/spring-security-demo">Spring Security Demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[保护你的API（上）]]></title>
    <link href="http://abruzzi.github.com/2016/05/about-session-and-security-api-1/"/>
    <updated>2016-05-10T19:12:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/05/about-session-and-security-api-1</id>
    <content type="html"><![CDATA[<h2>保护你的API</h2>

<p>在大部分时候，我们讨论API的设计时，会从功能的角度出发定义出完善的，易用的API。而很多时候，非功能需求如安全需求则会在很晚才加入考虑。而往往这部分会涉及很多额外的工作量，比如与外部的SSO集成，Token机制等等。</p>

<p>这篇文章会以一个简单的例子，从应用程序和部署架构上分别讨论几种常见的模型。这篇文章是这个系列的第一篇，会讨论两个简单的主题：</p>

<ul>
<li>基于Session的用户认证</li>
<li>基于Token的RESTful API（使用Spring Security）</li>
</ul>


<h3>使用Session</h3>

<p>由于HTTP协议本身是无状态的，服务器需要某种机制来区分每个请求。比如在返回给客户的响应中加入一些ID，客户端再次请求时带上这个ID，这样服务器就可以区分出来每个请求，并完成事务性的操作（完成订单的创建，更新，商品派送等等）。</p>

<p>在多数Web容器中，这种机制通过Session来实现。Web容器会为每个首次请求创建一个Session，并将Session的ID以浏览器Cookie的方式返回给客户端。客户端（常常是浏览器）在后续的请求中带上这个Session的ID来表明自己的身份。这种机制同样被用在了鉴权方面，用户登录系统之后，系统分配一个Session ID给他。</p>

<p>除非Session过期，或者用户从客户端的Cookie中主动删了Session ID，否则在服务器端来看，用户的信息会和这个Session绑定起来。后台系统也可以随时知道请求某个资源的真实用户是谁，并以此来判断该用户时候真的有权限这么做。</p>

<p>```java
HttpSession session = request.getSession();
String user = (String)session.getAttribute("user");</p>

<p>if(user != null) {</p>

<pre><code>//
</code></pre>

<p>}
```</p>

<h4>Session的问题</h4>

<p>这种做法在小规模应用中工作良好，随着用户的增多，企业往往需要部署多台服务器形成集群来对外提供服务。在集群模式下，当某个节点挂掉之后，由于Session默认是保存在部署Web容器中的，用户会被误判为未登录，后续的请求会被重定向到登陆页面，影响用户体验。</p>

<p>这种将应用程序状态内置的方法已经完全无法满足应用的扩展，因此在工程实践中，我们会采用将Session外置的方式来解决这个问题。即集群中的所有节点都将Session保存在一个公用的键值数据库中：</p>

<p><code>java
@Configuration
@EnableRedisHttpSession
public class HttpSessionConfig {
}
</code></p>

<p>上面这个例子是在Spring Boot中使用Redis来外置Session。Spring会拦截所有对HTTPSession对象的操作，后续的对Session的操作，Spring都会自动转换为与后台的Redis服务器的交互，从而避免节点挂掉之后Session丢失的问题。</p>

<p><code>java
spring.redis.host=192.168.99.100
spring.redis.password=
spring.redis.port=6379
</code></p>

<p>如果你跟我一样懒的话，直接启动一个redis的docker container就可以：</p>

<p><code>sh
$ docker run --name redis-server -d redis
</code></p>

<p>这样，多个应用共享这一个实例，任何一个节点的终止、异常都不会产生Session的问题。</p>

<h3>基于Token的安全机制</h3>

<p>上面说到的场景中，使用Session需要额外部署一个组件（或者引入更加复杂的Session同步机制），这会带来另外的问题，比如如何保证这个节点的高可用，除了Production环境之外，Staging和QA环境也需要这个组件的配置、测试和维护。</p>

<p>很多项目现在会采用另外一种更加简单的方式：基于Token的安全机制。即不使用Session，用户在登陆之后，会获得一个Token，这个Token会以HTTP Header的方式发送给客户，同样，客户再后续的资源请求中也需要带着这个Token。通常这个Token还会有过期时间的限制（比如只能使用1周，一周之后需要重新获取）。</p>

<p>基于Token的机制更加简单，和RESTful风格的API一起使用更加自然，相较于传统的Web应用，RESTful的消费者可能是人，也可能是Mobile App，也可能是系统中另外的Service。也就是说，并不是所有的消费者都可以处理一个登陆表单！</p>

<h4>Restful API</h4>

<p>我们通过一个实例来看使用Spring Security保护受限制访问资源的场景。</p>

<p>对于Controller：</p>

<p>```java
@RestController
@RequestMapping("/protected")
public class ProtectedResourceController {</p>

<pre><code>@RequestMapping("/{id}")
public Message getOne(@PathVariable("id") String id) {
    return new Message("Protected resource "+id);
}
</code></pre>

<p>}
```</p>

<p>我们需要所有请求上都带有一个<code>X-Auth-Token</code>的Header，简单起见，如果这个Header有值，我们就认为这个请求已经被授权了。我们在Spring Security中定义这样的一个配置：</p>

<p>```java
@Override
protected void configure(HttpSecurity http) throws Exception {</p>

<pre><code>http.
        csrf().disable().
        sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).
        and().
        authorizeRequests().
        anyRequest().
        authenticated().
        and().
        exceptionHandling().
        authenticationEntryPoint(new RestAuthenticationEntryPoint());
</code></pre>

<p>}
```</p>

<p>我们使用<code>SessionCreationPolicy.STATELESS</code>无状态的Session机制（即Spring不使用HTTPSession），对于所有的请求都做权限校验，这样Spring Security的拦截器会判断所有请求的Header上有没有"X-Auth-Token"。对于异常情况（即当Spring Security发现没有），Spring会启用一个认证入口：<code>new RestAuthenticationEntryPoint</code>。在我们这个场景下，这个入口只是简单的返回一个401即可：</p>

<p>```java
@Component
public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {</p>

<pre><code>@Override
public void commence(HttpServletRequest request, HttpServletResponse response,
                     AuthenticationException authException ) throws IOException {
    response.sendError( HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized" );
}
</code></pre>

<p>}
```</p>

<p>这时候，如果我们请求这个受限制的资源：</p>

<p><code>sh
$ curl http://api.kanban.com:9000/api/protected/1 -s | jq .
{
  "timestamp": 1462621552738,
  "status": 401,
  "error": "Unauthorized",
  "message": "Unauthorized",
  "path": "/api/protected/1"
}
</code></p>

<h4>过滤器（Filter）及预认证（PreAuthentication）</h4>

<p>为了让Spring Security可以处理用户登录的case，我们需要提供一个<code>Filter</code>。当然，Spring Security提供了丰富的<code>Filter</code>机制，我们这里使用一个预认证的<code>Filter</code>（即假设用户已经在别的外部系统如SSO中登录了）:</p>

<p>```java
public class KanBanPreAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter {</p>

<pre><code>public static final String SSO_TOKEN = "X-Auth-Token";
public static final String SSO_CREDENTIALS = "N/A";

public KanBanPreAuthenticationFilter(AuthenticationManager authenticationManager) {
    setAuthenticationManager(authenticationManager);
}

@Override
protected Object getPreAuthenticatedPrincipal(HttpServletRequest request) {
    return request.getHeader(SSO_TOKEN);
}

@Override
protected Object getPreAuthenticatedCredentials(HttpServletRequest request) {
    return SSO_CREDENTIALS;
}
</code></pre>

<p>}
```</p>

<p>过滤器在获得Header中的Token后，Spring Security会尝试去认证用户：</p>

<p>```java
@Override
protected void configure(AuthenticationManagerBuilder builder) throws Exception {</p>

<pre><code>builder.authenticationProvider(preAuthenticationProvider());
</code></pre>

<p>}</p>

<p>private AuthenticationProvider preAuthenticationProvider() {</p>

<pre><code>PreAuthenticatedAuthenticationProvider provider = new PreAuthenticatedAuthenticationProvider();
provider.setPreAuthenticatedUserDetailsService(new KanBanAuthenticationUserDetailsService());

return provider;
</code></pre>

<p>}
```</p>

<p>这里的<code>KanBanAuthenticationUserDetailsService</code>是一个实现了Spring Security的UserDetailsService的类：</p>

<p>```java
public class KanBanAuthenticationUserDetailsService</p>

<pre><code>    implements AuthenticationUserDetailsService&lt;PreAuthenticatedAuthenticationToken&gt; {

@Override
public UserDetails loadUserDetails(PreAuthenticatedAuthenticationToken token) throws UsernameNotFoundException {
    String principal = (String) token.getPrincipal();

    if(!StringUtils.isEmpty(principal)) {
        return new KanBanUserDetails(new KanBanUser(principal));
    }

    return null;
}
</code></pre>

<p>}
```</p>

<p>这个类的职责是，查看从<code>KanBanPreAuthenticationFilter</code>返回的<code>PreAuthenticatedAuthenticationToken</code>，如果不为空，则表示该用户在系统中存在，并正常加载用户。如果返回null，则表示该认证失败，这时根据配置，Spring Security会重定向到认证入口<code>RestAuthenticationEntryPoint</code>。</p>

<p>加上这个过滤器的配置之后：</p>

<p>```java
@Override
protected void configure(HttpSecurity http) throws Exception {</p>

<pre><code>//...
http.addFilter(headerAuthenticationFilter());
</code></pre>

<p>}</p>

<p>@Bean
public KanBanPreAuthenticationFilter headerAuthenticationFilter() throws Exception {</p>

<pre><code>return new KanBanPreAuthenticationFilter(authenticationManager());
</code></pre>

<p>}
```</p>

<p>这样，当我们在Header上加上<code>X-Auth-Token</code>之后，就会访问到受限的资源了：</p>

<p><code>sh
$ curl -H "X-Auth-Token: juntao" http://api.kanban.com:9000/api/protected/1 -s | jq .
{
  "content": "Protected resource for 1"
}
</code></p>

<h3>总结</h3>

<p>下一篇文章会以另外一个方式来完成鉴权机制和系统的集成问题。我们会在反向代理中做一些配置，将多个Endpoint组织起来。要完成这样的功能，使用Spring Security也可以做到，不过可能会为应用程序本身引入额外的复杂性。</p>
]]></content>
  </entry>
  
</feed>
