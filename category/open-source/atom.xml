<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open source | I code it]]></title>
  <link href="http://abruzzi.github.com/category/open-source/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2013-05-15T13:25:13+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get started with jQuery Mobile]]></title>
    <link href="http://abruzzi.github.com/2013/02/get-started-with-jquery-mobile/"/>
    <updated>2013-02-14T13:50:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/02/get-started-with-jquery-mobile</id>
    <content type="html"><![CDATA[<h3>jQuery mobile</h3>

<p><a href="http://jquerymobile.com/">jQuery Mobile</a>是一个基于jQuery/jQuery-ui的UI库，用于构建基于HTML5的应用程序，当然它主要针对移动设备平台，开发者使用它可以很容易的开发出运行在ios/android/windows phone上的应用，这些应用（尽管运行在不同的硬件/软件系统上）在界面上看起来几乎一致。</p>

<h3>基本元素</h3>

<h4>页面布局</h4>

<p>在移动设备上，一个页面一般由三部分组成（header区域，content区域，footer区域），当然，有的页面可能会缺失一部分（最常见的如：没有footer的长列表），jQuery Mobile通过在DOM元素上定义data-role来指定元素的归属：</p>

<ul>
<li>page 整个页面</li>
<li>header header区域</li>
<li>content content区域</li>
<li>footer footer区域</li>
</ul>


<p>```</p>

<div data-role='page'>
    <div data-role='header'>
        <h1>This is header</h1>
    </div>
    <div data-role='content'>
        <p>This is content</p>
    </div>
    <div data-role='footer'>
        <h1>This is footer</h1>
    </div>
</div>


<p>```</p>

<p><img src="http://abruzzi.github.com/images/2013/02/jquery-mobile-page.png" alt="image" /></p>

<h4>多个页面</h4>

<p>通常一个应用程序会有多个“页面”，在jQuery Mobile中，所有的“页面”都放在同一个html文件中，通过data-role为page的元素的id来指定一个页面：</p>

<p>```</p>

<div data-role='page' id='edit-page'>
    <div data-role='header'>
        <h1>Edit page</h1>
    </div>
    <div data-role='content'>
        <form>
            <label for='desc'>Description: </label>
            <input type='text' value='' />
        </form>
    </div>
</div>


<p>```</p>

<p>在另一个页面中，可以通过link的href来引用这个id：</p>

<p><code>
&lt;a href="#edit-page"&gt;Go to edit page&lt;/a&gt;
</code></p>

<p><img src="http://abruzzi.github.com/images/2013/02/jquery-mobile-multi-page.png" alt="image" /></p>

<h4>列表元素</h4>

<p>列表可能是最常见的一种jQuery Mobile元素了，列表由HTML的ul-li组成：</p>

<p>```</p>

<ul data-role='listview' data-inset='true'>
    <li> <a href="#">Tomorrow is another day</a> </li>
    <li> <a href="#">Michael is leaving</a> </li>
    <li> <a href="#">Tutorial of jQuery mobile</a> </li>
    <li> <a href="#">So, if you want something,...</a> </li>
</ul>


<p>```</p>

<p><img src="http://abruzzi.github.com/images/2013/02/jquery-mobile-list.png" alt="image" /></p>

<h3>一个小例子</h3>

<p>我在最近的一个开源项目<a href="https://github.com/abruzzi/feather">feather</a>中使用了jQuery Mobile来完成ios上的展现。</p>

<p><img src="http://abruzzi.github.com/images/2013/02/feather-mobile.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将应用程序部署到heroku]]></title>
    <link href="http://abruzzi.github.com/2013/01/developing-with-heroku/"/>
    <updated>2013-01-26T19:02:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/01/developing-with-heroku</id>
    <content type="html"><![CDATA[<h3>heroku</h3>

<p>使用heroku，开发人员可以很容易的将自己的应用程序公开给世界上的其他用户使用，heroku会为你提供一个url，一些预设的空间如数据库（postgresql）等。这对于需要频繁远程showcase的场景提供了非常好的方式，当然对于开发人员向其他的开发人员或者最终用户展现自己的框架的外观/行为等场景也会非常有用。</p>

<h3>在heroku上注册用户</h3>

<p>首先，当然是在heroku上<a href="https://api.heroku.com/signup/devcenter">注册一个开发账户</a>，如果你已经注册过，就请接着第二步</p>

<h3>下载heroku的本地Toolbox</h3>

<p>heroku提供了一个很好用的<a href="https://toolbelt.heroku.com/">工具包</a>，通过这个工具包，开发人员可以很容易的对部署在heroku上的应用程序做操作。</p>

<h3>在本地登陆heroku</h3>

<p>如果没有上传过key的话，heroku会提醒你创建一个新的ssh公钥，然后上传到heroku（这个过程与使用github非常类似）</p>

<p><code>
$ heroku login
Enter your Heroku credentials.
Email: adam@example.com
Password:
Could not find an existing public key.
Would you like to generate one? [Yn]
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
</code></p>

<p>如果已经上传过key，则可以直接登陆</p>

<h3>准备工作</h3>

<p>在本地生成一个应用程序的基本结构，如：<code>Gemfile</code>，目录结构等。然后在本地配置好git环境，比如：</p>

<p><code>
$ git init
$ git add .
$ git commit -m "init"
</code>
准备Procfile：</p>

<p><code>
web: bundle exec ruby app.rb -p $PORT -E production
</code>
<code>app.rb</code>相当于你的应用程序的主入口(main)，<code>-E</code>指定运行环境（此处指定为production），你的应用程序可能会根据次设置来进行一些资源的选择（数据库指向，资源文件位置等）</p>

<p>在上传之前，需要确保自己的应用程序可以在本地正常运行：</p>

<p><code>
foreman start
</code>
应用程序将在本地的5000端口上运行，此时可以做一些简单的验证，保证应用程序运行正常。</p>

<p><code>
$ git add .
$ git commit -m "ready for deploy app to heroku"
</code></p>

<h3>上传你的App</h3>

<p>这时，可以很轻易的将App上传到heroku了：</p>

<p><code>
$ heroku create
$ git push heroku master
</code>
当然，第一次上传可能会比较慢（取决于你应用程序的大小），如果一切正常，heroku将会尝试根据你的Gemfile来安装依赖，安装完成之后，会尝试根据Procfile中的配置启动你的应用程序。</p>

<p>如果你的应用程序会访问数据库（非postgresql的数据库），那么建议在Gemfile中指定当测试时使用该数据库，而在production环境中使用postgresql，因为heroku使用的正是postgresql：</p>

<p>```
configure :test do</p>

<pre><code>DataMapper.setup(:default, ENV['DATABASE_URL'] || "local-db-url")
DataMapper.finalize.auto_upgrade!
</code></pre>

<p>end
```</p>

<p>我的应用在本地使用sqlite，而在heroku中使用其提供的postgresql。</p>
]]></content>
  </entry>
  
</feed>
