<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | I code it]]></title>
  <link href="http://abruzzi.github.com/category/tdd/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2018-01-13T16:15:54+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[反馈拯救世界]]></title>
    <link href="http://abruzzi.github.com/2018/01/feedback-saves-the-world/"/>
    <updated>2018-01-13T12:07:00+08:00</updated>
    <id>http://abruzzi.github.com/2018/01/feedback-saves-the-world</id>
    <content type="html"><![CDATA[<h3>心流</h3>

<p>你可能有过这样的体验：在玩一个很有趣的游戏时，时间会飞快的流逝，等你终于通关之后才发现已经是凌晨，而你的午饭和晚饭还都没吃。虽然可能饿着肚子，但是你内心却有一种很兴奋，很神清气爽的感觉。而当你在做一些不得不完成的工作/作业时（比如写年终总结报告），时间又会过得很慢，你的心情也常常变得焦虑或者暴躁。</p>

<p>通常来说，人的心情总是会在各种情绪中起伏不定，不过毋庸置疑，我们都希望永远或者至少是尽可能多的保持第一个场景中的状态。</p>

<p><img src="/images/2018/01/playing-game-resized.png" alt="" /></p>

<p>这种精神高度集中，通过自己的努力不断完成挑战，并常常会有忘记时间流逝，甚至忘记自身存在，只剩下“做事情”本身的状态，在心理学上被称之为<a href="https://en.wikipedia.org/wiki/Flow_(psychology">心流（Flow）</a>)。人们虽然很早就发现了这种现象，但是直到1975年，心理学家米哈里·齐克森米哈里（<a href="https://en.wikipedia.org/wiki/Mih%C3%A1ly_Cs%C3%ADkszentmih%C3%A1lyi">Mihaly Csikszentmihalyi</a>）才将其概念化并通过科学的方式来研究。</p>

<blockquote><p>心流（英语：Flow），也有别名以化境(Zone)表示，亦有人翻译为神驰状态，定义是一种将个人精神力完全投注在某种活动上的感觉；心流产生时同时会有高度的兴奋及充实感。</p></blockquote>

<p>进入心流之后会有很多特征：</p>

<ul>
<li>愉悦</li>
<li>全身心投入</li>
<li>忘我，与做的事情融为一体</li>
<li>主观的时间感改变</li>
</ul>


<p>心流被普遍认为是一种绝佳的精神体验。根据齐克森米哈里的理论，与心流对应的，还有一些其他的心理状态：</p>

<p><img src="/images/2018/01/300px-Challenge_vs_skill.svg.png" alt="" /></p>

<p>当自身能力很高，但是做的事情很简单的话，你做起来会比较无聊；而当能力不足，要做的事情很困难的话，你又会陷入焦虑。有意思的是，如果你技能不足，而做的事情又比较简单的话，并不会产生“心流”体验。恰恰相反，这种状态（<strong>apathy</strong>）是很消极的，做事情的过程中，你既没有运用任何技能，也并没有接受到任何的挑战。</p>

<h3>如何进入心流状态</h3>

<p>齐克森米哈里要进入心流状态，需要满足至少三点：</p>

<ul>
<li>有清晰的目标</li>
<li>有明确且事实的反馈</li>
<li>能力和挑战的平衡（都处于比较高的状态）</li>
</ul>


<p>比如，玩游戏的时候，目标是明确的，不论是简单的通过策略消灭对方，还是将三个同一颜色的宝石移动到同一行）；反馈也是实时的，同色宝石连在一起是发出的声音以及屏幕上闪过的炫目的光芒，敌人在被你手中武器杀死时的惨叫，你自己的血槽等等；最后，游戏不能过于简单，如果太简单，你很快会觉得无聊，又不能太难，这样你会觉得挑战太大。</p>

<p>不过要在工作上进入心流状态，远远比玩游戏要复杂。比如不明确的目标，冗长的反馈周期，能力与挑战的不均衡等等。</p>

<h3>基于反馈的开发</h3>

<p>2014年底，我在<code>ThoughtWorks</code>组织<a href="http://icodeit.org/3-pages-in-3-weeks/">3周3页面</a>工作坊的时候，发现了一个很有意思的现象：通常公司内部的培训/工作坊都会出现这种现象：报名的人很多，前几次课会来很多人，慢慢的人数会减少，能坚持到最后的人很少，能完成作业的就更少了。而在<a href="http://icodeit.org/3-pages-in-3-weeks/">3周3页面</a>中，参加的人数越来越多，而且作业的完成率非常高（接近100%）。</p>

<p>回想起来，我在培训的最开始就设置了一些机制，保证学员可以有一个非常容易沉浸其中的环境：</p>

<ul>
<li>通过watch、livereload等机制，保证每次修改的CSS/HTML都可以在1秒钟内在浏览器上自动刷新</li>
<li>通过对比mockup和自己实现的样式的差异，来调整自己的目标</li>
<li>将这些工具做成<a href="https://github.com/abruzzi/design-boilerplate">开箱即用</a>的，这样经验不足者不至于被技术细节阻塞</li>
<li>做完之后，学员们的作品直接发布到<a href="https://pages.github.com/">github的pages</a>上</li>
</ul>


<p><img src="/images/2018/01/3p3w-resized.png" alt="" /></p>

<p>事实上，这些实践恰好满足了上述的几个条件：</p>

<ul>
<li>目标明确</li>
<li>快速且准确的反馈</li>
<li>技能与挑战的平衡</li>
</ul>


<p>由于工作坊是在周内下班后（8点结束），我见到很多学员在课后（很晚的时候）还在写代码、调样式，完全沉浸其中，忘记时间。到最后，参加培训的学员们被要求通过设计原则自己实际一个Web Site，很多没有前段开发背景的同事也做出了非常有“设计感”的作品。</p>

<p><img src="/images/2018/01/3p3w-showcase-resized.png" alt="" /></p>

<h3>编程语言的壁垒</h3>

<p>使用<code>JavaScript</code>或者<code>Ruby</code>这种解释型语言的开发人员，在第一次接触之后就会深深的爱上它，并再也无法回到编译型语言中去了。想一想要用<code>Java</code>打印一行<code>Hello World</code>你得费多大劲？</p>

<p>解释型语言中，你很容易可以采用<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a>环境，写代码会变成一个做实验的过程：函数名写错了，参数传错了，某个函数没有定义等等错误/手误，都可以在1秒钟内得到反馈，然后你再根据反馈来修正方向。</p>

<p>举个小例子，写一个字符串处理函数：将字符串”qiu,juntao”转换成“Qiu Juntao”，你会怎么做？你大概知道有这样一些原生的API：</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">String.indexOf</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace">String.replace</a></li>
<li><a href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">大小写转换</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp">正则表达式</a>（可选）</li>
</ul>


<p>如果用JavaScript来实现的话，你可以在<code>Chrome</code>的<code>DevTools</code>中完成大部分的工作：</p>

<p><img src="/images/2018/01/chrome-dev-tools-resized.png" alt="" /></p>

<p>注意这里的每次操作的反馈（特别是出错的情况），你可以在1秒钟内就知道明确的反馈，而不是等等待漫长的编译过程。DevTools里的console提供的REPL（read-eval-print-loop）可以帮助你建立流畅的编码体验。</p>

<p>如果用<code>Java</code>来做，你需要一大堆的准备工作，抛开<code>JDK</code>的安装，<code>JAVA_HOME</code>的设置等，你还需要编译代码，需要定义一个类，然后在类中定义main方法，然后可能要查一些API来完成函数的编写。而每一个额外的步骤都会延长反馈的时间。</p>

<h3>测试驱动开发</h3>

<p>那么在编译型语言中如何获得这种体验呢？又如何缩短反馈周期呢？答案是使用<strong>测试驱动开发</strong>（Test Driven Development）！</p>

<p>通常<code>TDD</code>会包含这样几个步骤：</p>

<ol>
<li>根据用户故事做任务分解</li>
<li>根据分解后的<code>Task</code>设计测试</li>
<li>编写测试</li>
<li>编写可以通过测试的实现</li>
<li>重构</li>
</ol>


<p><img src="/images/2018/01/tasking-resized.png" alt="" /></p>

<p>步骤3-5可能会不断重复，直到所有的Task都完成，用户故事也就完成了。如果仔细分析，这些步骤也恰好符合产生心流的条件：</p>

<ul>
<li>划分任务</li>
<li>清晰每一个小任务</li>
<li>通过测试得到快速而明确的反馈</li>
</ul>


<p>虽然对上边字符串转换的例子来说，<code>TDD</code>的方式还是比较重量级，不过反馈更明确，你可以在写完一个函数之后立即得到测试成功或者失败的反馈（编译过程并没有省略，不过我们通过测试的红和绿来不断强化反馈）。</p>

<p>而且这种方法的好处在于：对于更加复杂的需求来说，它仍然适用。如果开发者的技能和需求的难度都比较高的话，这种方式很容易达到心流的状态。</p>

<h3>小结</h3>

<p>要想在工作中让自己过得更舒服一些，你需要创造条件让自己进入心流状态。在这些条件中，最重要的是要建立其一套快速反馈的机制，这个机制可以是：</p>

<ul>
<li>一个可以自动运行的测试套件</li>
<li>一个可以迭代的页面原型</li>
<li>一个watch所有HTML/SCSS的脚本+live-reload</li>
<li>一个和你一起写代码的同事（结对编程）</li>
</ul>


<p><img src="/images/2018/01/gulp-serve-resized.png" alt="" /></p>

<p>另一方面，你需要不断的学习和练习，提升自己的技能，这样在遇到新的问题时才可能比较从容应对。不要忘了，<strong>更熟练的技能</strong>本身也是进入心流的重要条件之一。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从一个小例子学习TDD]]></title>
    <link href="http://abruzzi.github.com/2014/11/tdd-step-by-step/"/>
    <updated>2014-11-09T15:07:00+08:00</updated>
    <id>http://abruzzi.github.com/2014/11/tdd-step-by-step</id>
    <content type="html"><![CDATA[<h3>示例的需求描述</h3>

<p>今天我们需要完成的需求是这样的：</p>

<p>对于一个给定的字符串，如果其中<code>元音</code>字母数目在整个字符串中的比例超过了30%，则将该<code>元音</code>字母替换成字符串<code>mommy</code>，额外的，在替换时，如果有连续的元音出现，则仅替换一次。</p>

<p>如果用<code>实例化需求</code>(<a href="http://specificationbyexample.com/">Specification by Example</a>)的方式来描述的话，需求可以转换成这样几条实例：</p>

<ol>
<li><code>hmm</code>经过处理之后，应该保持原状</li>
<li><code>she</code>经过处理之后，应该被替换为<code>shmommy</code></li>
<li><code>hear</code>经过处理之后，应该被替换为<code>hmommyr</code></li>
</ol>


<p>当然，也可以加入一些边界值的检测，比如包含数字，大小写混杂的场景来验证，不过我们暂时可以将这些场景抛开，而仅仅关注与TDD本身。</p>

<h4>为什么选择这个<code>奇怪的</code>例子</h4>

<p>我记得在学校的时候，最害怕看到的就是书上举的各种离<code>生活</code>很远的例子，比如国外的书籍经常举汽车的例子，有引擎，有面板，但是作为一个只是能看到街上跑的车的穷学生，实际无法理解其中的关联关系。</p>

<p>其实，另外一种令人不那么舒服的例子是那种纯粹为了示例而编写的例子，现实世界中可能永远都不可能见到这样的代码，比如我们今天用到的例子。</p>

<p>当然，这种纯粹的例子也有其存在的价值：在脱离开复杂的细节之后，尽量的让读者专注于某个方面，从而达到对某方面练习的目的。因为跟现实完全相关的例子往往会变得复杂，很容易让读者转而去考虑复杂性本身，而忽略了对实践/练习的思考。</p>

<h4>TDD步骤</h4>

<p>通常的描述中，<code>TDD</code>有三个步骤：</p>

<ol>
<li>先编写一个测试，由于此时没有任何实现，因此测试会失败</li>
<li>编写实现，以最快，最简单的方式，此时测试会通过</li>
<li>查看实现/测试，有没有改进的余地，如果有的话就用重构的方式来优化，并在重构之后保证测试通过</li>
</ol>


<p><img src="/images/2014/11/tdd.png" alt="tdd" /></p>

<p>它的好处显而易见：</p>

<ol>
<li>时时关注于实现功能，这样不会跑偏</li>
<li>每个功能都有测试覆盖，一旦改错，就会有测试失败</li>
<li>重构时更有信心，不用怕破坏掉已有的功能</li>
<li>测试即文档，而且是不会过期的文档，因为一旦实现变化，相关测试就会失败</li>
</ol>


<p>使用<code>TDD</code>，一个重要的实践是<code>测试先行</code>。其实在编写任何测试之前，更重要的一个步骤是<code>任务分解</code>(Tasking)。只有当任务分解到恰当的粒度，整个过程才可能变得比较顺畅。</p>

<p>回到我们的例子，我们在知道整个需求的前提下，如何进行任务分解呢？作为<code>实现优先</code>的程序员，很可能会考虑诸如空字符串，元音比例是否到达30%等功能。这当然没有孰是孰非的问题，不过当需求本身就很复杂的情况下，这种直接面向实现的方式可能会导致越走越偏，考虑的越来越复杂，而耗费了几个小时的设计之后发现没有任何的实际进度。</p>

<p>如果是采用<code>TDD</code>的方式，下面的方式是一种可能的任务分解：</p>

<ol>
<li>输入一个非元音字符，并预期返回字符本身</li>
<li>输入一个元音，并预期返回<code>mommy</code></li>
<li>输入一个元音超过30%的字符串，并预期元音被替换</li>
<li>输入一个元音超过30%，并且存在连续元音的字符串，并预期只被替换一次</li>
</ol>


<p>当然，这个任务分解可能并不是<code>最好的</code>，但是是一个比较清晰的分解。</p>

<h3>实践</h3>

<h4>第一个任务</h4>

<p>在本文中，我们将使用JavaScript来完成该功能的编写，测试框架采用了<a href="http://jasmine.github.io/2.0/introduction.html">Jasmine</a>，这里有一个<a href="https://github.com/abruzzi/tdd-boilerplate">模板项目</a>，使用它你可以快速的启动，并跟着本教程一起实践。</p>

<p>根据任务分解，我们编写的第一个测试是：</p>

<p>```js
describe("mommify", function() {</p>

<pre><code>it("should return h when given h", function() {
    var expected = "h";

    var result = mommify("h");

    expect(result).toEqual(expected);
});
</code></pre>

<p>});
```</p>

<p>这个测试中有三行代码，这也是一般测试的标准写法，简称<code>3A</code>：</p>

<ol>
<li>组织数据（Arrange）</li>
<li>执行需要被测的函数（Action）</li>
<li>验证结果（Assertion）</li>
</ol>


<p>运行这个测试，此时由于还没有实现代码，因此Jasmine会报告失败。接下来我们用最快速的方法来编写实现，就目前来看，最简单的方式就是：</p>

<p>```js
function mommify() {</p>

<pre><code>return "h";
</code></pre>

<p>}
```</p>

<p>可能有人觉得这种实现太过狡猾，但是从<code>TDD</code>的角度来说，它确实能够令测试通过。这时候，我们需要编写另外一个测试来<code>驱动</code>出正确的行为：</p>

<p>```js
it("should return m when given m", function() {</p>

<pre><code>var expected = "m";

var result = mommify("m");

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>这样，我们的实现就不能仅仅返回一个"h"了，就现在来看，最简单的方式是输入什么就返回什么：</p>

<p>```js
function mommify(word) {</p>

<pre><code>return word;
</code></pre>

<p>}
```</p>

<p>很好，这样我们的第一个<code>任务</code>已经完成了！我们已经经历了<code>失败-成功</code>的循环，这时候需要<code>review</code>一下代码，以保证代码是干净的：实现上来说，并没有可以优化的地方，但是我们发现两个测试用例其实测试的是同一件事情，因此可以删掉一个。</p>

<p>是的，测试代码也是代码，我们需要小心的维护它，以保证所有的代码都是干净的。</p>

<h4>第二个任务</h4>

<p>我们可以开始元音字母的子任务了，很容易想到的一个测试用例为：</p>

<p>```js
it("should return mommy when given a", function() {</p>

<pre><code>var expected = "mommy";

var result = mommify("a");

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>测试失败之后，能想到的最快速的方式是做一个简单的判断：</p>

<p>```js
function mommify(word) {</p>

<pre><code>if(word == "a") {
    return "mommy";
}
return word;
</code></pre>

<p>}
```</p>

<p>这样测试又会通过，接下来就是重复5个元音的场景，不过使用JavaScript可以很容易的将这5个场景归为一组：</p>

<p>```js
it("should return mommy when given a vowel", function() {</p>

<pre><code>var expected = "mommy";

["a", "e", "i", "o", "u"].forEach(function(word) {
    var result = mommify(word);
    expect(result).toEqual(expected);
});
</code></pre>

<p>});
```</p>

<p>而实现则对一个的会变成（记住，用最简单的方式）：</p>

<p>```js
function mommify(word) {</p>

<pre><code>if(word == "a" || word == "e" || word == "i" || word == "o" || word == "u") {
    return "mommy";
}
return word;
</code></pre>

<p>}
```</p>

<p>好了，测试通过了。又是进行重构的时间了，现在看看实现，简直不忍卒读，我们使用JavaScript的字符串的<code>indexOf</code>方法可以简化这段代码：</p>

<p>```js
function mommify(word) {</p>

<pre><code>if("aeiou".indedOf(word) &gt;= 0) {
    return "mommy";
}
return word;
</code></pre>

<p>}
```</p>

<p>好多了！我想你现在已经或多或少的体会到了<code>TDD</code>中<code>任务分解</code>的好处了：进度可以掌握，而且目标非常明确，每一步都有相应的产出。</p>

<h4>第三个任务</h4>

<p>和之前一样，我们还是从测试开始：</p>

<p>```js
it("should mommify if the vowels greater than 30%", function() {</p>

<pre><code>var expected = "shmommy";
var result = mommify("she");

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>现在有一点点挑战了，因为我们的实现上一直都是单一的字符串，现在有多个了，不过没有关系，我们先按照最简单的方式来实现就对了：</p>

<p>```js
function mommify(word) {</p>

<pre><code>var count = 0;
for(var i = 0; i &lt; word.length; i++) {
    if("aeiou".indexOf(word[i]) &gt;= 0) {
        count += 1;
    }
}

var str = "";

if(count/word.length &gt;= 0.30) {
    for(var i = 0; i &lt; word.length; i++) {
        if("aeiou".indexOf(word[i]) &gt;= 0) {
            str += "mommy";
        } else {
            str += word[i];
        }
    }
} else {
    str = word;
}

return str;
</code></pre>

<p>}
```</p>

<p>无论如何，测试通过了，我们首先计算了<code>元音</code>所占的比重，如果超过30%，则替换对应的字符，否则直接返回传入的字符串。</p>

<p>从现在来看，函数<code>mommify</code>中已经有了较多的逻辑，而且有一些重复的判断出现了（<code>"aeuio".indedOf</code>），是时候做一些重构了。</p>

<p>首先将相对独立的计算元音比重的部分抽取成一个函数：</p>

<p>```js
function countVowels(word) {</p>

<pre><code>var count = 0;

for(var i = 0; i &lt; word.length; i++) {
    if("aeiou".indexOf(word[i]) &gt;= 0) {
        count += 1;
    }
}

return count;
</code></pre>

<p>}
```</p>

<p>然后，将重复的<code>"aeiou".indexOf</code>部分抽取为一个独立函数：</p>

<p>```js
function isVowel(character) {</p>

<pre><code>return "aeiou".indexOf(character) &gt;= 0;
</code></pre>

<p>}
```</p>

<p>这样本来的代码就被简化成了：</p>

<p>```js
function mommify(word) {</p>

<pre><code>var count = countVowels(word);
var str = "";

if(count/word.length &gt;= 0.30) {
    for(var i = 0; i &lt; word.length; i++) {
        if(isVowel(word[i])) {
            str += "mommy";
        } else {
            str += word[i];
        }
    }
} else {
    str = word;
}

return str;
</code></pre>

<p>}
```</p>

<p>如果细细读下来，就会发现发现对于元音是否超过30%的判断比较突兀，这里确实了一个<code>业务概念</code>，就是说，此处的<code>if</code>判断并不表意，更好的写法是讲它抽取为一个函数：</p>

<p>```js
function shouldBeMommify(word) {</p>

<pre><code>var count = countVowels(word);
return count/word.length &gt;= 0.30;
</code></pre>

<p>}
```</p>

<p>并且，替换元音的部分，我们也可以从主函数中挪出来，得到一个小函数：</p>

<p>```js</p>

<p>function replace(word) {</p>

<pre><code>var str = "";

for(var i = 0; i &lt; word.length; i++) {
    if(isVowel(word[i])) {
        str += "mommy";
    } else {
        str += word[i];
    }
}

return str;
</code></pre>

<p>}
```</p>

<p>这样，主函数得到了进一步的简化：</p>

<p>```js
function mommify(word) {</p>

<pre><code>if(shouldBeMommify(word)) {
    return replace(word);
} else {
    return word;
}
</code></pre>

<p>}
```</p>

<p>太好了，现在<code>mommify</code>就更加清晰了，并且每个抽取出来的函数都有了更具意义的名字，更清晰的职责。</p>

<h4>第四个任务</h4>

<p>经过了第三步，相信你已经对如何进行<code>TDD</code>有了很好的认识，而且也更有信心进行下一个任务了。同样，我们需要先编写测试用例：</p>

<p>```js
it("should not mommify if there are vowels sequences", function() {</p>

<pre><code>var expected = "shmommyr";
var result = mommify("shear");

expect(result).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>现在的问题关键是需要判断一个字符串中的前一个是否元音，由于我们之前已经做了足够的重构，现在需要修改的函数就变成了<code>replace</code>子函数，而不是主入口<code>mommify</code>了：</p>

<p>```js
function replace(word) {</p>

<pre><code>var str = "";

for(var i = 0; i &lt; word.length; i++) {
    if(isVowel(word[i])) {
        if(!isVowel(word[i-1])) {
            str += "mommy";
        } else {
            str += "";
        }
    } else {
        str += word[i];
    }
}

return str;
</code></pre>

<p>}
```</p>

<p>测试通过之后，我们可以大胆的进行重构，抽取新的函数<code>next</code>：</p>

<p>```js
function next(current, previous) {</p>

<pre><code>var next = "";

if(isVowel(current)) {
    if(!isVowel(previous)) {
        next = "mommy";
    }
} else {
    next = current;
}

return next;
</code></pre>

<p>}</p>

<p>function replace(word) {</p>

<pre><code>var str = "";

for(var i = 0; i &lt; word.length; i++) {
    str += next(word[i], word[i-1]);
}

return str;
</code></pre>

<p>}
```</p>

<p>最后，如果你想看完整的/最新的代码，可以<a href="https://github.com/abruzzi/mommifier">在github上</a>找到。</p>

<h4>结束（？）</h4>

<p>重构是一个永无止境的实践，你可以不断的抽取，简化，重组。比如上例中对于常量的使用，对于JavaScript中的for的使用等，都可以更进一步。但是你需要权衡，适可而止，如果不小心做的太过，则可能引起过渡设计：引入太过的概念，过于简化的接口等。</p>

<p><code>TDD</code>是一种容易付诸实践的开发方式，在小的，简单的例子上如此，在大的，复杂的场景下也是如此。它优美且高效的地方在于：不假设任何人可以一次就写出完善的应用，而是鼓励小步前进，快速反馈，快速迭代。而演化到最后，得到的往往就是孜孜以求的优美设计。</p>
]]></content>
  </entry>
  
</feed>
