<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: visualization | I code it]]></title>
  <link href="http://abruzzi.github.com/category/visualization/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2016-01-02T20:39:46+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[看看这些年你都学了什么？]]></title>
    <link href="http://abruzzi.github.com/2015/11/what-you-have-learnt-those-years/"/>
    <updated>2015-11-01T17:03:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/11/what-you-have-learnt-those-years</id>
    <content type="html"><![CDATA[<h3>数据可视化</h3>

<p>多年下来，我的<code>Google Bookmarks</code>里已经有近万条的书签。大部分内容是我在读过一遍之后就收藏起来的，也有很多看了一眼之后，觉得不错，然后收藏起来准备以后读的（当然，你也知道，再也没有打开过）。</p>

<p>有没有一个方法可以让我以可视化的方式，看到这些年我都学了那些东西呢？将书签列表作为源数据，然后将这些信息可视化出来会非常有意思：比如收藏夹中的热门词是什么，哪段时间收藏了多少条的书签（学习投入程度趋势）等等。</p>

<p>下图是我的书签中，排行前<code>30</code>的关键字排序。可以明显的看出，我对于<code>JavaScript</code>的喜爱程度相当高，对<code>美食</code>的喜爱也超过了<code>python</code>和<code>linux</code>。</p>

<p><img src="/images/2015/11/bookmarks-trending-resized.png" alt="bookmarks trending" /></p>

<p>这里我将使用<code>python</code>，结合<code>python</code>的一些库来实现<code>书签可视化</code>。简而言之，整个过程可以分成这样几个步骤：</p>

<ol>
<li>将Google Bookmarks导出为本地文件</li>
<li>将书签文件解析为容易处理的内部格式（比如python的dict等）</li>
<li>由于书签中会有中文的句子，所以会涉及到分词</li>
<li>统计词语的频率，并绘制成图标</li>
</ol>


<h4>数据源</h4>

<p><code>Google Bookmarks</code>本身可以直接导出成<code>HTML</code>文件。该<code>HTML</code>文件包含了时间戳和书签的标题，我们可以通过<code>python</code>的库<code>BeautifulSoup</code>将HTML中的文本抽取出来：</p>

<p>```python
from bs4 import BeautifulSoup</p>

<p>def load_bookmarks_data():</p>

<pre><code>soup = BeautifulSoup(open('bookmarks_10_21_15.html').read(), "html.parser")
return soup.get_text()
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>print load_bookmarks_data() 
</code></pre>

<p>```</p>

<p><code>BeautifulSoup</code>提供非常好用的API来抽取结构化文档中的内容。</p>

<p><img src="/images/2015/11/bookmark-titles-resized.png" alt="bookmark titles" /></p>

<h4>分词</h4>

<p><code>BeautifulSoup</code>获得的是一条条独立的句子，我们需要使用分词器将所有的句子分解成片段。这里我使用了<code>jieba</code>（<a href="https://github.com/fxsjy/jieba">结巴分词</a>）分词器来完成这个任务：</p>

<p>```python
import jieba</p>

<p>data = "我在出报表，你的博客写的怎么样了"
seg_list = jieba.cut(data, cut_all=False)</p>

<p>for seg in seg_list:</p>

<pre><code> print seg
</code></pre>

<p>```</p>

<p>将会输出：</p>

<p><code>
我
在
出
报表
，
你
的
博客
写
的
怎么样
了
</code></p>

<p>我们定义一个方法来将上一步中的文本分词：</p>

<p>```python</p>

<p>def extract_segments(data):</p>

<pre><code>seg_list = jieba.cut(data, cut_all=False)
return [seg.strip().lower() for seg in seg_list if len(seg) &gt; 1]
</code></pre>

<p>```</p>

<p>分词之后，我们将单词转换为小写，并剔除掉那些长度小于1的字符串。这样可以保证所有的词都是词语。python的<code>list推导式</code>写起来非常简洁，一行代码就完成了<code>过滤</code>和<code>映射</code>的工作。</p>

<h4>可视化</h4>

<p>有了分好的词之后，只需要统计每个词出现的频率，然后按照频率来绘制图表。我们使用<code>python</code>标准库中的<code>Counter</code>来实现：</p>

<p>```python
from collections import Counter</p>

<p>def tokenize():</p>

<pre><code>filtered = extract_segments(load_bookmarks_data())
return Counter([word for word in filtered])
</code></pre>

<p>```</p>

<p>要获取前<code>N</code>个，只需要使用<code>most_common(N)</code>即可：</p>

<p><code>python
tokenize().most_common(10)
</code></p>

<p><code>
[(u'and', 552), (u'the', 501), (u'with', 485), (u'to', 446), (u'javascript', 432), (u'in', 330), (u'for', 308), (u'...', 270), (u'java', 270), (u'blog', 269)]
</code></p>

<p>有了数据之后，使用<code>matplotlib</code>做一个简单的<code>bar</code>图标：</p>

<p>```python
import matplotlib
import matplotlib.pyplot as plt</p>

<p>from pandas import DataFrame</p>

<p>def visualize():</p>

<pre><code>frame = DataFrame(tokenize().most_common(20), columns=['keywords', 'frequencies'])

ax = frame.plot(kind='bar')

plt.savefig('bookmarks_trending.png', format='png', dpi=600)
</code></pre>

<p>```</p>

<p><img src="/images/2015/11/bookmarks-trending-with-stops-resized.png" alt="" /></p>

<h4>stopwords</h4>

<p>不过，上图中有很多噪音信息，如<code>and</code>, <code>the</code>等，这些在所有文章中都会出现的词并没有实际意义，统称为<code>stopwords</code>。通常在计算过程中会将其忽略：</p>

<p>```python</p>

<p>def tokenize():</p>

<pre><code>stoplist = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now']
stoplist.extend(['...', 'com', 'using', u'使用', 'blog', u'博客', u'博客园', u'做法', u'论坛', 'part', u'部分', u'天下'])
filtered = extract_segments(load_bookmarks_data())

return Counter([word for word in filtered if word not in stoplist])
</code></pre>

<p>```</p>

<p>重新绘制即可获得上文中的图：</p>

<p><img src="/images/2015/11/bookmarks-trending-resized.png" alt="bookmarks trending" /></p>

<p>完整的代码<a href="https://github.com/abruzzi/bookmarks-viz">请参考这里</a>。</p>
]]></content>
  </entry>
  
</feed>
