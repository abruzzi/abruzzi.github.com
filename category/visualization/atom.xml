<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: visualization | I code it]]></title>
  <link href="http://abruzzi.github.com/category/visualization/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-02-24T16:27:06+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[生活中的数据可视化之 -- 换尿布]]></title>
    <link href="http://abruzzi.github.com/2017/02/data-visualization-from-baby/"/>
    <updated>2017-02-22T21:38:00+08:00</updated>
    <id>http://abruzzi.github.com/2017/02/data-visualization-from-baby</id>
    <content type="html"><![CDATA[<h2>数据来源</h2>

<p>从女儿<code>心心</code>出生开始，我们就通过各种方式记录她的各种信息：睡眠记录，吃药记录，体温记录，换尿布记录，哺乳记录等等。毕竟，处于忙乱状态的人们是很难精确地回忆各种数字的，特别是在体检时面对医生的询问时。大部分父母无法准确回答小孩上周平均的睡眠时间，或者平均的小便次数，这在很多时候会影响医生的判断。</p>

<p>我和我老婆的手机上都安装了<a href="http://www.nighp.com/babytracker/">宝宝生活记录(Baby Tracker)</a>（这里强烈推荐一下，免费版就很好用，不过界面下方有个讨厌的广告，我自己买了无广告的Pro版本），这样<code>心心</code>的每次活动我们都会记录下来，很有意思的是这个APP的数据可以以<code>CSV</code>格式导出（这个太棒了！），而且它自身就可以生成各种的报告，报告还可以以PDF格式导出并发送给其他应用。</p>

<p><img src="/images/2017/02/xinxin-chart-resized.png" alt="" /></p>

<p>有了现实世界中的一组数据 -- 我们记录的差不多100天的数据，而且正好我最近在复习D3相关的知识，正好可以用来做一些有趣的练习。</p>

<h3>数据准备</h3>

<p>从<code>Baby Tracker</code>导出的数据是一些CSV文件组成是压缩包，解压之后大致结果是这样的：</p>

<ul>
<li>哺乳记录</li>
<li>睡眠记录</li>
<li>换尿布记录</li>
<li>喂药/体温记录</li>
<li>里程碑记录</li>
</ul>


<p>我就从最简单换尿布数据记录开始吧。我们首先需要将数据做一些清洗和归一化，这样方便前端页面的计算和渲染。数据处理我一般会选择<code>Python+Pandas</code>的组合，只需要写很少的代码就可以完成任务。</p>

<h4>python + pandas</h4>

<p>原始数据看起来是这样的：</p>

<p><code>
name,date,status,note
心心,2016/11/13 17:00,嘘嘘
心心,2016/11/13 19:48,嘘嘘+便便
心心,2016/11/13 22:23,便便
心心,2016/11/14 00:19,便便,一点点，感觉很稀，穿厚点
心心,2016/11/14 04:33,嘘嘘
心心,2016/11/14 09:20,便便
心心,2016/11/14 11:33,便便
心心,2016/11/14 16:14,便便
心心,2016/11/14 21:12,嘘嘘+便便
心心,2016/11/14 23:12,嘘嘘+便便
心心,2016/11/15 00:32,嘘嘘+便便,有点稀
心心,2016/11/15 03:45,干爽
心心,2016/11/15 07:06,嘘嘘
心心,2016/11/15 10:30,嘘嘘+便便
</code></p>

<p>为了方便展示，我需要将数据统计成这样：</p>

<p><code>
date,urinate,stool
2016-11-13,2,2
2016-11-14,3,6
2016-11-15,6,8
</code></p>

<p>我不关心每一天不同时刻换尿布的事件本身，只关心每天中，大小便的次数分布，也就是说，我需要这三项数据：<code>日期</code>，<code>当天的小便次数</code>，<code>当天的大便次数</code>。这个用<code>pandas</code>很容易就可以整理出来了，<code>status</code>字段的做一个微小的函数转换（当然可以写的更漂亮，不过在这里不是重点，暂时跳过）:</p>

<p>```py
import numpy as np
import pandas as pd</p>

<p>diaper = pd.read_csv('data/diaper_data.csv', usecols=['date', 'status'])
diaper['date'] = pd.to_datetime(diaper['date'], format='%Y/%m/%d %H:%M')
diaper.index=diaper['date']</p>

<p>def mapper(key):</p>

<pre><code>if key == '嘘嘘':
    return pd.Series([1, 0], index=['urinate', 'stool'])
elif key == '便便':
    return pd.Series([0, 1], index=['urinate', 'stool'])
else:
    return pd.Series([1, 1], index=['urinate', 'stool'])
</code></pre>

<p>converted = diaper['status'].apply(mapper)
diaper = pd.concat([diaper, converted], axis=1)</p>

<p>grouped = diaper.groupby(pd.TimeGrouper('D'))</p>

<p>result = grouped.aggregate(np.sum)
result.to_csv('data/diaper_normolized.csv')
```</p>

<p>这里的<code>pd.TimeGrouper('D')</code>表示按天分组。好了，存起来的<code>diaper_normolized.csv</code>文件就是我们想要的了，接下来就看如何可视化了。</p>

<h3>可视化</h3>

<p>仔细看一下数据，自然的想法是横坐标为日期，纵坐标为嘘嘘/便便的次数，然后分别将嘘嘘和便便的绘制成曲线即可。这个例子我使用<code>D3</code>来做可视化的工具，<code>D3</code>本身的API层次比较偏底层，这点和<code>jQuery</code>有点类似。</p>

<h4>尝试1 - 曲线图</h4>

<p>最简单的情况，只需要定义两条线条函数。</p>

<p>```js
var valueline = d3.svg.line()</p>

<pre><code>.x(function(d) {
    return x(d.date);
})
.y(function(d) {
    return y(d.urinate);
});
</code></pre>

<p>var stoolline = d3.svg.line()</p>

<pre><code>.x(function(d) {
    return x(d.date);
})
.y(function(d) {
    return y(d.stool);
});
</code></pre>

<p>```</p>

<p><img src="/images/2017/02/xinxin-curve-hard-resized.png" alt="" /></p>

<p>可以看到，直接将点连接起来，线条的拐点看起来会非常的尖锐。这个可以通过使用D3提供的插值函数来解决，比如采用<code>basis</code>方式插值：</p>

<p>```js
var valueline = d3.svg.line()</p>

<pre><code>.interpolate('basis')
.x(function(d) {
    return x(d.date);
})
.y(function(d) {
    return y(d.urinate);
});
</code></pre>

<p>```</p>

<p><img src="/images/2017/02/xinxin-curve-resized.png" alt="" /></p>

<p>曲线图倒是看起来比较简单，可以看出基本的走势。比如<code>新生儿</code>阶段，大小便的次数都比较多，随着月龄的增长，呈现出了下降的趋势，而且便便次数降低了很多。</p>

<h4>尝试2 - 散点图（气泡图）</h4>

<p>曲线图看起来并不是太直观，我们接下来尝试一下其他的图表类型。比如散点图是一个比较好的选择：</p>

<p>```js
svg.selectAll("dot")</p>

<pre><code>.data(data)
</code></pre>

<p>  .enter().append("circle")</p>

<pre><code>.attr('stroke', '#FD8D3C')
.attr('fill', '#FD8D3C')
.attr('opacity', ".7")
.attr("r", function(d) {return 3;})
.attr("cx", function(d) { return x(d.date); })
.attr("cy", function(d) { return y(d.urinate); });
</code></pre>

<p>```</p>

<p><img src="/images/2017/02/xinxin-diaper-scatter-resized.png" alt="" /></p>

<p>这里还使用了不同的颜色来区分嘘嘘和便便，但是信息强调的也不够充分。这时候可以通过<code>尺寸</code>的不同，<code>色彩饱和度</code>的差异再次强调各个点之间的对比：</p>

<p>```js
svg.selectAll("dot")</p>

<pre><code>.data(data)
</code></pre>

<p>  .enter().append("circle")</p>

<pre><code>.attr('stroke', '#FD8D3C')
.attr('fill', '#FD8D3C')
.attr('opacity', function(d) {return d.urinate * 0.099})
.attr("r", function(d) {return d.urinate;})
.attr("cx", function(d) { return x(d.date); })
.attr("cy", function(d) { return y(d.urinate); })
.on("mouseover", function(d) {
    div.html(formatTime(d.date) + ", 嘘嘘: "  + d.urinate + "次")
    .style("left", (d3.event.pageX) + "px")
    .style("top", (d3.event.pageY - 28) + "px")
    .style("opacity", .9)
    .style("background", "#FD8D3C");
})
.on("mouseout", function(d) { 
    div.style("opacity", 0);
});
</code></pre>

<p>```</p>

<p><img src="/images/2017/02/xinxin-diaper-bubble-resized.png" alt="" /></p>

<p>此处的圆的半径与嘘嘘次数相关，圆的透明度也和嘘嘘的次数相关，这样从不同的视觉编码上重复强调数据的差异，效果比单纯的曲线图和散点图会更好一些。</p>

<h3>一点理论</h3>

<p>数据可视化过程可以分为这样几个步骤：</p>

<ol>
<li>明确可视化的目的</li>
<li>数据获取</li>
<li>数据预处理</li>
<li>选择合适的图表</li>
<li>结果呈现</li>
</ol>


<p>当然，可视化本身就是一个需要不断迭代的过程，步骤的2-5可能会经过多次迭代和修正：比如在呈现之后发现有信息没有充分展现，则需要回退到图表选择上，而不同的图表需要的数据又可能会有不同，我们可能需要又回到数据预处理、甚至数据获取阶段。</p>

<h4>选择合适的图表</h4>

<p>对于新手而言，图表的选择是非常困难的。同样的数据集，用不同的图表展现，效果会有很大差异。另一方面，对于手头的数据集，做何种预处理并以不同的角度来展现也同样充满挑战。</p>

<p>不过好在已经有人做过相关的研究，并形成了一个非常简便可行的Matrix：</p>

<ul>
<li><a href="http://extremepresentation.typepad.com/blog/2015/01/announcing-the-slide-chooser.html">选取合适的图表</a></li>
<li><a href="http://extremepresentation.typepad.com/blog/2015/01/announcing-the-slide-chooser.html">选取合适的图表之新版</a></li>
</ul>


<p>通过这个Martix，你可以根据变量的数量，变量的类型很方便的选取合适的图表格式。这个表可以保证你不出大的差错，最起码可以很清晰的将结果展现出来。</p>

<h4>视觉编码（Visual Encoding）</h4>

<p>视觉编码，简而言之就是将数据映射为可视化的元素，这些元素可以帮助人们很快的区分出数据的差异。比如通过颜色的不同来区分<code>分类型元素</code>(亚太区收入，亚洲区收入)，通过长度的不同来表示数量的不同等等。视觉编码有很多不同的元素：</p>

<ol>
<li>位置</li>
<li>形状（体积）</li>
<li>纹理</li>
<li>角度</li>
<li>长度</li>
<li>色彩</li>
<li>色彩饱和度</li>
</ol>


<p><img src="/images/2017/02/visual-encoding.png" alt="Semiology of Graphics" /></p>

<blockquote><p>Within the plane a mark can be at the top or the bottom, to the right or the left. The eye perceives two independent dimensions along X and Y, which are distinguished orthogonally. A variation in light energy produces a third dimension in Z, which is independent of X and Y…</p>

<p>The eye is sensitive, along the Z dimension, to 6 independent visual variables, which can be superimposed on the planar figures: the size of the marks, their value, texture, color, orientation, and shape. They can represent differences (≠), similarities (≡), a quantified order (Q), or a nonquantified order (O), and can express groups, hierarchies, or vertical movements.</p></blockquote>

<p><a href="http://esripress.esri.com/display/index.cfm?fuseaction=display&amp;websiteID=190">来源：Semiology of Graphics</a></p>

<p>而且，人类对这些不同元素的认知是不同的，比如人们更容易辨识位置的不同，而比较难以区分饱和度的差异。这也是为什么大部分图表都会有坐标轴和标尺的原因（当然，还有网格），而像饼图这样的图形则很难让读者从形状上看出不同部分的差异。</p>

<p>Jock Mackinlay发表过关于不同视觉编码优先级的研究：</p>

<p><img src="/images/2017/02/mackinlay-hierarchy-resized.png" alt="Mackinlay" /></p>

<p>越靠近上面的元素，在人眼所能识别的精度就越高。在图表类型的选取上，也需要充分考虑这些研究的成果，选取合理的视觉编码。</p>

<p>正如前面所说，可视化是一个不断迭代的过程，要将同样的信息展现出来，可能需要尝试不同的视觉编码的组合，比如：</p>

<p><img src="/images/2017/02/xinxin-other-resized.png" alt="" /></p>

<p>上面几个图表对应的<a href="https://github.com/abruzzi/health-recording">代码在这里</a>，下一篇我们来看看数据可视化的其他知识。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看看这些年你都学了什么？]]></title>
    <link href="http://abruzzi.github.com/2015/11/what-you-have-learnt-those-years/"/>
    <updated>2015-11-01T17:03:00+08:00</updated>
    <id>http://abruzzi.github.com/2015/11/what-you-have-learnt-those-years</id>
    <content type="html"><![CDATA[<h3>数据可视化</h3>

<p>多年下来，我的<code>Google Bookmarks</code>里已经有近万条的书签。大部分内容是我在读过一遍之后就收藏起来的，也有很多看了一眼之后，觉得不错，然后收藏起来准备以后读的（当然，你也知道，再也没有打开过）。</p>

<p>有没有一个方法可以让我以可视化的方式，看到这些年我都学了那些东西呢？将书签列表作为源数据，然后将这些信息可视化出来会非常有意思：比如收藏夹中的热门词是什么，哪段时间收藏了多少条的书签（学习投入程度趋势）等等。</p>

<p>下图是我的书签中，排行前<code>30</code>的关键字排序。可以明显的看出，我对于<code>JavaScript</code>的喜爱程度相当高，对<code>美食</code>的喜爱也超过了<code>python</code>和<code>linux</code>。</p>

<p><img src="/images/2015/11/bookmarks-trending-resized.png" alt="bookmarks trending" /></p>

<p>这里我将使用<code>python</code>，结合<code>python</code>的一些库来实现<code>书签可视化</code>。简而言之，整个过程可以分成这样几个步骤：</p>

<ol>
<li>将Google Bookmarks导出为本地文件</li>
<li>将书签文件解析为容易处理的内部格式（比如python的dict等）</li>
<li>由于书签中会有中文的句子，所以会涉及到分词</li>
<li>统计词语的频率，并绘制成图标</li>
</ol>


<h4>数据源</h4>

<p><code>Google Bookmarks</code>本身可以直接导出成<code>HTML</code>文件。该<code>HTML</code>文件包含了时间戳和书签的标题，我们可以通过<code>python</code>的库<code>BeautifulSoup</code>将HTML中的文本抽取出来：</p>

<p>```python
from bs4 import BeautifulSoup</p>

<p>def load_bookmarks_data():</p>

<pre><code>soup = BeautifulSoup(open('bookmarks_10_21_15.html').read(), "html.parser")
return soup.get_text()
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>print load_bookmarks_data() 
</code></pre>

<p>```</p>

<p><code>BeautifulSoup</code>提供非常好用的API来抽取结构化文档中的内容。</p>

<p><img src="/images/2015/11/bookmark-titles-resized.png" alt="bookmark titles" /></p>

<h4>分词</h4>

<p><code>BeautifulSoup</code>获得的是一条条独立的句子，我们需要使用分词器将所有的句子分解成片段。这里我使用了<code>jieba</code>（<a href="https://github.com/fxsjy/jieba">结巴分词</a>）分词器来完成这个任务：</p>

<p>```python
import jieba</p>

<p>data = "我在出报表，你的博客写的怎么样了"
seg_list = jieba.cut(data, cut_all=False)</p>

<p>for seg in seg_list:</p>

<pre><code> print seg
</code></pre>

<p>```</p>

<p>将会输出：</p>

<p><code>
我
在
出
报表
，
你
的
博客
写
的
怎么样
了
</code></p>

<p>我们定义一个方法来将上一步中的文本分词：</p>

<p>```python</p>

<p>def extract_segments(data):</p>

<pre><code>seg_list = jieba.cut(data, cut_all=False)
return [seg.strip().lower() for seg in seg_list if len(seg) &gt; 1]
</code></pre>

<p>```</p>

<p>分词之后，我们将单词转换为小写，并剔除掉那些长度小于1的字符串。这样可以保证所有的词都是词语。python的<code>list推导式</code>写起来非常简洁，一行代码就完成了<code>过滤</code>和<code>映射</code>的工作。</p>

<h4>可视化</h4>

<p>有了分好的词之后，只需要统计每个词出现的频率，然后按照频率来绘制图表。我们使用<code>python</code>标准库中的<code>Counter</code>来实现：</p>

<p>```python
from collections import Counter</p>

<p>def tokenize():</p>

<pre><code>filtered = extract_segments(load_bookmarks_data())
return Counter([word for word in filtered])
</code></pre>

<p>```</p>

<p>要获取前<code>N</code>个，只需要使用<code>most_common(N)</code>即可：</p>

<p><code>python
tokenize().most_common(10)
</code></p>

<p><code>
[(u'and', 552), (u'the', 501), (u'with', 485), (u'to', 446), (u'javascript', 432), (u'in', 330), (u'for', 308), (u'...', 270), (u'java', 270), (u'blog', 269)]
</code></p>

<p>有了数据之后，使用<code>matplotlib</code>做一个简单的<code>bar</code>图标：</p>

<p>```python
import matplotlib
import matplotlib.pyplot as plt</p>

<p>from pandas import DataFrame</p>

<p>def visualize():</p>

<pre><code>frame = DataFrame(tokenize().most_common(20), columns=['keywords', 'frequencies'])

ax = frame.plot(kind='bar')

plt.savefig('bookmarks_trending.png', format='png', dpi=600)
</code></pre>

<p>```</p>

<p><img src="/images/2015/11/bookmarks-trending-with-stops-resized.png" alt="" /></p>

<h4>stopwords</h4>

<p>不过，上图中有很多噪音信息，如<code>and</code>, <code>the</code>等，这些在所有文章中都会出现的词并没有实际意义，统称为<code>stopwords</code>。通常在计算过程中会将其忽略：</p>

<p>```python</p>

<p>def tokenize():</p>

<pre><code>stoplist = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now']
stoplist.extend(['...', 'com', 'using', u'使用', 'blog', u'博客', u'博客园', u'做法', u'论坛', 'part', u'部分', u'天下'])
filtered = extract_segments(load_bookmarks_data())

return Counter([word for word in filtered if word not in stoplist])
</code></pre>

<p>```</p>

<p>重新绘制即可获得上文中的图：</p>

<p><img src="/images/2015/11/bookmarks-trending-resized.png" alt="bookmarks trending" /></p>

<p>完整的代码<a href="https://github.com/abruzzi/bookmarks-viz">请参考这里</a>。</p>
]]></content>
  </entry>
  
</feed>
