<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Methodology | I code it]]></title>
  <link href="http://abruzzi.github.com/category/methodology/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-01-06T20:46:07+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件开发为什么很难]]></title>
    <link href="http://abruzzi.github.com/2017/01/why-software-is-complex/"/>
    <updated>2017-01-06T18:06:00+11:00</updated>
    <id>http://abruzzi.github.com/2017/01/why-software-is-complex</id>
    <content type="html"><![CDATA[<h2>为什么软件开发这么复杂</h2>

<p>最初在1999年被Dave Snowden开发出来的<strong><a href="https://en.wikipedia.org/wiki/Cynefin_framework">Cynefin</a>框架</strong>尝试把世界上的问题划分到了5个域中（大类）：</p>

<p><img src="/images/2017/01/cynefin-resized.png" alt="" /></p>

<ul>
<li>简单（Simple）问题，该域中的因果关系非常明显，解决这些问题的方法是 <code>感知-分类-响应</code>（Sense-Categorise-Respond），有对应的<strong>最佳</strong>实践</li>
<li>复合（Complicated）问题，该域中的因果关系需要分析，或者需要一些其他形式的调查和/或专业知识的应用，解决这些问题的方法是<code>感知-分析-响应</code>（Sense-Analyze-Respond），有对应的<strong>好的</strong>实践</li>
<li>复杂（Complex）问题，该域中的因果关系仅能够从回顾中发现，解决这些问题的方法是<code>探索-感知-响应</code>（Probe-Sense-Respond），我们能够感知<strong>涌现</strong>实践（emergent practice）</li>
<li>混乱（Chaotic）问题，该域中没有系统级别的因果关系，方法是<code>行动-感知-响应</code>（Act-Sense-Respond），我们能够发现<strong>新颖</strong>实践（novel practice）</li>
<li>失序（Disorder）问题，无需问题，该域没有因果关系，不可感知，其中的问题也也无法被解决</li>
</ul>


<p>显然，软件开发过程更多地是一个复杂（Complex）问题。在一个产品被开发出来之前，不确定性非常高，团队（包括业务人员和技术人员）对产品的知识也是最少的，而且需要大量的学习和尝试才可以明确下一步可能的方向。不幸的是，很多时候我们需要在一开始（不确定性最高的时候）就为项目做计划。这种从传统行业中非常适合的方法在软件开发领域不再适用，这也是敏捷开发、精益等方法论在软件开发中更加适合的原因。</p>

<p><img src="/images/2017/01/learning-curve-resized.png" alt="" /></p>

<p><em>来源：http://alistair.cockburn.us/Disciplined+Learning</em></p>

<p>正因为软件开发事实上是一个学习的过程，我们学习到的新知识反过来会帮助我们对问题的定义，从而带来变化。这里的变化可能来自两个方向：</p>

<ul>
<li>功能性</li>
<li>非功能性</li>
</ul>


<p>功能性的变化指随着对业务的深入理解、或者已有业务规则为了匹配市场而产生的变化。比如支付方式由传统的货到付款变成了网银付款，又变成了微信支付、支付宝扫码等等。一个原始的电商平台仅仅提供基本的购物服务，但是后来可以根据已有数据产生推荐商品，从来带来更大的流量。这些变化需要体现在已有的代码中，而对代码的修改往往是牵一发而动全身。</p>

<p>非功能性的变化是指随着业务的发展，用户规模的增加，数据量的变化，安全认知的变化等产生的新的需求。比如100个用户的时候无需考虑性能问题，但是100万用户的时候，性能就变成了必须重视的问题。天气预报应用的数据安全性和网络银行的数据安全性要求也大不相同。</p>

<p><em>而在业务提出一个需求的时候，往往只是一个简化过的版本。</em></p>

<h3>一个小例子</h3>

<p><img src="/images/2017/01/ui-resized.png" alt="" /></p>

<p><em>来源：https://d13yacurqjgara.cloudfront.net/users/749341/screenshots/2228676/uielements_day021_dribbbleinvites.jpg</em></p>

<p>这是一个经过设计师精确设计的界面，在它被设计出来之前，用户事实上无法准确的描述出它。设计过程中经历了很多的诸如：</p>

<ul>
<li>线框图</li>
<li>颜色的确定</li>
<li>交互的动画</li>
<li>信息层次</li>
</ul>


<p>往复多次之后，界面确定了。在没有仔细思考使用场景的时候，开发会误以为这个功能非常简单。但是如果你是一个有经验的开发者，很快会想到的一些问题是：</p>

<ul>
<li>在宽屏下如何展示</li>
<li>在平板上如何展示</li>
<li>在手机上如何展示</li>
<li>即使仅仅支持桌面版，跨浏览器要考虑吗？支持哪些版本？</li>
<li>有些UI效果在低版本的浏览器上不工作，需要Shim技术</li>
</ul>


<p>除此之外，依然有大量的其他细节需要考虑：</p>

<ul>
<li>性能要求是什么样的？</li>
<li>安全性要考虑吗？</li>
<li>在网络环境不好的时候，要不要fallback到基础视图？</li>
<li>既然涉及发送邀请函，送达率如何保证</li>
<li>与外部邮件服务提供商集成时的工作量</li>
</ul>


<p>等等。这些隐含的信息需要被充分挖掘出来，然后开发者才能做一个合理的评估，而且这还只是开始。一旦进入开发阶段，很多之前没有考虑到的细节开始涌现：字体的选用，字号，字体颜色，元素间的间距等等，如何测试邮件是否发送成功，多个角色之间的conversation又会消耗很多时间。</p>

<h3>关于需求变化的小例子</h3>

<p>作为程序员，有一天你被要求写一段代码，这段代码需要完成一件很简单的事：</p>

<ol>
<li>打印"Hello, world"5次</li>
</ol>


<p>很容易嘛，你想，然后顺手就写下了下面这几行代码：</p>

<p><code>js
print("Hello, world")
print("Hello, world")
print("Hello, world")
print("Hello, world")
print("Hello, world")
</code></p>

<p>不过，拷贝粘贴看起来有点低端，你做了一个微小的改动：</p>

<p>```js
for(var i = 0; i &lt; 5; i++) {</p>

<pre><code>print("Hello, world")
</code></pre>

<p>}
```</p>

<p>看起来还不错，老板的需求又变成了打印"Goodbye, world"5次。既然是打印<code>不同</code>的消息，那何不把消息作为参数呢？</p>

<p>```js
function printMessage(message) {</p>

<pre><code>for(i = 0; i &lt; 5; i++) {
    print(message);
}
</code></pre>

<p>}</p>

<p>printMessage("Hello, world")
printMessage("Goodbye, world")
```</p>

<p>有了这个函数，你可以打印<code>任意消息</code>5次了。老板又一次改变了需求：打印"Hello, world"13次（没人知道为什么是13）。既然次数也变化了，那么一个可能是将<code>次数</code>作为参数传入：</p>

<p>```js
function printMessage(count, message) {</p>

<pre><code>for(i = 0; i &lt; count; i++) {
    print(message);
}
</code></pre>

<p>}</p>

<p>printMessage(13, "Hello, world");
printMessage(5, "Goodbye, world");
```</p>

<p>完美，这就是抽象的魅力。有了这个函数，你可以将任意消息打印任意次数。不过老板是永远无法满足的，就在这次需求变化之后的第二天，他的需求又变了：不但要将"Hello, world"打印到控制台，还要将其计入日志。</p>

<p>没办法，通过搜索<code>JavaScript</code>的文档，你发现了一个叫做高阶函数的东东：<strong>函数可以作为参数传入另一个参数！</strong></p>

<p>```js
function log(message) {</p>

<pre><code>system.log(message);
</code></pre>

<p>}</p>

<p>function doMessage(count, message, action) {</p>

<pre><code>for(i = 0; i &lt; count; i++) {
    action(message);
}
</code></pre>

<p>}</p>

<p>doMessage(5, "Hello, world", print);
doMessage(5, "Hello, world", log);
```</p>

<p>这下厉害了，我们可以对任意消息，做任意次的任意动作！再回过头来看看那个最开始的需求：</p>

<ol>
<li>打印"Hello, world"5次</li>
</ol>


<p>稍微分割一下这句话：<strong>打印，"Hello, world"，5次</strong>，可以看到，这三个元素最后都变成了可以变化的点，软件开发很多时候正是如此，需求可能在任意<em>可能变化</em>的方向上变化。这也是各种软件开发原则尝试解决的问题：如何写出更容易扩展，更容易响应变化的代码来。</p>

<h3>小节</h3>

<p>软件的复杂性来自于大量的<strong>不确定性</strong>，而这个不确定性事实上是无法避免的，而且每个软件都是独一无二的。另一方面，软件的需求会以各种方式来变化，而且往往会以开发者没有预料到的方向。比如上面这个小例子中看到的，最后的需求可能会变成将消息以短信的方式发送给手机号以<code>185</code>开头的用户手机上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[无他，但手熟尔]]></title>
    <link href="http://abruzzi.github.com/2016/05/practise-in-programming/"/>
    <updated>2016-05-26T22:56:00+10:00</updated>
    <id>http://abruzzi.github.com/2016/05/practise-in-programming</id>
    <content type="html"><![CDATA[<h2>高效幻象</h2>

<p>通过对自己的行为观察，我发现在很多时候，我以为我掌握了的知识和技能其实并不牢靠。我引以为豪的<code>高效</code>其实犹如一个彩色的肥皂泡，轻轻一碰就会破碎，散落一地。</p>

<h3>你可能只是精通搜索</h3>

<p>我们现在所处的时代，信息爆炸，每个人每天都会接触，阅读很多的信息，快速消费，快速遗忘。那种每天早上起来如同皇帝批阅奏折的、虚假的误以为掌握知识的错觉，驱动我们进入一个恶性循环。</p>

<p>即使在我们真的打算解决问题，进行主动学习时，更多的也只是在熟练使用搜索引擎而已（在一个领域待久了，你所使用的关键字准确度自然要比新人高一些，仅此而已）。精通了高效率搜索之后，你会产生一种你<code>精通搜索到的知识本身</code>的<strong>错觉</strong>。</p>

<p><img src="/images/2016/05/stackoverflow-oreilly.png" alt="stack overflow" /></p>

<h4>如何写一个Shell脚本</h4>

<p>在写博客的时候，我通常会在文章中配图。图片一般会放在一个有固定格式的目录中，比如现在是2016年5月，我本地就会有一个名为<code>$BLOG_HOME/images/2016/05</code>的目录。由于使用的是<code>markdown</code>，在插入图片时我就不得不输入完整的图片路径，如：<code>/images/2016/05/stack-overflow.png</code>。但是我又不太记得路径中的<code>images</code>是单数(<code>image</code>)还是复数(<code>images</code>)，而且图片格式又可能是<code>jpg</code>,<code>jpeg</code>,<code>gif</code>或者<code>png</code>，我也经常会搞错，这会导致图片无法正确显示。另外，放入该目录的原始文件尺寸有可能比较大，我通常需要将其缩放成800像素宽（长度无所谓，因为文章总是要从上往下阅读）。</p>

<p>为了自动化这个步骤，我写了一个小的Shell脚本。当你输入一个文件名如：<code>stack-overflow.png</code>后，它会缩放这个文件到800像素宽，结果是一个新的图片文件，命名为<code>stack-overflow-resized.png</code>，另外它将符合<code>markdown</code>语法的文件路径拷贝到剪贴板里：<code>/images/2016/05/stack-overflow-resized.png</code>，这样我在文章正文中只需要用<code>Command+V</code>粘贴就可以了。</p>

<p>有了思路，写起来就很容易了。缩放图片的命令我是知道的：</p>

<p><code>sh
$ convert -resize 800 stack-overflow.png stack-overflow-resized.png
</code></p>

<p>但是要在文件明上加入<code>-resized</code>，需要分割文件名和文件扩展名，在<code>Bash</code>里如何做到这一点呢？Google一下：</p>

<p>```sh
FULLFILE=$1</p>

<p>FILENAME=$(basename "$FULLFILE")
EXTENSION="${FILENAME##<em>.}"
FILENAME="${FILENAME%.</em>}"</p>

<p>convert -resize 800 $FULLFILE $FILENAME-resized.EXTENSION
```</p>

<p>难看是有点难看，不过还是可以工作的。接下来是按照当前日期生成完整路径，<code>date</code>命令我是知道的，而且我知道它的<code>format</code>格式很复杂，而且跟<code>JavaScript</code>里Date对象的<code>format</code>又不太一样（事实上，世界上有多少种日期工具，基本上就有多少种格式）。再Google一下：</p>

<p><code>sh
$ date +"/images/%Y/%m/"
</code></p>

<p>最后一步将路径拷贝到剪贴板也容易，Mac下的<code>pbcopy</code>我也会用：<code>echo</code>一下字符串变量，再管道到<code>pbcopy</code>即可：</p>

<p><code>sh
PREFIX=`date +"/images/%Y/%m/"`
echo "$PREFIX$FILENAME-resized.EXTENSION" | pbcopy
</code></p>

<p>但是将内容粘贴到<code>markdown</code>里之后，我发现这个脚本多了一个换行。我想这个应该是<code>echo</code>自己的行为吧，会给字符串自动加上一个换行符。Google一下，发现加上<code>-n</code>参数就可以解决这个问题。</p>

<p>好了，完整的脚本写好了：</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>FULLFILE=$1</p>

<p>FILENAME=$(basename "$FULLFILE")
EXTENSION="${FILENAME##<em>.}"
FILENAME="${FILENAME%.</em>}"</p>

<p>convert -resize 800 $FULLFILE $FILENAME-resized.EXTENSION</p>

<p>PREFIX=<code>date +"/images/%Y/%m/"</code>
echo -n "$PREFIX$FILENAME-resized.EXTENSION" | pbcopy
```</p>

<p>嗯，还不错，整个过程中就用了我十几分钟时间而已，以后我在写博客时插入图片就方便多了！</p>

<p>不过等等，好像有点不对劲儿，我回过头来看了看这段脚本：7行代码只有1行是我独立写的！没有<code>Google</code>的话，查看<code>man date</code>和<code>man echo</code>也可以解决其中一部分问题，不过文件扩展名部分估计又得花较长时间。</p>

<p>仔细分析一下，之前的成就感荡然无存。</p>

<h4>更多的例子</h4>

<p>我相信，过几周我再来写这样一个简单的脚本时，上面那一幕还是会出现。开发者的IDE的外延已经将<code>Google</code>和<code>Stack Overflow</code>集成了。很难想象没有这两个IDE的<code>插件</code>我要怎样工作。</p>

<p>其实除此之外，日常工作中这样的事情每时每刻都在发生：</p>

<ol>
<li>Ansible里如何创建一个给用户<code>robot</code>读写权限的目录？</li>
<li>Python 3中启动简单HTTPServer的命令是？</li>
<li>Spring Boot的Gradle String是？</li>
<li>Mongodb中如何为用户<code>robot</code>授权？</li>
<li>Gulp里一个Task依赖另一个Task怎么写？</li>
</ol>


<p>等等等等，这个列表可以根据你的技术栈，偏向前端/后端的不同而不同，但是相同的是在<code>Google</code>和<code>Stack Overflow</code>上搜索，阅读会浪费很多时间，而这些本来都是可以避免的。</p>

<h3>肌肉记忆</h3>

<p>大脑在对信息存储上有很高级的设计，如果某件事情不值得记忆，大脑会自动过滤掉（比如我们很容易获得的搜索结果）。而对于那些频繁发生，计算结果又不会变化的信息，大脑会将其下放到“更低级别”的神经去记忆。比如各种运动中的肌肉记忆，习武之人梦寐以求的“拳拳服膺”，“不期然而然，莫知之而至”。</p>

<p>这里也有两个小例子：</p>

<h4>一个C语言的小程序</h4>

<p>上周末我买了一个茶轴的机械键盘，打开包装之后我很兴奋，赶紧插在我的笔记本上，打开一个编辑器，心说敲一些代码体验一下。几秒钟后，我发现敲出来的是：</p>

<p>```c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<p>int main(int argc, char *argv[]) {</p>

<pre><code>if(argc != 3) {
    fprintf(stderr, "Usage: %s ip port\n", argv[0]);
    return -1;
}

fprintf(stdout, "Connecting to %s %d\n", argv[1], atoi(argv[2]));

return 0;
</code></pre>

<p>}
```</p>

<p>然后在命令行里</p>

<p>```sh
$ gcc -o hello hello.c
$ ./hello
Usage: ./hello ip port</p>

<p>$ ./hello 10.180.1.1 9999
Connecting to 10.180.1.1 9999
```</p>

<p>整个过程极为流畅，上一次开发C代码已经是4年多前了。也就是说，我的手指已经记下了所有的这些命令：</p>

<ol>
<li>Linux下<code>main</code>函数的convention</li>
<li><code>fprintf</code>的签名</li>
<li><code>stderr/stdout</code>用法的区分</li>
<li><code>main</code>函数不同场景的返回值</li>
<li><code>gcc</code>命令的用法</li>
</ol>


<p>另外一个小例子是<code>vim</code>编辑器。我使用<code>vim</code>已经有很多年了，现在在任何一个Linux服务器上，编辑那些<code>/etc/nginx/nginx.conf</code>之类的配置文件时，手指就会<code>自动</code>的找到快捷键，<code>自动</code>的完成搜索，替换，跳转等等操作。</p>

<h3>刻意练习</h3>

<p>对比这两个例子，一方面我惊讶于自己目前对搜索引擎、<code>Stack Overflow</code>的依赖；一方面惊讶于<code>肌肉记忆力</code>的深远和神奇。结合一下两者，我发现自己的开发效率有望得到很大的提升。</p>

<p>比如上面列出的那些略显尴尬的问题，如果我的手指可以<code>自动</code>的敲出这些答案，那么节省下的搜索、等待、阅读的时间就可以用来干别的事情，比如跑步啊，骑车啊，去驾校学车被教练骂啊等等，总之，去过自己的生活。</p>

<p>这方面的书籍，博客都已经有很多，比如我们在ThoughtWorks University里实践的<code>Code Kata</code>，<code>JavaScript Dojo</code>，<code>TDD Dojo</code>之类，都已经证明其有效性。</p>

<p>如果你打算做一些相关的练习，从<code>Kata</code>开始是一个不错的选择。每个<code>Kata</code>都包含一个简单的编程问题，你需要不断的去练习它（同一个题目做20遍，50遍等）。前几次你是在解决问题本身，慢慢就会变成在审视自己的编程习惯，发现并改进（比如快捷键的使用，语法的熟悉程度等等），这样在实际工作中你会以外的发现自己的速度变快了，而且对于重构的信心会变大很多。其实道理也很简单：如果你总是赶着deadline来完成任务，怎么会有时间来做优化呢？</p>

<p>这里有一些参考资料和<code>Kata</code>的题目，可供参考：</p>

<ul>
<li><a href="https://sites.google.com/site/steveyegge2/practicing-programming">Practicing Programming</a></li>
<li><a href="https://blog.codinghorror.com/the-ultimate-code-kata/">The Ultimate Code Kata</a></li>
<li><a href="http://codekata.com/">一些Kata的题目</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
