<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Methodology | I code it]]></title>
  <link href="http://abruzzi.github.com/category/methodology/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2018-01-13T16:15:54+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从三明治到六边形]]></title>
    <link href="http://abruzzi.github.com/2017/08/from-sandwich-to-hexagon/"/>
    <updated>2017-08-21T21:58:00+08:00</updated>
    <id>http://abruzzi.github.com/2017/08/from-sandwich-to-hexagon</id>
    <content type="html"><![CDATA[<p>本文首先发表于<a href="http://insights.thoughtworkers.org/from-sandwich-to-hexagon/">ThoughtWorks洞见</a>。</p>

<h3>软件项目的套路</h3>

<p>如果你平时的工作是做各种项目（而不是产品），而且你工作的时间足够长，那么自然见识过很多不同类型的项目。在切换过多次上下文之后，作为程序员的你，自然而然的会感到一定程度的重复：稍加抽象，你会发现所有的业务系统都几乎做着同样的事情：</p>

<ul>
<li>从某种渠道与用户交互，从而接受输入（Native App，Mobile Site，Web Site，桌面应用等等）</li>
<li>将用户输入的数据按照一定规则进行转换，然后保存起来（通常是关系型数据库）</li>
<li>将业务数据以某种形式展现（列表，卡片，地图上的Marker，时间线等）</li>
</ul>


<p>稍加简化，你会发现大部分业务系统其实就是对某种形式的资源进行管理。所谓管理，也无非是增删查改（CRUD）操作。比如知乎是对“问题”这种资源的管理，LinkedIn是对“Profile”的管理，Jenkins对构建任务的管理等等，粗略的看起来都是这一个套路（当然，每个系统管理的资源类型可能不止一种，比如知乎还有时间线，Live，动态等等资源的管理）。</p>

<p>这些情况甚至会给开发者一种错觉：世界上所有的信息管理系统都是一样的，不同的仅仅是技术栈和操作的业务对象而已。如果写好一个模板，几乎都可以将开发过程自动化起来。事实上，有一些工具已经支持通过配置文件（比如yaml或者json/XML）的描述来生成对应的代码的功能。</p>

<p>如果真是这样的话，软件开发就简单多了，只需要知道客户业务的资源，然后写写配置文件，最后执行了一个命令来生成应用程序就好了。不过如果你和我一样生活在现实世界的话，还是趁早放弃这种完全自动化的想法吧。</p>

<h3>复杂的业务</h3>

<p>现实世界的软件开发是复杂的，复杂性并不体现在具体的技术栈上。如Java，Spring，Docker，MySQL等等具体的技术是可以学习很快就熟练掌握的。软件真正复杂的部分，往往是业务本身，比如航空公司的超售策略，在超售之后Remove乘客的策略等；比如亚马逊的打折策略，物流策略等。</p>

<p>用软件模型如何优雅而合理的反应复杂的业务（以便在未来业务发生变化时可以更快速，更低错误的作出响应）本身也是复杂的。要将复杂的业务规则转换成软件模型是软件活动中非常重要的一环，也是信息传递往往会失真的一环。业务人员说的A可能被软件开发者理解成Z，反过来也一样。</p>

<p>举个例子，我给租来的房子买了1年的联通宽带。可是不多过了6个月后，房东想要卖房子把我赶了出来，在搬家之后，我需要通知联通公司帮我做移机服务。</p>

<p>如果纯粹从开发者的角度出发，写出来的代码可能看起来是这样的：</p>

<p>```java
public class Customer {</p>

<pre><code>private String address;

public void setAddress(String address) {
    this.address = address;
}

public String getAddress() {
    return this.address;
}
</code></pre>

<p>}
```</p>

<p>中规中矩，一个简单的值对象。作为对比，通过与领域专家的交流之后，写出来的代码会是这样：</p>

<p>```java
public class Customer {</p>

<pre><code>private String address;

    public void movingHome(String address) {
    this.address = address;
}
</code></pre>

<p>}
```</p>

<p>通过引入业务场景中的概念movingHome，代码就变得有了业务含义，除了可读性变强之外，这样的代码也便于和领域专家进行交流和讨论。Eric在领域驱动设计（Domain Drvien Design）中将统一语言视为实施DDD的先决条件。</p>

<h3>层次架构（三明治）</h3>

<blockquote><p>All problems in computer science can be solved by another level of indirection, except of course for the problem of too many indirections. -- David Wheeler</p></blockquote>

<p>上文提到，业务系统对外的呈现是对某种资源的管理，而且，现实世界里的业务系统往往要对多种资源进行管理。这些资源还会互相引用，互相交织。比如一个看板系统中的泳道、价值流、卡片等；LinkedIn中的公司，学校，个人，研究机构，项目，项目成员等，它们往往会有嵌套、依赖等关系。</p>

<p>为了管理庞大的资源种类和繁复的引用关系，人们自然而然的将做同样事情的代码放在了统一的地方。将不同职责的事物分类是人类在处理复杂问题时自然使用的一种方式，将复杂的、庞大的问题分解、降级成可以解决的问题，然后分而治之。</p>

<p>比如在实践中 ，展现部分的代码只负责将数据渲染出来，应用部分的代码只负责序列化/反序列化、组织并协调对业务服务的调用，数据访问层则负责屏蔽底层关系型数据库的差异，为上层提供数据。这就是层级架构的由来：上层的代码直接依赖于临近的下层，一般不对间接的下层产生依赖，层次之间通过精心设计的API来通信（依赖通常也是单向的）。</p>

<p>以现代的眼光来看，层次架构的出现似乎理所应当、自然而然，其实它也是经过了很多次的演进而来的。以JavaEE世界为例，早期人们会把应用程序中负责请求处理、文件IO、业务逻辑、结果生成都放在servlet中；后来发明了可以被Web容器翻译成servlet的JSP，这样数据和展现可以得到比较好的分离（当然中间还有一些迂回，比如JSTL、taglib的滥用又导致很多逻辑被泄露到了展现层）；数据存储则从JDBC演化到了各种ORM框架，最后再到JPA的大一统。</p>

<p>如果现在把一个Spring-Boot写的RESTful后端，和SSH（Spring-Struts-Hibernate）流行的年代的后端来做对比，除了代码量上会少很多以外，层次结构上基本上并无太大区别。不过当年在SSH中复杂的配置，比如大量的XML变成了代码中的注解，容器被内置到应用中，一些配置演变成了惯例，大致来看，应用的层次基本还是保留了：</p>

<ul>
<li>展现层</li>
<li>应用层</li>
<li>数据访问层</li>
</ul>


<p>在有些场景下，应用层内还可能划分出一个服务层。</p>

<p><img src="/images/2017/08/layered.png" alt="" /></p>

<h3>前后端分离</h3>

<p>随着智能设备的大爆发，移动端变成了展现层的主力，如何让应用程序很容易的适配新的展现层变成了新的挑战。这个新的挑战驱动出了前后端分离方式，即后端只提供数据（JSON或者XML），前端应用来展现这些数据。甚至很多时候，前端会成为一个独立的应用程序，有自己的MVC/MVP，只需要有一个HTTP后端就可以独立工作。</p>

<p><img src="/images/2017/08/multiple-backend-resized.png" alt="" /></p>

<p>前后端分离可以很好的解决多端消费者的问题，后端应用现在不区分前端的消费者到底是谁，它既可以是通过4G网络连接的iOS上的Native App，也可以是iMac桌面上的Chrome浏览器，还可以是Android上的猎豹浏览器。甚至它还可以是另一个后台的应用程序：总之，只要可以消费HTTP协议的文本就可以了！</p>

<p>这不得不说是一个非常大的进步，一旦后端应用基本稳定，频繁改变的用户界面不会影响后端的发布计划，手机用户的体验改进也与后端的API设计没有任何关系，似乎一切都变的美好起来了。</p>

<h3>业务与基础设施分离</h3>

<p>不过，如果有一个消费者（一个业务系统），它根本不使用HTTP协议怎么办？比如使用消息队列，或者自定义的Socket协议来进行通信，应用程序如何处理这种场景？</p>

<p>这种情况就好比你看到了这样一个函数：</p>

<p><code>java
httpService(request, response);
</code></p>

<p>作为程序员，自然会做一次抽象，将协议作为参数传入：</p>

<p><code>java
service(request, response, protocol);
</code></p>

<p>更进一步，protocol可以在service之外构造，并注入到应用中，这样代码就可以适配很多种协议（比如消息队列，或者其他自定义的Socket协议）。</p>

<p>比如：</p>

<p>```java
public interface Protocol {
  void transform(Request request, Response response);
}</p>

<p>public class HTTP implements Protocol {
}</p>

<p>public class MyProtocol implements Protocol {
}</p>

<p>public class Service {<br/>
   public Service(Protocol protocol) {</p>

<pre><code>    this.protocol = protocol;   
</code></pre>

<p>   }</p>

<p>   public void service(request, response) {</p>

<pre><code>    //business logic here
    protocol.transfrom(request, response);  
</code></pre>

<p>   }
}
```</p>

<p>类似的，对于数据的持久化，也可以使用同样的原则。对于代码中诸如这样的代码：</p>

<p><code>java
persisteToDatabase(data);
</code></p>

<p>在修改之后会变成：</p>

<p><code>java
persistenceTo(data, repository);
</code></p>

<p>应用依赖倒置原则，我们会写出这样的形式：</p>

<p>```java
public class DomainService {</p>

<pre><code>public BusinessLogic(Repository repository) {
      this.repository = repository
}

  public void perform() {
      //perform business logic
      repository.save(record);
}
</code></pre>

<p>}
```</p>

<p>对于Repository可能会有多种实现。根据不同的需求，我们可以自由的在各种实现中切换：</p>

<p><code>java
public class InMemoryRepository implements Repository {}
public class RDBMSRepository implements Repository {}
</code></p>

<p>这样业务逻辑和外围的传输协议、持久化机制、安全、审计等等都隔离开来了，应用程序不再依赖具体的传输细节，持久化细节，这些具体的实现细节反过来会依赖于应用程序。</p>

<p>通过将传统内置在层次架构中的数据库访问层、通信机制等部分的剥离，应用程序可以简单的分为内部和外部两大部分。内部是业务的核心，也就是<a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a>（Domain Driven Design）中强调的领域模型（其中包含领域服务，对业务概念的建立的模型等）；外部则是类似RESTful API，SOAP，<a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">AMQP</a>，或者数据库，内存，文件系统，以及自动化测试。</p>

<p>这种架构风格被称为六边形架构，也叫端口适配器架构。</p>

<h3>六边形架构（端口适配器）</h3>

<p>六边形架构最早由<a href="http://alistair.cockburn.us/Hexagonal+architecture">Alistair Cockburn</a> 提出。在DDD社区得到了发展和推广，然后IDDD（《实现领域驱动设计》）一书中，作者进行了比较深入的讨论。</p>

<p><img src="/images/2017/08/hexagonal-architecture-for-java-applications.jpg" alt="" /></p>

<p>图片来源: slideshare</p>

<p>简而言之，在六边形架构风格中，应用程序的内部（中间的橙色六边形）包含业务规则，基于业务规则的计算，领域对象，领域事件等。这部分是企业应用的核心：比如在线商店里什么样的商品可以打折，对那种类型的用户进行80%的折扣；取消一个正在执行的流水线会需要发生什么动作，删除一个已经被别的Job依赖的Stage又应该如何处理。</p>

<p>而外部的，也是我们平时最熟悉的诸如REST，SOAP，NoSQL，SQL，Message Queue等，都通过一个端口接入，然后在内外之间有一个适配器组成的层，它负责将不同端口来的数据进行转换，翻译成领域内部可以识别的概念（领域对象，领域事件等）。</p>

<p>内部不关心数据从何而来，不关心数据如何存储，不关心输出时JSON还是XML，事实上它对调用者一无所知，它可以处理的数据已经是经过适配器转换过的领域对象了。</p>

<h4>六边形架构的优点</h4>

<ul>
<li>业务领域的边界更加清晰</li>
<li>更好的可扩展性</li>
<li>对测试的友好支持</li>
<li>更容易实施DDD</li>
</ul>


<p>要新添加一种数据库的支持，或者需要将RESTful的应用扩展为支持SOAP，我们只需要定义一组端口-适配器即可，对于业务逻辑部分无需触碰，而且对既有的端口-适配器也不会有影响。</p>

<p>由于业务之外的一切都属于外围，所以应用程序是真的跑在了Web容器中还是一个Java进程中其实是无所谓的，这时候自动化测试会容易很多，因为测试的重点：业务逻辑和复杂的计算都是简单对象，也无需容器，数据库之类的环境问题，单元级别的测试就可以覆盖大部分的业务场景。</p>

<p>这种架构模式甚至可能影响到团队的组成，对业务有深入理解的业务专家和技术专家一起来完成核心业务领域的建模及编码，而外围的则可以交给新人或者干脆外包出去。</p>

<p>在很多情况下，从开发者的角度进行的假设都会在事后被证明是错误的。人们在预测软件未来演进方向时往往会做很多错误的决定。比如对关系型数据库的选用，对前端框架的选用，对中间件的选用等等，六边形架构可以很好的帮助我们避免这一点。</p>

<h3>小结</h3>

<p>软件的核心复杂度在于业务本身，我们需要对业务本身非常熟悉才可能正确的为业务建模。通过统一的语言我们可以编写出表意而且易于和业务人员交流的模型。</p>

<p>另一方面模型应该尽可能的和基础设施（比如JSON/XML的，数据库存储，通信机制等）分离开。这样一来可以很容易用mock的方式来解耦模型和基础设施，从而更容易测试和修改，二来我们的领域模型也更独立，更精简，在适应新的需求时修改也会更容易。</p>

<p>这里有一段<a href="https://github.com/abruzzi/ddd-demo">很微小的代码</a>，有兴趣的同学可以看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实施领域驱动设计的正确姿势]]></title>
    <link href="http://abruzzi.github.com/2017/01/why-ddd-is-so-hard/"/>
    <updated>2017-01-11T00:48:00+08:00</updated>
    <id>http://abruzzi.github.com/2017/01/why-ddd-is-so-hard</id>
    <content type="html"><![CDATA[<h2>DDD为什么很难实施</h2>

<p>领域驱动设计（<a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a>）的概念已经被发明了十多年，而且也不乏相关著作，但是业界宣称自己应用了DDD原则的项目，软件却鲜有耳闻。随着微服务架构的流行，DDD在边界识别，服务划分等方面不断被提及，作为一种应对复杂软件的方法论，似乎又被重视起来了。</p>

<p>那么，为什么这个听起来很靠谱的方法论实际上很难实施呢？我们以DDD创始人<code>Eric Evans</code>的经典书籍《领域驱动设计：软件核心复杂性应对之道》为例，分析一下，可能的原因是这样的：</p>

<ul>
<li>新概念数量比较多</li>
<li>战术/战略都有所涉及</li>
<li>不同层次的概念混杂（除了设计模式之外，还有架构风格的讨论）在一起</li>
</ul>


<h3>繁复而混杂的概念</h3>

<p>领域，子域，核心子域，通用子域，实体，值对象，领域服务，应用服务，领域事件，统一语言，衔接上下文，遵循者等等。DDD中有着大量的新概念，而且这些概念有些是技术相关的，有些是问题相关的，交织在一起之后，很难理清头绪。</p>

<p><img src="/images/2017/01/ddd-full-diagram-resized.png" alt="DDD Full" /></p>

<p>DDD中的模式又分为战术的和战略的两大部分，有很多团队应用了战术相关的，比如实体，值对象，领域服务，仓库等模式，代码看似DDD，实则与DDD强调的<code>以领域为中心</code>相去甚远，陷入了开发者太过于关注技术本身的老路上，这种现象还有个专门的名词，叫<a href="http://stackoverflow.com/questions/4196668/domain-driven-design-ddd-pitfalls">DDD-Lite</a>。</p>

<h3>不同的思维方式要求</h3>

<p>DDD要求读者既有具体Coding的技能，有需要跳出圈外，以架构师的角度来审视整个系统。DDD需要开发者以一个全新的视角去认识软件开发，强调对业务流程的熟悉，强调与领域专家一起协作，强调软件的表达能力和进化能力。而这些思维方式的转变，都有很大阻力的（想想从面向对象世界切换到函数式编程，再到响应式函数编程的切换）。</p>

<blockquote><p>It should be noted that no ethically-trained software engineer would ever consent to write a DestroyBaghdad procedure. Basic professional ethics would instead require him to write a DestroyCity procedure, to which Baghdad could be given as a parameter.  -- Nathaniel Borenstein</p></blockquote>

<p>我自己在工作的前4年，非常反感业务，认为<code>case by case</code>的业务流程会严重影响我的代码的通用性。然而事实是，纯粹通用的代码是不存在的。毕竟，诸如IoC容器，Web等基础设施已经相当完善，完全无需我们重复发明轮子。而作为应用开发人员，更重要的是在充分理解业务的前提下，写出易于维护，易于扩展，可以更快速响应业务变化的代码。</p>

<p>正因为如此，DDD在一定程度上会让程序员感到不适，它太强调领域了，而领域又是独一无二的，每个公司的每个系统都有其独立性，这就要求你的代码可能没法做到<code>纯粹</code>。</p>

<h2>正确姿势</h2>

<p>要解决上面提到的这些问题，正确的实施DDD来指导实际的开发工作，需要至少做到这样几个事情。首先，明确分清<code>问题</code>和<code>方案</code>（这是初学DDD者最容易犯的错误）；其次，转变思维方式，将软件开发的重心放在梳理并明确业务需求上，而不是代码逻辑上；最后，需要应用一些合理的工程实践来促成DDD-Lite的落地。</p>

<h3>分清问题和解决方案</h3>

<p>我们说领域（子域，通用子域，支撑子域等）的时候，是在讨论问题域，即定义我们要解决的问题是什么。而说到限界上下文，聚合，实体，仓库则是在讨论解决方案部分，人们很容易将两者搞混。</p>

<p>在电商的领域中，一些典型的问题是：</p>

<ul>
<li>如何获得更多的客户</li>
<li>如何让客户更快速的找到自己想要的商品</li>
<li>如何准确的推荐相关产品给客户</li>
<li>用户如何付费</li>
</ul>


<p>要解决这些问题，人们可能会开发出来一个软件系统，也可能会用手工的流程，也可能是混合模式。同样，一些具体的解决方案的例子是：</p>

<ul>
<li>商品促销子系统</li>
<li>全文搜索系统</li>
<li>推荐子系统</li>
<li>支付平台</li>
</ul>


<p>显然，解决方案是在问题定义之后才产生的，而定义问题本身是一件<code>开发人员</code>不擅长的工作，这也是为什么DDD特别强调领域专家的原因。实施DDD需要从领域专家，技术专家的深入合作中，得出一个模型。其实，DDD的核心就是要解决一个问题：建立领域问题的软件模型，这个模型需要满足这样几个条件：</p>

<ul>
<li>能准确表达领域概念，业务流程等（无需经过翻译）</li>
<li>容易演进</li>
<li>每个领域有自己的解决方案</li>
</ul>


<h4>DDD战略模式</h4>

<p><img src="/images/2017/01/problem-and-domain-resized.png" alt="" /></p>

<p>这是Vaughn Vernon的著作<a href="https://vaughnvernon.co/?page_id=168">《Implement Domain Driven Design》</a>中的一张图，整个外边的大圈是业务对应的领域（问题域），这个大的圈被虚线划分成了很多小的子域（依然是问题域，不过每个子域要解决的问题都不相同），子域有很多类型，比如核心子域，支撑子域，通用子域等。对应的，每个域都可能有自己的<code>限界上下文</code>，上下文之间有不同类型的<code>上下文映射</code>模式。</p>

<p>子域的边界由<code>通用语言</code>来划分，也就是说，每个子域有自己区别于其他子域的语言（也就是自己的业务概念，业务规则）。比如财务系统中，提及的概念如毛利，净利率，投入回报比，发票，报销等等，与招聘系统中的候选人，面试，宣讲，校招等等都大不相同。</p>

<p>正确的应用DDD的战略模式来帮助问题的识别和理解，比单纯的应用<code>DDD-Lite</code>要重要得多。</p>

<ul>
<li>通用语言</li>
<li>限界上下文</li>
<li>上下文映射</li>
</ul>


<h3>思维方式转变</h3>

<p>开发者要将思维方式转变成<code>以业务规则优先</code>是一件非常困难的事儿。毕竟经过了多年的训练，特别是抽象思维的训练，开发者很喜欢<code>通用</code>的技巧，比如管道-过滤器，线程池，解析器等等。然而业务规则往往是具体的，而且很多时候，需求变化的方向会破坏掉开发者精心构筑的抽象体系。</p>

<p>然而个思维方式的转变正是成功实施DDD关键所在：愿意和业务人员一起理解沟通，理解业务是实施DDD的第一步。其实每个行业的业务都有很多有意思的地方，我在ThoughtWorks，由于工作性质的原因，可以接触到很多不同的客户，不同的业务。每个项目上，我都很乐于去向业务人员学习，业务在现实世界中是如何运作的：房产中介如何打广告，房东如何付费，房地产广告平台如何从中盈利；无线基站如何建设，工人如何去施工，甚至基站铁塔如何避雷，如何防雨；保单的类型，付费年限，如何分红等等。</p>

<p>每个不同的业务都可以学到很多人们在解决问题时发明出来的新思路，新方法。这些思路和方法未尝不可以反过来应用在软件开发上。</p>

<h3>工程实践</h3>

<ul>
<li>敏捷方法</li>
<li>自动化测试</li>
</ul>


<h4>敏捷方法</h4>

<p>其实早在敏捷宣言产生的时代，人们就已经发现了<code>客户合作胜过合同谈判</code>。与客户保持高度的合作（最好是业务人员就坐在开发人员旁边），实时的反馈收集并根据反馈进行方向调整都是敏捷方法中倡导的。而DDD更进一步，需要和业务人员一起，定义出领域模型的原型，包括一些白板上的图和代码原型，并根据敏捷方法进行持续的演进。</p>

<p>比如这里提出的一些实践可以比较好的帮助你来实施<code>DDD</code>:</p>

<ul>
<li>需求的Kickoff（BA，开发，QA一起来明确需求的含义）</li>
<li>结对编程（不限于开发之间的结对，也可能是不同角色间的结对）</li>
<li>代码审视</li>
<li>代码重构</li>
<li>Mini Showcase</li>
<li><del>回顾会议</del></li>
</ul>


<p>通过敏捷实践，我们可以建立起快速的<code>反馈机制</code>，和对变化的响应能力，冗长的流程和不透明的价值流向会导致很多问题。</p>

<p>如果我们承认自己不是全知全能的，需要不断地通过学习来不断的理解业务，那么重构就编程了一件自然而言地、必须做的事情了。通过重构，我们将之前模糊的业务概念清晰起来，将缺失的概念补齐，将代码中的华为到消除。</p>

<p><code>Mini Showcase</code>强调开发者在完成需求的过程中，不定期的与BA，QA等角色交流、确认。如果有理解不正确的地方，可以尽快发现，然后解决。</p>

<h4>自动化测试</h4>

<p>另一方面，要保证模型的可理解性，除了<code>Clean Code</code>的一些原则之外，自动化测试也是一个必不可少的工程实践。领域模型在<strong>意图表现</strong>上需要做到极致，而单元测试/功能测试则以用例的方式将模型<code>用起来</code>。这要求开发者使用<code>实例化需求</code>，<code>行为驱动开发</code>等方法编写实践作支撑。</p>

<p>测试不是为了覆盖率，也不能仅仅只是为了自动化一些手工的工作。在DDD的上下文中，自动化测试更多的是完整表达业务意图的用例。</p>

<h5>实例化需求</h5>

<p>测试需要以实际用户的角度来编写，并以<code>实例</code>的方式描述。这样即使自动化做不了，这个<code>实例</code>依然是一个很好的文档。当然，为了保证这个文档不过期（和代码实现不匹配），还是强烈建议可以将其自动化起来。</p>

<p>比如这里有个例子，人事经理想要找一些开发人员来分配到项目上，这个找人的过程有两条很简单的规则：</p>

<ul>
<li>开发人员的技能要和项目的要求匹配</li>
<li>开发人员当前不在项目上（比如当前项目为Beach即为空闲状态）</li>
</ul>


<p>用<code>Cucumber</code>写的测试看起来是这样的：</p>

<p>```
Feature: Find employee by skills
  As a staffing manager
  I want to find employee by skills
  So that I know whether we have the staff or we need to hire new ones</p>

<p>  Background: persona</p>

<pre><code>Given we have the following employees:
  | name   | currentProject | role | skills    |
  | Juntao | Consulting     | Dev  | Java,Ruby |
  | Yanyu  | Beach          | Dev  | Ruby      |
  | Jiawei | Beach          | Dev  | Java,Ruby |
  | Momo   | Beach          | Dev  | Python    |
</code></pre>

<p>  Scenario: Search by skills</p>

<pre><code>Given I have a project which require "Ruby" as language
When I search staff by skill
Then I should get the following names:
  | Yanyu  |
  | Jiawei |
</code></pre>

<p>```</p>

<h4>迭代开发</h4>

<p>软件开发本身就具有很高的复杂度，正如我在<a href="http://icodeit.org/2017/01/why-software-is-complex/">上一篇博客</a>里提到的，在项目启动之初，无论是业务专家还是开发者，对软件系统的知识都是非常有限的。迭代式的开发方式更加契合这种复杂度很高的活动。业务人员和开发一起，在建模、实现的过程中会对领域进行深入的学习，并产生新的知识。反过来这些新的知识又会影响模型的进一步进化。</p>

<p><img src="/images/2015/08/waterfall-v-agile-about.gif" alt="" /></p>

<p>迭代开发的方式可以帮助我们将这个复杂度很高的过程变得平缓一些，而且从一个个小的迭代中学习，并根据反馈来指导新的方向，可以快速的帮助团队建立信心，同时对业务的理解更为深入，使得整个开发过程越来越平顺。</p>

<h2>小结</h2>

<p>简而言之，要顺利实施DDD，需要至少做到：</p>

<ul>
<li>明确概念，分清<code>问题域</code>和<code>解决方案域</code>，应用DDD的战略模式</li>
<li>转变思维方式，为<code>业务梳理和理解</code>赋予最高的优先级</li>
<li>通过<code>工程实践</code>来确保落地</li>
</ul>


<p>当然，如何来实施战略模式（通用语言，限界上下文，上下文映射）也需要一些工程实践的帮助，我会在另外一篇文章中详细讨论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件开发为什么很难]]></title>
    <link href="http://abruzzi.github.com/2017/01/why-software-is-complex/"/>
    <updated>2017-01-06T18:06:00+08:00</updated>
    <id>http://abruzzi.github.com/2017/01/why-software-is-complex</id>
    <content type="html"><![CDATA[<h2>问题的分类</h2>

<p>最初在1999年被Dave Snowden开发出来的<strong><a href="https://en.wikipedia.org/wiki/Cynefin_framework">Cynefin</a>框架</strong>尝试把世界上的问题划分到了5个域中（大类）：</p>

<p><img src="/images/2017/01/cynefin-resized.png" alt="" /></p>

<ul>
<li>简单（Simple）问题，该域中的因果关系非常明显，解决这些问题的方法是 <code>感知-分类-响应</code>（Sense-Categorise-Respond），有对应的<strong>最佳</strong>实践</li>
<li>复合（Complicated）问题，该域中的因果关系需要分析，或者需要一些其他形式的调查和/或专业知识的应用，解决这些问题的方法是<code>感知-分析-响应</code>（Sense-Analyze-Respond），有对应的<strong>好的</strong>实践</li>
<li>复杂（Complex）问题，该域中的因果关系仅能够从回顾中发现，解决这些问题的方法是<code>探索-感知-响应</code>（Probe-Sense-Respond），我们能够感知<strong>涌现</strong>实践（emergent practice）</li>
<li>混乱（Chaotic）问题，该域中没有系统级别的因果关系，方法是<code>行动-感知-响应</code>（Act-Sense-Respond），我们能够发现<strong>新颖</strong>实践（novel practice）</li>
<li>失序（Disorder）问题，该域中没有因果关系，不可感知，其中的问题也无法被解决</li>
</ul>


<p>显然，软件开发过程更多地是一个复杂（Complex）问题。在一个产品被开发出来之前，不确定性非常高，团队（包括业务人员和技术人员）对产品的知识也是最少的，而且需要大量的学习和尝试才可以明确下一步可能的方向。不幸的是，很多时候我们需要在一开始（不确定性最高的时候）就为项目做计划。这种从传统行业中非常适合的方法在软件开发领域不再适用，这也是敏捷开发、精益等方法论在软件开发中更加适合的原因。</p>

<p><img src="/images/2017/01/learning-curve-resized.png" alt="" /></p>

<p><em>来源：http://alistair.cockburn.us/Disciplined+Learning</em></p>

<p>正因为软件开发事实上是一个学习的过程，我们学习到的新知识反过来会帮助我们对问题的定义，从而带来变化。这里的变化可能来自两个方向：</p>

<ul>
<li>功能性</li>
<li>非功能性</li>
</ul>


<p>功能性的变化指随着对业务的深入理解、或者已有业务规则为了匹配市场而产生的变化。比如支付方式由传统的货到付款变成了网银付款，又变成了微信支付、支付宝扫码等等。一个原始的电商平台仅仅提供基本的购物服务，但是后来可以根据已有数据产生推荐商品，从来带来更大的流量。这些变化需要体现在已有的代码中，而对代码的修改往往是牵一发而动全身。</p>

<p>非功能性的变化是指随着业务的发展，用户规模的增加，数据量的变化，安全认知的变化等产生的新的需求。比如100个用户的时候无需考虑性能问题，但是100万用户的时候，性能就变成了必须重视的问题。天气预报应用的数据安全性和网络银行的数据安全性要求也大不相同。</p>

<p><em>而在业务提出一个需求的时候，往往只是一个简化过的版本。</em></p>

<h3>非功能性复杂性</h3>

<p><img src="/images/2017/01/ui-resized.png" alt="" /></p>

<p><em>来源：https://d13yacurqjgara.cloudfront.net/users/749341/screenshots/2228676/uielements_day021_dribbbleinvites.jpg</em></p>

<p>这是一个经过设计师精确设计的界面，在它被设计出来之前，用户事实上无法准确的描述出它。设计过程中经历了很多的诸如：</p>

<ul>
<li>线框图</li>
<li>颜色的确定</li>
<li>交互的动画</li>
<li>信息层次</li>
</ul>


<p>往复多次之后，界面确定了。在没有仔细思考使用场景的时候，开发会误以为这个功能非常简单。但是如果你是一个有经验的开发者，很快会想到的一些问题是：</p>

<ul>
<li>在宽屏下如何展示</li>
<li>在平板上如何展示</li>
<li>在手机上如何展示</li>
<li>即使仅仅支持桌面版，跨浏览器要考虑吗？支持哪些版本？</li>
<li>有些UI效果在低版本的浏览器上不工作，需要Shim技术</li>
</ul>


<p>除此之外，依然有大量的其他细节需要考虑：</p>

<ul>
<li>性能要求是什么样的？</li>
<li>安全性要考虑吗？</li>
<li>在网络环境不好的时候，要不要fallback到基础视图？</li>
<li>既然涉及发送邀请函，送达率如何保证</li>
<li>与外部邮件服务提供商集成时的工作量</li>
</ul>


<p>等等。这些隐含的信息需要被充分挖掘出来，然后开发者才能做一个合理的评估，而且这还只是开始。一旦进入开发阶段，很多之前没有考虑到的细节开始涌现：字体的选用，字号，字体颜色，元素间的间距等等，如何测试邮件是否发送成功，多个角色之间的conversation又会消耗很多时间。</p>

<h3>需求的变化方向</h3>

<p>作为程序员，有一天你被要求写一段代码，这段代码需要完成一件很简单的事：</p>

<ol>
<li>打印"Hello, world"5次</li>
</ol>


<p>很容易嘛，你想，然后顺手就写下了下面这几行代码：</p>

<p><code>js
print("Hello, world")
print("Hello, world")
print("Hello, world")
print("Hello, world")
print("Hello, world")
</code></p>

<p>不过，拷贝粘贴看起来有点低端，你做了一个微小的改动：</p>

<p>```js
for(var i = 0; i &lt; 5; i++) {</p>

<pre><code>print("Hello, world")
</code></pre>

<p>}
```</p>

<p>看起来还不错，老板的需求又变成了打印"Goodbye, world"5次。既然是打印<code>不同</code>的消息，那何不把消息作为参数呢？</p>

<p>```js
function printMessage(message) {</p>

<pre><code>for(i = 0; i &lt; 5; i++) {
    print(message);
}
</code></pre>

<p>}</p>

<p>printMessage("Hello, world")
printMessage("Goodbye, world")
```</p>

<p>有了这个函数，你可以打印<code>任意消息</code>5次了。老板又一次改变了需求：打印"Hello, world"13次（没人知道为什么是13）。既然次数也变化了，那么一个可能是将<code>次数</code>作为参数传入：</p>

<p>```js
function printMessage(count, message) {</p>

<pre><code>for(i = 0; i &lt; count; i++) {
    print(message);
}
</code></pre>

<p>}</p>

<p>printMessage(13, "Hello, world");
printMessage(5, "Goodbye, world");
```</p>

<p>完美，这就是抽象的魅力。有了这个函数，你可以将任意消息打印任意次数。不过老板是永远无法满足的，就在这次需求变化之后的第二天，他的需求又变了：不但要将"Hello, world"打印到控制台，还要将其计入日志。</p>

<p>没办法，通过搜索<code>JavaScript</code>的文档，你发现了一个叫做高阶函数的东东：<strong>函数可以作为参数传入另一个参数！</strong></p>

<p>```js
function log(message) {</p>

<pre><code>system.log(message);
</code></pre>

<p>}</p>

<p>function doMessage(count, message, action) {</p>

<pre><code>for(i = 0; i &lt; count; i++) {
    action(message);
}
</code></pre>

<p>}</p>

<p>doMessage(5, "Hello, world", print);
doMessage(5, "Hello, world", log);
```</p>

<p>这下厉害了，我们可以对任意消息，做任意次的任意动作！再回过头来看看那个最开始的需求：</p>

<ol>
<li>打印"Hello, world"5次</li>
</ol>


<p>稍微分割一下这句话：<strong>打印，"Hello, world"，5次</strong>，可以看到，这三个元素最后都变成了可以变化的点，软件开发很多时候正是如此，需求可能在任意<em>可能变化</em>的方向上变化。这也是各种软件开发原则尝试解决的问题：如何写出更容易扩展，更容易响应变化的代码来。</p>

<h3>小节</h3>

<p>软件的复杂性来自于大量的<strong>不确定性</strong>，而这个不确定性事实上是无法避免的，而且每个软件都是独一无二的。另一方面，软件的需求会以各种方式来变化，而且往往会以开发者没有预料到的方向。比如上面这个小例子中看到的，最后的需求可能会变成将消息以短信的方式发送给手机号以<code>185</code>开头的用户手机上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[无他，但手熟尔]]></title>
    <link href="http://abruzzi.github.com/2016/05/practise-in-programming/"/>
    <updated>2016-05-26T22:56:00+08:00</updated>
    <id>http://abruzzi.github.com/2016/05/practise-in-programming</id>
    <content type="html"><![CDATA[<h2>高效幻象</h2>

<p>通过对自己的行为观察，我发现在很多时候，我以为我掌握了的知识和技能其实并不牢靠。我引以为豪的<code>高效</code>其实犹如一个彩色的肥皂泡，轻轻一碰就会破碎，散落一地。</p>

<h3>你可能只是精通搜索</h3>

<p>我们现在所处的时代，信息爆炸，每个人每天都会接触，阅读很多的信息，快速消费，快速遗忘。那种每天早上起来如同皇帝批阅奏折的、虚假的误以为掌握知识的错觉，驱动我们进入一个恶性循环。</p>

<p>即使在我们真的打算解决问题，进行主动学习时，更多的也只是在熟练使用搜索引擎而已（在一个领域待久了，你所使用的关键字准确度自然要比新人高一些，仅此而已）。精通了高效率搜索之后，你会产生一种你<code>精通搜索到的知识本身</code>的<strong>错觉</strong>。</p>

<p><img src="/images/2016/05/stackoverflow-oreilly.png" alt="stack overflow" /></p>

<h4>如何写一个Shell脚本</h4>

<p>在写博客的时候，我通常会在文章中配图。图片一般会放在一个有固定格式的目录中，比如现在是2016年5月，我本地就会有一个名为<code>$BLOG_HOME/images/2016/05</code>的目录。由于使用的是<code>markdown</code>，在插入图片时我就不得不输入完整的图片路径，如：<code>/images/2016/05/stack-overflow.png</code>。但是我又不太记得路径中的<code>images</code>是单数(<code>image</code>)还是复数(<code>images</code>)，而且图片格式又可能是<code>jpg</code>,<code>jpeg</code>,<code>gif</code>或者<code>png</code>，我也经常会搞错，这会导致图片无法正确显示。另外，放入该目录的原始文件尺寸有可能比较大，我通常需要将其缩放成800像素宽（长度无所谓，因为文章总是要从上往下阅读）。</p>

<p>为了自动化这个步骤，我写了一个小的Shell脚本。当你输入一个文件名如：<code>stack-overflow.png</code>后，它会缩放这个文件到800像素宽，结果是一个新的图片文件，命名为<code>stack-overflow-resized.png</code>，另外它将符合<code>markdown</code>语法的文件路径拷贝到剪贴板里：<code>/images/2016/05/stack-overflow-resized.png</code>，这样我在文章正文中只需要用<code>Command+V</code>粘贴就可以了。</p>

<p>有了思路，写起来就很容易了。缩放图片的命令我是知道的：</p>

<p><code>sh
$ convert -resize 800 stack-overflow.png stack-overflow-resized.png
</code></p>

<p>但是要在文件明上加入<code>-resized</code>，需要分割文件名和文件扩展名，在<code>Bash</code>里如何做到这一点呢？Google一下：</p>

<p>```sh
FULLFILE=$1</p>

<p>FILENAME=$(basename "$FULLFILE")
EXTENSION="${FILENAME##<em>.}"
FILENAME="${FILENAME%.</em>}"</p>

<p>convert -resize 800 $FULLFILE $FILENAME-resized.EXTENSION
```</p>

<p>难看是有点难看，不过还是可以工作的。接下来是按照当前日期生成完整路径，<code>date</code>命令我是知道的，而且我知道它的<code>format</code>格式很复杂，而且跟<code>JavaScript</code>里Date对象的<code>format</code>又不太一样（事实上，世界上有多少种日期工具，基本上就有多少种格式）。再Google一下：</p>

<p><code>sh
$ date +"/images/%Y/%m/"
</code></p>

<p>最后一步将路径拷贝到剪贴板也容易，Mac下的<code>pbcopy</code>我也会用：<code>echo</code>一下字符串变量，再管道到<code>pbcopy</code>即可：</p>

<p><code>sh
PREFIX=`date +"/images/%Y/%m/"`
echo "$PREFIX$FILENAME-resized.EXTENSION" | pbcopy
</code></p>

<p>但是将内容粘贴到<code>markdown</code>里之后，我发现这个脚本多了一个换行。我想这个应该是<code>echo</code>自己的行为吧，会给字符串自动加上一个换行符。Google一下，发现加上<code>-n</code>参数就可以解决这个问题。</p>

<p>好了，完整的脚本写好了：</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>FULLFILE=$1</p>

<p>FILENAME=$(basename "$FULLFILE")
EXTENSION="${FILENAME##<em>.}"
FILENAME="${FILENAME%.</em>}"</p>

<p>convert -resize 800 $FULLFILE $FILENAME-resized.EXTENSION</p>

<p>PREFIX=<code>date +"/images/%Y/%m/"</code>
echo -n "$PREFIX$FILENAME-resized.EXTENSION" | pbcopy
```</p>

<p>嗯，还不错，整个过程中就用了我十几分钟时间而已，以后我在写博客时插入图片就方便多了！</p>

<p>不过等等，好像有点不对劲儿，我回过头来看了看这段脚本：7行代码只有1行是我独立写的！没有<code>Google</code>的话，查看<code>man date</code>和<code>man echo</code>也可以解决其中一部分问题，不过文件扩展名部分估计又得花较长时间。</p>

<p>仔细分析一下，之前的成就感荡然无存。</p>

<h4>更多的例子</h4>

<p>我相信，过几周我再来写这样一个简单的脚本时，上面那一幕还是会出现。开发者的IDE的外延已经将<code>Google</code>和<code>Stack Overflow</code>集成了。很难想象没有这两个IDE的<code>插件</code>我要怎样工作。</p>

<p>其实除此之外，日常工作中这样的事情每时每刻都在发生：</p>

<ol>
<li>Ansible里如何创建一个给用户<code>robot</code>读写权限的目录？</li>
<li>Python 3中启动简单HTTPServer的命令是？</li>
<li>Spring Boot的Gradle String是？</li>
<li>Mongodb中如何为用户<code>robot</code>授权？</li>
<li>Gulp里一个Task依赖另一个Task怎么写？</li>
</ol>


<p>等等等等，这个列表可以根据你的技术栈，偏向前端/后端的不同而不同，但是相同的是在<code>Google</code>和<code>Stack Overflow</code>上搜索，阅读会浪费很多时间，而这些本来都是可以避免的。</p>

<h3>肌肉记忆</h3>

<p>大脑在对信息存储上有很高级的设计，如果某件事情不值得记忆，大脑会自动过滤掉（比如我们很容易获得的搜索结果）。而对于那些频繁发生，计算结果又不会变化的信息，大脑会将其下放到“更低级别”的神经去记忆。比如各种运动中的肌肉记忆，习武之人梦寐以求的“拳拳服膺”，“不期然而然，莫知之而至”。</p>

<p>这里也有两个小例子：</p>

<h4>一个C语言的小程序</h4>

<p>上周末我买了一个茶轴的机械键盘，打开包装之后我很兴奋，赶紧插在我的笔记本上，打开一个编辑器，心说敲一些代码体验一下。几秒钟后，我发现敲出来的是：</p>

<p>```c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<p>int main(int argc, char *argv[]) {</p>

<pre><code>if(argc != 3) {
    fprintf(stderr, "Usage: %s ip port\n", argv[0]);
    return -1;
}

fprintf(stdout, "Connecting to %s %d\n", argv[1], atoi(argv[2]));

return 0;
</code></pre>

<p>}
```</p>

<p>然后在命令行里</p>

<p>```sh
$ gcc -o hello hello.c
$ ./hello
Usage: ./hello ip port</p>

<p>$ ./hello 10.180.1.1 9999
Connecting to 10.180.1.1 9999
```</p>

<p>整个过程极为流畅，上一次开发C代码已经是4年多前了。也就是说，我的手指已经记下了所有的这些命令：</p>

<ol>
<li>Linux下<code>main</code>函数的convention</li>
<li><code>fprintf</code>的签名</li>
<li><code>stderr/stdout</code>用法的区分</li>
<li><code>main</code>函数不同场景的返回值</li>
<li><code>gcc</code>命令的用法</li>
</ol>


<p>另外一个小例子是<code>vim</code>编辑器。我使用<code>vim</code>已经有很多年了，现在在任何一个Linux服务器上，编辑那些<code>/etc/nginx/nginx.conf</code>之类的配置文件时，手指就会<code>自动</code>的找到快捷键，<code>自动</code>的完成搜索，替换，跳转等等操作。</p>

<h3>刻意练习</h3>

<p>对比这两个例子，一方面我惊讶于自己目前对搜索引擎、<code>Stack Overflow</code>的依赖；一方面惊讶于<code>肌肉记忆力</code>的深远和神奇。结合一下两者，我发现自己的开发效率有望得到很大的提升。</p>

<p>比如上面列出的那些略显尴尬的问题，如果我的手指可以<code>自动</code>的敲出这些答案，那么节省下的搜索、等待、阅读的时间就可以用来干别的事情，比如跑步啊，骑车啊，去驾校学车被教练骂啊等等，总之，去过自己的生活。</p>

<p>这方面的书籍，博客都已经有很多，比如我们在ThoughtWorks University里实践的<code>Code Kata</code>，<code>JavaScript Dojo</code>，<code>TDD Dojo</code>之类，都已经证明其有效性。</p>

<p>如果你打算做一些相关的练习，从<code>Kata</code>开始是一个不错的选择。每个<code>Kata</code>都包含一个简单的编程问题，你需要不断的去练习它（同一个题目做20遍，50遍等）。前几次你是在解决问题本身，慢慢就会变成在审视自己的编程习惯，发现并改进（比如快捷键的使用，语法的熟悉程度等等），这样在实际工作中你会以外的发现自己的速度变快了，而且对于重构的信心会变大很多。其实道理也很简单：如果你总是赶着deadline来完成任务，怎么会有时间来做优化呢？</p>

<p>这里有一些参考资料和<code>Kata</code>的题目，可供参考：</p>

<ul>
<li><a href="https://sites.google.com/site/steveyegge2/practicing-programming">Practicing Programming</a></li>
<li><a href="https://blog.codinghorror.com/the-ultimate-code-kata/">The Ultimate Code Kata</a></li>
<li><a href="http://codekata.com/">一些Kata的题目</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
