<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: effective | I code it]]></title>
  <link href="http://abruzzi.github.com/category/effective/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2015-06-15T12:48:55+10:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[underscore.js中的集合操作]]></title>
    <link href="http://abruzzi.github.com/2015/02/collection-operations-in-underscore-dot-js/"/>
    <updated>2015-02-21T12:48:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/02/collection-operations-in-underscore-dot-js</id>
    <content type="html"><![CDATA[<h2>underscore.js中的集合操作</h2>

<p><a href="icodeit.org/2015/02/functional-programming-in-underscore-dot-js/">书接前文</a>，我们在上一篇中将一个文本划分成了单词的数组，并统计了每个单词出现的频率。现在我们需要将排行前10的单词找出来。那么第一步就是将所有单词按照频率排序，然后将这个集合的前10个拿出来。</p>

<p><code>underscore.js</code>为集合提供了丰富的API，这与函数式编程的鼻祖<code>LISP</code>语言有着直接的继承关系。<code>LISP</code>围绕着<code>List</code>提供了的众多函数。</p>

<h3>排序</h3>

<p>```js
var contacts = [</p>

<pre><code>{
    "name": "Juntao",
    "age": 29
},
{
    "name": "Abruzzi",
    "age": 30
},
{
    "name": "Sara",
    "age": 29
}
</code></pre>

<p>];
```</p>

<p>比如想要将上面这个集合按照<code>age</code>排序，可以使用<code>sortBy</code>函数：</p>

<p><code>js
var sorted = _(contacts).sortBy("age");
</code></p>

<p>默认的<code>sortBy</code>的返回值是按照升序排列的，不过JavaScript的数组原生就有reverse的API用以翻转数组，因此如果要得到降序的排列，只需要：</p>

<p><code>js
var sorted = _(contacts).sortBy("age").reverse();
</code></p>

<h3>抽取</h3>

<p>有时候，我们需要从众多的信息中抽取自己关心的，比如上例中的<code>contacts</code>集合，我们在界面上仅仅需要<code>name</code>属性组成的集合，这时候可以通过<code>pluck</code>来完成抽取：</p>

<p><code>js
var names = _.pluck(contacts, "name");
//["juntao", "abruzzi", "sara"]
</code></p>

<p><code>underscore.js</code>默认的<code>pluck</code>只能抽取一层，如果遇到下面这种场景：</p>

<p>```js
var contacts = [</p>

<pre><code>{
    "name": "Juntao",
    "age": 29,
    "address": {
        "street": "Dengling Rd"
    }
},
{
    "name": "Sara",
    "age": 29,
    "address": {
        "street": "Zhangba 4th Rd"
    }
}
</code></pre>

<p>]
```</p>

<p>想要抽取<code>address.street</code>就无能为力了，不过我们可以很容易的增强一下<code>pluck</code>的功能。先来写一个小测试：</p>

<p>```js
it("deep pluck", function() {</p>

<pre><code>var contacts = [
    {
        "name": "Juntao",
        "age": 29,
        "address": {
            "street": "Dengling Rd"
        }
    }
];

var result = deeppluck(contacts, "address.street");

expect(result[0]).toEqual("Dengling Rd");
</code></pre>

<p>});
```</p>

<p>然后是实现：</p>

<p>```js
function deeppluck(origin, property) {</p>

<pre><code>if (property.indexOf(".") &lt; 0) {
    return _.pluck(origin, property)
}

var object = _.clone(origin);
var chain = property.split(".");

_(chain).each(function(key) {
    object = _.pluck(object, key);
});

return object;
</code></pre>

<p>}
```</p>

<p>这样就可以深度的抽取了：</p>

<p><code>js
deeppluck(contacts, "address.street");
//["Dengling Rd", "Zhangba 4th Rd"]
</code></p>

<p><code>underscore</code>提供了类似于<code>Ruby</code>中的<code>mixin</code>扩展，这样就可以将我们自定义的函数添加到<code>underscore</code>中了。扩展方法很容易，只需要为<code>mixin</code>传入一个键值对(<code>函数名：函数</code>)即可：</p>

<p>```js
_.mixin({</p>

<pre><code>deeppluck: function(origin, property) {
    if (property.indexOf(".") &lt; 0) {
        return _.pluck(origin, property)
    }

    var object = _.clone(origin);
    var chain = property.split(".");

    _(chain).each(function(key) {
        object = _.pluck(object, key);
    });

    return object;
}
</code></pre>

<p>});
```</p>

<p>这样<code>deeppluck</code>就和其他<code>underscore</code>内置的API一样被使用了：</p>

<p>```js
_.deeppluck(contacts, "address.street");
//["Dengling Rd", "Zhangba 4th Rd"]</p>

<p>_(contacts).deeppluck("address.street");
//["Dengling Rd", "Zhangba 4th Rd"]
```</p>

<h3>按照频率排序单词列表</h3>

<p>好了，有了这些基础知识，我们来完成今天的变成任务吧。我们昨天得到的数据格式是这样的：</p>

<p>```json
{</p>

<pre><code>"drools": 3,
"extends": 2,
"rete": 2,
"by": 3,
"optimizing": 1,
"the": 23,
"propagation": 1,
"from": 3,
"objecttypenode": 2,
"to": 11,
"alphanode": 5,
"using": 1,
"hashing": 1,
"each": 4,
"time": 1,
...
</code></pre>

<p>}
```</p>

<p>这个格式无法使用<code>sortBy</code>，那么最简单的方式就是做一下<code>map</code>操作，使其变为：</p>

<p>```json
[</p>

<pre><code>{
    "word": "drools",
    "count": 3
},
{
    "word": "extends",
    "count": 2
},
...
</code></pre>

<p>]
```</p>

<p>根据昨天学到的<code>_.map</code>，很容易写出：</p>

<p>```js
function sortWords(wordMap) {</p>

<pre><code>var mapped = _(wordMap).map(function(value, key) {
    return {
        "word": key,
        "count": value
    };
});

return _(mapped).sortBy("count").reverse();
</code></pre>

<p>}
```</p>

<h3>取出指定数目的元素</h3>

<p>由于<code>sortWords</code>返回的是一个JavaScript原生的数组，我们可以使用原生的API来取出前10个元素：</p>

<p><code>js
var sorted = sortWords(wordMap)
var top10 = sorted.splice(0, 10);
</code></p>

<p>不过<code>underscore.js</code>提供更友好的<code>take</code>函数：</p>

<p><code>js
var sorted = sortWords(wordMap);
var top10 = _(sorted).take(10);
</code></p>

<p>基于已经学习到的这些API，我们可以包装一下，形成这样以一个函数：</p>

<p>```js</p>

<p>function topWords(wordMap, n) {</p>

<pre><code>var mapped = _(wordMap).map(function(value, key) {
    return {
        "word": key,
        "count": value
    };
});

var sorted = _(mapped).sortBy("count").reverse();

return _(_(sorted).take(n)).pluck("word");
</code></pre>

<p>}
```</p>

<p>这个函数可以取出频率最高的前N个单词：</p>

<p>```js
topWords(wordMap, 1)
//["the"]</p>

<p>topWords(wordMap, 3)
//["the", "a", "to"]</p>

<p>topWords(wordMap, 10)
//["the", "a", "to", "is", "and", "input", "as", "alphanode", "we", "objects"]
```</p>

<p>当然，上面的代码可以略微压缩一下：</p>

<p>```js
function topWords(wordMap, n) {</p>

<pre><code>return _(_(_(_(wordMap).map(function(value, key) {
    return {
        "word": key,
        "count": value
    };
})).sortBy("count").reverse()).take(n)).pluck("word");
</code></pre>

<p>}
```</p>

<p>啊偶，有点难看了。幸好<code>underscore.js</code>提供了链式操作</p>

<h3>链式操作</h3>

<p>如果你用过jQuery，那么应该对链式操作非常熟悉了。链式操作写起来非常顺畅，代码也会非常的语义化。<code>underscore.js</code>中也支持将代码写成链式的，API为<code>chain</code>，<code>chain</code>返回的是一个包装过的<code>underscore</code>对象，到链结束的时候，需要调用<code>value</code>来获取最终的结果：</p>

<p>比如</p>

<p>```js
function count(text) {</p>

<pre><code>var mapped = _(text.match(/\w+/g)).map(function(word) {
    return word.toLowerCase()
});

return _(mapped).reduce(function(frequencies, word) {
    frequencies[word] = (frequencies[word] || 0) + 1;
    return frequencies;
}, {});
</code></pre>

<p>}
```</p>

<p>可以简化为：</p>

<p>```js
function count(text) {</p>

<pre><code>return _.chain(text.match(/\w+/g))
.map(function(word) {
    return word.toLowerCase()
})
.reduce(function(frequencies, word) {
    frequencies[word] = (frequencies[word] || 0) + 1;
    return frequencies;
}, {})
.value();
</code></pre>

<p>}
```</p>

<p>同样，我们刚才<code>简化</code>过的那段很难看的代码也可以写成：</p>

<p>```js
function topWords(wordMap, n) {</p>

<pre><code>return _.chain(wordMap)
    .map(function(value, key) {
        return {
            "word": key,
            "count": value
        };
    })
    .sortBy("count")
    .reverse()
    .take(n)
    .pluck("word")
    .value();
</code></pre>

<p>}
```</p>

<p>最终，我们的代码就被缩减成了：</p>

<p><code>js
var text = "...";
var top10 = topWords(count(text), 10);
//["the", "a", "to", "is", "and", "input", "as", "alphanode", "we", "objects"]
</code></p>

<p>可以看到，使用<code>underscore.js</code>提供的众多API，可以写出非常简洁，表意的代码来。这也是函数式编程逐步占领<code>主流</code>编程世界的一个重要原因吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[underscore.js中的函数式编程]]></title>
    <link href="http://abruzzi.github.com/2015/02/functional-programming-in-underscore-dot-js/"/>
    <updated>2015-02-20T20:11:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/02/functional-programming-in-underscore-dot-js</id>
    <content type="html"><![CDATA[<h2>JavaScript中的map/reduce</h2>

<p>在过去的10年间，不论你是否对大数据有所涉足，你肯定听过<code>map/reduce</code>这个貌似很高大上的词。这个高大上的词事实上来自于<code>函数式编程</code>世界。<code>map</code>的意思是影射，即将一个集合中的内容，通过应用某种函数，形成另外一个集合。<code>reduce</code>表示求和，或者规约，即将一个集合以某种函数规约为一个值。</p>

<p><a href="http://underscorejs.org/">underscore.js</a>是一个<code>非常强大</code>的JavaScript库，也是我的工具箱里的必备品。事实上在我自己的小项目中，我更倾向于使用<code>jQuery</code>+<code>underscore.js</code>来完成所有的功能，而不是使用诸如<code>AngularJS</code>之类的框架。</p>

<p>作为一个库，<code>underscore.js</code>提供了丰富的API来操作JavaScript中的集合，对象，函数等，可以节省程序员大量的时间，我们在这篇文章中来看看<code>underscore.js</code>中基本的函数式编程特性。</p>

<h3>使用map消除for-loop</h3>

<p>我们先来看一个小例子：我们要编写一个名为<code>makeQuery</code>的函数，它接受一个JavaScript对象和一个分隔符，然后将JavaScript对象展开，形成<code>key=value[分隔符key=value]</code>的形式。正如下面这个测试所反映的：</p>

<p>```js
it("make query from object", function() {</p>

<pre><code>var cookies = {
    "JSESSIONID": "6C729E682C05AA56017E3D1675CE8E5F",
    "_USER": "GEO-NASTAR"
};

var expected = "JSESSIONID=6C729E682C05AA56017E3D1675CE8E5F;_USER=GEO-NASTAR";

expect(makeQuery(cookies, ";")).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>一个直接的解决方案是：</p>

<p>```js
function makeQuery(obj, delimiter) {</p>

<pre><code>var strArray = [];

for (var key in obj) {
    strArray.push(key + "=" + obj[key]);
}

return strArray.join(delimiter);
</code></pre>

<p>}
```</p>

<p>我们再来看另外一个小例子：给定一个字符串（人名）数组，将数组中的所有人名都变成大写字母开头。正如下面这个测试所反映：</p>

<p>```js
it("capitalize", function() {</p>

<pre><code>var names = ["juanchen", "mingliang", "lu", "juntao"];
var expected = ["Juanchen", "Mingliang", "Lu", "Juntao"];

expect(capitalize(names)).toEqual(expected);
</code></pre>

<p>});
```</p>

<p>一个可能的函数如下：</p>

<p>```js
function capitalize(strArrays) {</p>

<pre><code> var newArray= [];

 strArrays.forEach(function(str) {
      str = str.charAt(0).toUpperCase() + str.slice(1);
      newArray.push(str);
 });

 return newArray;
</code></pre>

<p>}
```</p>

<p>如果仔细观看这两函数实现，会发现虽然做的事情完全不同（一个做对象到字符串到的连接，一个做字符串的首字母大写转换），但是如果从稍微高一点的抽象层次来看，会发现其实这两个函数式<code>一样的</code>！！</p>

<p>如果写成伪代码：</p>

<p>```js
function xxx(array) {</p>

<pre><code>var newArray = [];

forLoop(array, function(item) {
    newArray.push(doSomething(item));
});

return newArray;
</code></pre>

<p>}
```</p>

<p>即，声明一个新的数组，迭代传入的数组，然后做<code>某种操作</code>，将结果存入数组，最后返回该数组。由于JavaScript是一个支持函数式变成范式的语言，我们可以将<code>某种操作</code>从外部传入，这样，这部分代码就可以被重用了！！</p>

<p>```js
function xxx(array, func) {</p>

<pre><code>var newArray = [];

forLoop(array, func(item));

return newArray;
</code></pre>

<p>}
```</p>

<p>看着很眼熟对吧，没错，这就是<code>map</code>操作。目前<code>V8</code>引擎已经把这个操作内置到了语言级别了，你可以直接在数组上调用<code>map</code>来完成映射的操作。不过我们这篇文章的主角是<code>underscore.js</code>，因此来看看在<code>underscore.js</code>里怎么使用<code>map</code>吧，还是上面这两个例子：</p>

<p>```js
function makeQuery(params, delimiter) {</p>

<pre><code>return _.map(params, function (value, key) {
    return key + '=' + value;
}).join(delimiter);
</code></pre>

<p>}</p>

<p>function capitalize(items) {</p>

<pre><code>return _.map(items, function(item) {
    return item.charAt(0).toUpperCase() + item.substring(1).toLowerCase();
});
</code></pre>

<p>}
```</p>

<p>对比一下会发现，我们已经将<code>for</code>语句消除掉了（它被内置到了<code>_.map</code>函数中了）。这是一个非常伟大的提升，而代码更加表意。</p>

<h3>使用reduce简化<code>规约</code></h3>

<p>我们来看另一个例子：给定一个工资列表，我们要计算公司为我们交纳的公积金的总和，假设比率为15%。测试如下：</p>

<p>```js
it("calculate rate", function() {</p>

<pre><code>var rate = 0.15;
var salaries = [3200.00, 1768.00, 4020.00];

var total = calcRate(salaries, rate);

expect(total).toEqual(1348.2);
</code></pre>

<p>})
```</p>

<p>一个直观的实现如下：</p>

<p>```js
function calcRate (salaries) {</p>

<pre><code>var rate = 0.15;
var minimunCost = 0;

salaries.forEach(function(salary) {
    minimunCost += salary * rate;
});

return minimunCost;
</code></pre>

<p>}
```</p>

<p>再来看一个例子：我们有一个单词列表，需要统计出每个单词出现的次数。测试如下：</p>

<p>```js
it("count word", function() {</p>

<pre><code>var words = ["hello", "hello", "my", "friend", "my", "heart"];

var result = count(words);

expect(result["hello"]).toEqual(2);
expect(result["my"]).toEqual(2);
expect(result["friend"]).toEqual(1);
expect(result["heart"]).toEqual(1);
</code></pre>

<p>});
```</p>

<p>一个直接的实现函数如下：</p>

<p>```js
function count(words) {</p>

<pre><code>var result = {};

words.forEach(function(word) {
    result[word] = (result[word] || 0) + 1;
});

return result;
</code></pre>

<p>}
```</p>

<p>现在再来仔细对比这两个实现，如果从稍微<code>高级别</code>的层次来抽象，会发现这两段代码是<code>一样的</code>，如果写成伪代码的话，看起来是这样的：</p>

<p>```js
function xxx(array [,func]) {</p>

<pre><code>var result;

array.forEach(function(item) {
    result += func(item);
});

return result;
</code></pre>

<p>}
```</p>

<p>注意可以传入一个可选的<code>func</code>作为计算子，另外此处的<code>+=</code>表示某种形式的累加（count函数中的复赋值其实是另一种形式的累加）。</p>

<p>这种<code>传入一个数组，通过某种形式的累加而生成一个单独的值</code>的计算，被称为<code>reduce</code>函数。当然，现在<code>V8</code>引擎已经内置了对<code>reduce</code>的支持。我们来看看在<code>underscore.js</code>中如何使用<code>reduce</code>：</p>

<p>```js
function calcRate(items, rate) {</p>

<pre><code>return _.reduce(items, function (total, value) {
    return total + value * rate;
}, 0);
</code></pre>

<p>}</p>

<p>function count(words) {</p>

<pre><code>return _.reduce(words, function(frequencies, word) {
    frequencies[word] = (frequencies[word] || 0) + 1;
    return frequencies;
}, {});
</code></pre>

<p>}
```</p>

<p><code>_.reduce</code>接受三个参数，分别是集合，累加器，和一个可选的初始值。应该注意的是第二个参数是一个函数，而这个函数的参数需要特别说明：第一个参数是上一次累加器的返回值，在迭代的第一次，这个值是调用<code>_.reduce</code>时传入的初始值。</p>

<p>以<code>calcRate</code>为例，调用
<code>calcRate([1000, 2000, 1500], 0.15)</code>时，第一次调用中间匿名函数时，total的值为初始值<code>0</code>；第二次则为<code>0+1000*0.15 = 150</code>；第三次则为<code>150+2000*0.15 = 450</code>。</p>

<h3>一个实际的例子</h3>

<p>如果纯粹列举<code>underscore.js</code>的特性，难免变得枯燥，我们来编写一个<code>实际</code>的例子来学习<code>map/reduce</code>的用法。</p>

<p>假设我们有一段文本：</p>

<p>```
var text =
"Hello darkness, my old friend,
I've come to talk with you again,
Because a vision softly creeping,
Left its seeds while I was sleeping,
And the vision that was planted in my brain
Still remains
Within the sound of silence.</p>

<p>In restless dreams I walked alone
Narrow streets of cobblestone,
'Neath the halo of a street lamp,
I turned my collar to the cold and damp
When my eyes were stabbed by the flash of a neon light
That split the night
And touched the sound of silence.</p>

<p>And in the naked light I saw
Ten thousand people, maybe more.
People talking without speaking,
People hearing without listening,
People writing songs that voices never share
And no one dared
Disturb the sound of silence."
```</p>

<p>我们来统计一下每个单词出现的次数，<strong>不区分</strong>大小写。JavaScript中的字符串对象有一个<code>match</code>方法，<code>match</code>的参数可以是正则表达式，返回该字符串的第一个匹配：</p>

<p>```js
"hello world".match(/\w+/)
//["hello"]</p>

<p>"... hello world".match(/\w+/)
//["hello"]
```</p>

<p>注意<code>...</code>没有匹配正则表达式<code>\w</code>。当参数为带有<code>g</code>(global)选项的正则表达式时，该函数会返回所有匹配该正则表达式的数组：</p>

<p>```js
"hello world".match(/\w+/g)
//["hello", "world"]</p>

<p>"... hello world".match(/\w+/g)
//["hello", "world"]
```</p>

<p>有了这个<code>match</code>我们就可以很容易的将上述的文本分割为一个单词的数组，而根据要求，我们需要将所有的单词都转成小写。</p>

<p>可以先编写一个分割文本并转换小写的函数：</p>

<p>```js
function text2words(text) {</p>

<pre><code>return _.map(text.match(/\w+/g), function(word) {
    return word.toLowerCase();
});
</code></pre>

<p>}
```</p>

<p>而对应的count函数则为：</p>

<p>```js
function count(words) {</p>

<pre><code>return _.reduce(words, function(frequencies, word) {
    frequencies[word] = (frequencies[word] || 0) + 1;
    return frequencies;
}, {});
</code></pre>

<p>}
```</p>

<p><del>
还可以使用<code>underscore.js</code>的链式操作，使用<code>_(object)</code>生成一个<code>underscore</code>包装过的对象。然后就可以使用<code>_(object).map(...).reduce(...)</code>的形式了：
</del></p>

<p>```js
function count(text) {</p>

<pre><code>var mapped = _(text.match(/\w+/g)).map(function(word) {
    return word.toLowerCase()
});

return _(mapped).reduce(function(frequencies, word) {
    frequencies[word] = (frequencies[word] || 0) + 1;
    return frequencies;
}, {});
</code></pre>

<p>}
```</p>

<p>我们在下一篇文章中将介绍如何将这些API用连式操作连起来。</p>

<p>```</p>

<p><img src="/images/2015/02/wordcount-resized.png" alt="wordcount" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制作一个更漂亮的svn diff命令]]></title>
    <link href="http://abruzzi.github.com/2015/02/make-a-colorful-svn-diff/"/>
    <updated>2015-02-18T14:14:00+11:00</updated>
    <id>http://abruzzi.github.com/2015/02/make-a-colorful-svn-diff</id>
    <content type="html"><![CDATA[<h3>Code Review</h3>

<p>在<code>ThoughtWorks</code>，我们几乎每天都会进行一个叫<code>code review</code>或者<code>code diff</code>的活动：每天下午5:00，团队成员围坐在一起，将今天的修改大概过一下，这样做的好处非常明显：</p>

<ol>
<li>分享业务知识，了解彼此的工作</li>
<li>分享技术细节，比如有人使用了某种设计模式</li>
<li>帮助别人发现问题，比如逻辑错误等，群策群力</li>
</ol>


<p>经过实践，<code>code reivew</code>可以快速发现问题，而且可以尽可能多的分享知识，是一种<code>ThoughtWorker</code>们喜闻乐见的学习/娱乐形式。</p>

<p>但是随着项目的不同，各个团队使用的版本管理工具都不一样。用惯了<code>git</code>的非常漂亮的<code>diff</code>子命令之后，<code>svn</code>的<code>diff</code>简直就是战五渣。没有高亮，没有进度条，就是黑底白字的一些文本，实在无法让人提起兴趣。</p>

<p>这篇文章分享一个简单的方法，可以让你很容易的把<code>svn</code>的<code>diff</code>打造成一个漂亮的工具：</p>

<p><img src="/images/2015/02/svn-color-diff-resized.png" alt="svn diff" /></p>

<h4>diff格式</h4>

<p>Diff是一种通用的表示文本差异的格式，细节可以看我之前写过一篇<a href="http://icodeit.org/2012/02/diff%E5%92%8Cpatch%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/">关于diff和patch的文章</a>。需要说明的是，它作为一种标准格式，很多编辑器都提供对这种格式的高亮显示，比如现在非常流行的<code>Sublime Text</code>编辑器：</p>

<p><img src="/images/2015/02/sublime-diff-resized.png" alt="sublime diff" /></p>

<p>默认的，<code>svn</code>的diff命令会生成这样<strong>朴素</strong>的输出：</p>

<p><img src="/images/2015/02/svn-diff-resized.png" alt="svn diff" /></p>

<h4>命令行的diff高亮显示</h4>

<p>在Mac下，可以通过<code>brew</code>来安装一个命令行工具，这个工具可以将<code>Diff</code>格式高亮显示：</p>

<p><code>sh
$ brew install colordiff
</code></p>

<p>有了这个工具，就可以将<code>svn</code>生成的<code>Diff</code>格式高亮显示出来：</p>

<p><code>sh
$ svn diff | colordiff
</code></p>

<p><img src="/images/2015/02/color-diff-resized.png" alt="color diff" /></p>

<p>但是你可能已经发现这些神奇的<code>^M</code>，这是<code>Windows</code>系统中的换行符在<code>Unix</code>类系统中的展示，我们需要将<code>Diff</code>先转换一次：</p>

<p><code>sh
$ svn diff | dos2unix | colordiff
</code></p>

<p><img src="/images/2015/02/color-diff-converted-resized.png" alt="color diff converted" /></p>

<p>如果你的系统中没有<code>dos2unix</code>，可以用<code>brew</code>来安装：</p>

<p><code>sh
$ brew install dos2unix unix2dos
</code></p>

<h4>分页器</h4>

<p>*nix系统下有两种分页器：<code>more</code>和<code>less</code>，<code>less</code>比<code>more</code>的功能更丰富。<code>less</code>有很多的参数，我们这里选用了3个常见的：</p>

<ol>
<li><code>-s</code>: 压缩连续的空白行为一行</li>
<li><code>-M</code>: 给出更多的提示信息，包含行号，百分比等</li>
<li><code>+Gg</code>: 先跳至要查看文件的末尾，再跳至文件开头，这样从less就可以得到整个流的长度，从而计算出正确的百分比。当然如果是单独文件时，less是明确知道文件长度的，但是如果是从流中重定向过来的文本，less无法在开始时就得知长度。</li>
</ol>


<p>下面这条命令可以将当前目录下的所有<code>html</code>文件分屏显示，并且在每一屏的最后一行显示百分比等信息：</p>

<p><code>sh
$ cat *.html | less -s -M +Gg
</code></p>

<h4>放在一起</h4>

<p>好了，我们将每个部分都已经讲解了一遍了，现在让我们将这些零件串起来，在svn的<code>working copy</code>中执行这条命令就可以得到非常漂亮的，分页显示的Diff：</p>

<p><code>sh
$ svn diff | dos2unix | colordiff | less -s -M +Gg
</code></p>

<p>当然，还可以用一个<code>alias</code>(别名)来节省敲入的字符数：</p>

<p><code>sh
$ alias sd='svn diff | dos2unix | colordiff | less -s -M +Gg'
</code></p>
]]></content>
  </entry>
  
</feed>
