<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: izero | I code it]]></title>
  <link href="http://abruzzi.github.com/category/izero/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2017-01-04T01:26:12+11:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CI上的Web前端性能测试]]></title>
    <link href="http://abruzzi.github.com/2016/02/performance-testing-in-ci/"/>
    <updated>2016-02-20T18:18:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/02/performance-testing-in-ci</id>
    <content type="html"><![CDATA[<h2>Web站点的响应速度</h2>

<p>雅虎在2006年就发布了一份提升Web站点响应速度的<a href="https://developer.yahoo.com/performance/rules.html">最佳实践指南</a>。该指南包含了35条规则，分为7个类别。这些规则已经被广泛使用，并指导人们在新的站点设计时更有针对性的考虑问题。这份指南已经成了Web前端性能度量的一个事实标准了。</p>

<p><a href="http://yslow.org/">YSlow</a>是一个基于这份指南的测试工具，它可以测试一个站点是否“慢”，以及为什么“慢”？你可以通过很多方式来使用<a href="http://yslow.org/">YSlow</a>，比如Firefox，Chrome的插件，命令行工具，甚至PhantomJS这样的无头（Headless）浏览器。YSlow会检测你的站点中的资源是否没有压缩，是否缺失了超时设置，更进一步，它还会检测你的JS/CSS是否已经压缩/精简化，图片的尺寸，是否使用了CDN等等很多的维度。它还可以生成很多格式的报告，比如打分信息，TAP协议的输出，以及junit测试报告的格式。</p>

<p>我们这里讨论如何在持续集成服务器上设置一个<code>YSlow</code>任务，这个任务会在每次构建之后，测试你应用的性能指标，以帮助你更快的发现和定位问题。当然，我推荐你在<code>staging</code>环境，很多开发者在测试环境，本地开发环境都会启动很多对<code>Debug</code>友好的设置，比如未压缩的JS/CSS，没有超时设置的响应等，这会导致该构建任务的<code>打分</code>不够准确。</p>

<p><img src="/images/2016/02/jenkins-report-resized.png" alt="jenkins failure" /></p>

<h3>搭建CI环境</h3>

<p>按照传统方式，如果要搭建一个这样的CI任务，我们需要至少做这样一些事情：</p>

<ul>
<li>安装JDK</li>
<li>安装Jenkins</li>
<li>安装<a href="http://phantomjs.org/">PhantomJS</a></li>
<li>安装<a href="http://yslow.org/phantomjs/">YSlow.js脚本</a></li>
</ul>


<p>然后设置环境变量，在Jenkins上创建任务，并运行YSlow.js脚本。这个任务很简单，只需要设置好参数，然后将结果输出为Jenkins上的报告即可。比如：</p>

<p><code>sh
$ phantomjs /var/share/yslow.js -i grade -threshold "B" -f junit \
http://bookmarks-frontend.s3-website-us-west-2.amazonaws.com/ &gt; yslow.xml
</code></p>

<ul>
<li><code>-i grade</code> 展示打分（grade）信息（还可以是basic/stats/all）等</li>
<li><code>-threshold "B"</code> 指定失败的阈值为B</li>
<li><code>-f junit</code> 输出为<code>junit</code>识别的XML格式</li>
</ul>


<p>这里的阈值可以是数字（0-100分），字母（A-F级别）或者一个JSON字符串（混合使用）</p>

<p><code>sh
-threshold '{"overall": "B", "ycdn": "F", "yexpires": 85}'
</code></p>

<p>上面的命令会测试站点<code>http://bookmarks-frontend.s3-website-us-west-2.amazonaws.com/</code>的各项指标，并应用雅虎的那35条规则，并最终生成一个<code>junit</code>测试报告格式的文件：<code>yslow.xml</code>。</p>

<p>但是维护CI环境是一个比较麻烦的事情，而且既然每个项目都可能会用到这样的<code>基础设施</code>，一种好的做法就是将其做成一个<code>镜像</code>保存起来，以方便其他项目的复用！这里我们使用<code>docker</code>来安装和配置我们的CI环境，配置完成之后，我们可以将<code>docker</code>的镜像分享给其他团队，也可以供我们在下一个项目中使用。</p>

<h3>基于docker/docker-compose的环境搭建</h3>

<p>在<a href="https://www.docker.com/">docker</a>出现之前，我们要搭建一个<code>测试</code>或者<code>staging</code>环境，往往需要很多个不同角色的机器：有专门的数据库服务器，文件服务器，缓存服务器，Web服务器，反向代理等等。这样在成本上显然是个不小的开销，如果将所有不同的组件部署在同一台机器上，则又可能互相干扰，只需要一个小小的失误，整个系统就需要重新配置。更可怕的是，这个环境和生产系统不一致，那么很可能真实的错误要等到系统上线之后才会被发现。</p>

<p>比如在2012年，我所在的一个项目中，客户的系统采用传统的J2EE架构。本地开发中，我们使用了Jetty作为容器，而<code>测试</code>和<code>Staging</code>环境使用了Tomcat。由于Tomcat对空格的处理和Jetty有所不同，我们在本地测试通过，并且运行良好的代码，在<code>Staging</code>变得完全不能工作。这个问题花费了团队很多时间来排查错误。</p>

<p>在<code>docker</code>出现之后，我们可以在一台物理机器上运行多个互不干涉的容器，每个容器可以是一个组件（比如运行数据库的容器，Web服务器容器等等）。这样不但缩减了成本，而且可以让我们的环境尽可能和生产环境一致（有的项目甚至直接将CI出来的镜像应用到生产中）。不过对多个容器的管理是一个很麻烦的事情，好在<code>docker</code>提供了<a href="https://docs.docker.com/compose/overview/">docker-compose</a>工具来解决这个问题。使用<code>docker-compose</code>可以定义一组互相独立，但是又可以协作在一起的容器，这样我们可以很容易的搭建一个<code>仿生产</code>环境。</p>

<p>比如我们可以定义个<code>docker-compse.yml</code></p>

<p>```yml
app:
  build: .
  links:</p>

<pre><code>- db:postgres
</code></pre>

<p>  ports:</p>

<pre><code>- 8000:8000
</code></pre>

<p>  volumes:</p>

<pre><code>- .:/app
</code></pre>

<p>  working_dir: /app
  entrypoint: /app/start.sh
  environment:</p>

<pre><code>JDBC_DATABASE_URL: jdbc:postgresql://postgres:5432/bookmarks
DATABASE_USER: bookmarks-user
DATABASE_PASS: bookmarks-password
</code></pre>

<p>db:
  image: postgres:9.3
  ports:</p>

<pre><code>- 5432:5432
</code></pre>

<p>  environment:</p>

<pre><code>POSTGRES_DB: bookmarks
POSTGRES_USER: bookmarks-user
POSTGRES_PASSWORD: bookmarks-password
</code></pre>

<p>```</p>

<p>这个<code>docker-compose</code>定义了两个组件，<code>app</code>和<code>db</code>。<code>db</code>使用了<code>postgres:9.3</code>镜像，并设置了自己的环境变量。<code>app</code>则从当前目录<code>.</code>构建一个新的镜像，<code>app</code>与<code>db</code>通过<code>links</code>属性连接起来。</p>

<p>如果在当前目录执行<code>docker-compose build</code>命令，<code>docker-compose</code>会找到本地的<code>Dockerfile</code>，然后构建出一个<code>docker</code>的镜像，并启动该容器，同时，它还会启动<code>postgres:9.3</code>容器作为数据库组件。这样我们的环境就被完整的搭建好了。</p>

<h4>搭建CI环境</h4>

<p>```yml
app:
  build: .
  ports:</p>

<pre><code>- 8080:8080
- 50000:50000
</code></pre>

<p>  volumes:</p>

<pre><code>- ./data:/var/jenkins_home
</code></pre>

<p>```</p>

<p>这个配置，表明我们会根据当前目录的<code>Dockerfile</code>来构建一个镜像。</p>

<p>通过命令<code>volumns</code>，我们将本地目录<code>./data</code>映射为<code>jenkins_home</code>，这样我们定义的job信息，以及插件的安装都会放到本地的目录中，方便管理。配置完成之后，构建并启动该容器：</p>

<p>```
FROM jenkins:latest</p>

<h1>Env</h1>

<p>ENV PHANTOMJS_VERSION 1.9.6
ENV PHANTOMJS_YSLOW_VERSION 3.1.8
ENV SHARE_BIN /var/share</p>

<h1>Install stuff by using root</h1>

<p>USER root
RUN apt-get update
RUN apt-get upgrade -y
RUN apt-get install -y git wget libfreetype6 libfontconfig bzip2</p>

<p>RUN mkdir -p $SHARE_BIN</p>

<p>RUN wget -q --no-check-certificate -O /tmp/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2 \
https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2
RUN tar -xjf /tmp/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2 -C /tmp
RUN rm -f /tmp/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2
RUN mv /tmp/phantomjs-$PHANTOMJS_VERSION-linux-x86_64/ $SHARE_BIN/phantomjs
RUN ln -s $SHARE_BIN/phantomjs/bin/phantomjs /usr/bin/phantomjs</p>

<p>RUN wget -q --no-check-certificate -O /tmp/yslow-phantomjs-$PHANTOMJS_YSLOW_VERSION.zip \
http://yslow.org/yslow-phantomjs-$PHANTOMJS_YSLOW_VERSION.zip
RUN unzip /tmp/yslow-phantomjs-$PHANTOMJS_YSLOW_VERSION.zip -d $SHARE_BIN/
USER jenkins
```</p>

<p>执行下面的命令来设置并启动CI服务器：</p>

<p><code>sh
docker-compose up
</code></p>

<p><img src="/images/2016/02/jenkins-in-docker-resized.png" alt="jenkins in docker" /></p>

<p>创建新任务，并指定该任务执行的命令为：</p>

<p><code>sh
$ phantomjs /var/share/yslow.js -i grade -threshold "B" -f junit \
http://bookmarks-frontend.s3-website-us-west-2.amazonaws.com/ &gt; yslow.xml
</code></p>

<p>由于此时<code>phantomjs</code>已经被安装到了容器中，我们可以直接在jenkins中使用。运行结束之后，这个命令会生成一个报告：</p>

<p><img src="/images/2016/02/jenkins-report-resized.png" alt="jenkins failure" /></p>

<ul>
<li>没有压缩内容</li>
<li>没有添加过期的头信息</li>
</ul>


<p>在产品环境，我们需要使用反向代理来添加这些头信息，以保证最终用户在使用Web站点时的体验。</p>

<h3>总结</h3>

<p>我们只需要很少的配置就可以设置好一个工作良好的CI任务，这样在程序员某天引入了未经压缩的JS/CSS或者UX不小心提供了巨大而未经处理的图片时，你可以尽快的得到通知，并在正是上线之前发现这些问题。</p>

<p><a href="https://github.com/abruzzi/phantomjs-yslow">代码配置</a>在这里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不想当UX的开发不是好咨询师]]></title>
    <link href="http://abruzzi.github.com/2016/01/for-those-dev-who-doesnt-want-to-be-a-ux-cannot-be-a-good-consulant/"/>
    <updated>2016-01-31T23:04:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/01/for-those-dev-who-doesnt-want-to-be-a-ux-cannot-be-a-good-consulant</id>
    <content type="html"><![CDATA[<h2>成为咨询师</h2>

<p>本文旨在帮助<code>开发</code>完成向<code>咨询师</code>的转变，内容不但涉及向<code>UX</code>学习，还包括思维方式的转变。我尽量采用一些亲历的例子来说明该如何做，也会适当的解释为什么需要这样做。不过在展开详细讨论之前，首先来澄清这里提到的三种角色。</p>

<h3>开发（Developer）角色</h3>

<p><code>开发</code>是指那些喜欢写代码，享受写代码，喜欢纯粹，讨厌办公室政治，永远穿T恤的有些偏执的程序员。跟他们打交道，有这样一些注意事项：</p>

<ul>
<li>不要让他们帮你盗<code>QQ</code>号</li>
<li>不要让他们帮你修电脑或者装Windows系统</li>
<li>不要跟他们讨论<code>人文/政治</code>类的问题</li>
</ul>


<p><code>开发</code>往往还单纯的可爱，除此之外，他们还有这样一些特点：</p>

<ul>
<li>逻辑清晰</li>
<li>与人争辩时往往可以通过清晰的逻辑而获胜</li>
<li>单身</li>
</ul>


<p>业界已经有很多关于<code>开发</code>的描述了，我这里也有一个描述<code>开发</code>的列表：</p>

<p><del>
当然，要严格界定一个人是不是<code>开发</code>是非常困难的，大多数情况下，他们沉默寡言，遇到程序中的bug或者在调试某些库的问题时眼神呆滞，口中念念有词，他们不太喜欢和陌生人说话，在晚上精神充沛，白天则显得有些呆滞，喜欢喝咖啡，相信世界上有绝对的正确和错误，往往会带着非黑即白的二分法来看待事物，生活很难自理，喜欢机械键盘/电子设备，周末宁愿宅在家里写代码也不去做社交……
</del></p>

<h3>用户体验设计师（UX）</h3>

<p><code>UX</code>是指用户体验设计师，在本文的上下文中，更偏向与非<code>视觉设计</code>的那些设计师（产品设计师）。在项目中，他们会做用户调研，竞品分析，信息架构简历，交互设计（纸上原型，低保真）等活动，并负责开发纸上原型，验证这些原型等。</p>

<p>和<code>UX</code>打交道，也有一些应该注意的点，比如：</p>

<ul>
<li>不要叫他们美工</li>
<li>不要对他们说诸如：“帮我美化一下这个页面”，“这个颜色得再亮一些”之类的话</li>
<li>不要跟他们讲关于程序员的笑话</li>
</ul>


<p>事实上，人们对<code>UX</code>的误解很深。提到<code>UX</code>人们的第一反应是<code>PhotoShop</code>，P图/切图。这仅仅是他们日常工作中很小的一部分。大部分<code>UX</code>还要做很多用户研究，信息架构整理的事情。老实说，我在去年5月之前的对<code>UX</code>的认识和大部分<code>开发</code>的认识是一样的，但是在后来的项目上和多个<code>UX</code>合作过之后，我彻底改变了原先那种偏见，开始敬佩他们，并向他们学习。</p>

<p>设计工作可以细分为这样一些不同的方面（图片来源网络）：</p>

<p><img src="/images/2016/01/jjg-resized.png" alt="JJG" /></p>

<p><code>UX</code>的一项特别的技能在于能从复杂的现实世界中抽象出清晰的信息（用户画像，体验地图甚至最后的用户故事）。这项技能不但重要，而且还很牛逼。</p>

<h4>知识的诅咒</h4>

<p><a href="https://book.douban.com/subject/25782902/">《反脆弱》</a>里有个有意思的例子：人们仅仅创造了非常有限的词汇来描述颜色，比如蓝色，红色，而任何一个视觉正常的人都可以轻松的识别出数百种不同的颜色。也就是说，人们可以很轻松的理解相当复杂的事物，但是很难向别人描述该事物（想象一下向别人描述一只<code>章鱼</code>的颜色）。</p>

<p>人们对于现实世界中的事情（特别是复杂的业务场景）往往只能意会而很难言传，再加上知识的诅咒（我在<a href="http://icodeit.org/2015/08/how-to-write-a-book/">《如何写一本书》</a>里，详细讨论了这种常见的陷阱）的存在，当用户在描述A的时候，在没有上下文的人听来，很可能是B或者C。这种情况在软件开发中非常常见，也是很多项目之所以延期的原因（大量并无必要的返工，需求澄清等）。</p>

<p>在项目前期，<code>UX</code>需要和客户坐在一起，将客户的需求分析清晰。分析细节包括业务场景，用户画像生成，信息架构，体验地图等等，这些信息并不是天然就显现的，恰恰相反，它们需要UX经过很多轮的辛苦引导，从用户的脑海里<code>提取</code>出来的。</p>

<p>这里需要<code>UX</code>的核心能力是：</p>

<ul>
<li>有目的的抛出问题，引导客户进行发散</li>
<li>有节奏的收敛，形成共识</li>
<li>不断修正过程中的错误</li>
<li>可视化能力（这可能是大部分人觉得唯一和UX相关的点）</li>
</ul>


<h3>咨询师</h3>

<p><code>咨询师</code>是指那些根据自己的丰富经验来帮助客户解决具体问题的人。这些问题并不一定局限在技术上 —— 比如架构的设计，具体前端/后端技术的选定，还包括一些流程的改善。比如引入新的<code>工程实践</code>来缩减项目的周期时间，帮助团队发现问题，建设团队的能力，作为各个团队间的润滑剂帮助项目成功等等。</p>

<p><code>咨询师</code>工作中的一个常见的场景是：</p>

<ul>
<li>列出目前遇到的问题</li>
<li>确定各个问题的优先级（和各个利益方）</li>
<li>制定方案</li>
<li>给方案加上时间，形成计划</li>
<li>细化计划中的条目，并促成它</li>
</ul>


<h4>引导/启发</h4>

<p>我在印度的某一期<code>TWU</code>当教练的时候，发现了一个很有意思的现象，国外的同事在组织培训时更强调用<code>引导</code>/<code>启发</code>的方式，让学生们自己得出结论，并在课堂上进行讨论，以期教学相长。只有在过程中有<code>启而不发</code>的情况出现时，教练才会适当抛出自己的开发，并再次启动讨论。</p>

<p><img src="/images/2016/01/twu22-resized.png" alt="TWU 33" /></p>

<p>与我一直的认识不同的是，这种方式效果很好。通过一些适当的启发，学生很容易自己讨论出一些有趣的看法，然后教练在这个基础上做一些总结，并帮助他们分析不同看法/想法之间的优劣。</p>

<p>我非常认同这种模式，后来自己组织的其他培训/workshop也都尽量采取这种方式。咨询师在客户现场，也应该采取这种<code>引导</code>的方式帮助团队来完成能力建设，而不是事必躬亲。</p>

<h2>角色转化</h2>

<p>从<code>开发者</code>视角切换到<code>咨询师</code>的第一要诀就是：让团队解决自己遇到的问题！乍听起来，<code>咨询师</code>好像变成一个多余的角色了：既然团队自己可以搞定，还要<code>咨询师</code>干什么呢？<code>咨询师</code>的职责是让团队意识到问题，理清思路，制定解决方案，并逐步实施。</p>

<h3>使能/赋能</h3>

<p>我们来看一个简单的例子：在客户现场，你发现团队往往在集成时会花费很多额外的时间和返工，开发过程中大家各自为政，没有人知道一次commit会给软件包造成什么影响。</p>

<p>如果你是一个<code>咨询师</code>，应该如何解决这个问题？一个常犯的错误是，直接上手帮助团队搭建<a href="http://www.martinfowler.com/articles/continuousIntegration.html">持续集成</a>（CI）环境，并设置CI纪律（比如build红了不许过夜，红的时候其他人都不许commit等）。</p>

<p>一种更好的做法是：做为<code>咨询师</code>，首先需要帮助团队认识到这个问题，你需要让所有人都知道，我们现在的问题是什么。在所有人都清楚了这一点之后，你需要提出（或者<code>引导</code>出）持续集成的概念（因为根据经验，这是一种可以很好的解决集成时额外的返工现象的好办法）。</p>

<p>但是对于不熟悉<code>持续集成</code>的团队来说，搭建一个持续集成环境是一个非常<code>复杂</code>的任务。因此你需要分解这个任务为一些更小的，可以被解决的问题。</p>

<ul>
<li>申请虚拟机资源</li>
<li>安装<a href="https://jenkins-ci.org/">jenkins</a>（包括安装JVM，创建用户等）</li>
<li>配置本地构建脚本到jenkins（构建脚本，自动化测试等）</li>
<li>申请显示器资源（作为CI Monitor）</li>
<li>将结果显式在CI Monitor上</li>
</ul>


<p>有了任务之后，你需要分别为这些子任务分配owner。对比搭建<code>持续集成环境</code>这样的大任务，这些小的任务已经非常具体，更重要的是，他可以被团队中任何人理解并解决。</p>

<h3>学习做引导</h3>

<p>除了思维方式的转变，以及自身过硬的专业技能（比如clean code/重构能力，自动化测试，DevOps，持续交付经验等）之外，开发者需要从<code>UX</code>那里学习如何发现问题，并将问题可视化出来的技能。</p>

<p>当你发现团队面临某个问题是，可以通过组织一个类似<code>头脑风暴</code>的会议来帮助团队梳理：</p>

<ul>
<li>提出问题</li>
<li>维护会议纪律，保证所有人都贡献自己的想法</li>
<li>将想法/问题归类</li>
<li>找出问题的解决方案</li>
<li>制定计划（包括时间点和owner）</li>
</ul>


<p>关于如何做引导的详细信息，还可以参考我的<a href="http://icodeit.org/2016/01/how-to-facilitate/">上一篇文章</a>。</p>

<h3>进一步的阅读</h3>

<p>除了上边提到的</p>

<ol>
<li>思维方式的转变</li>
<li>向<code>UX</code>学习引导的技巧</li>
</ol>


<p>之外，事实上还有很多技巧和内容需要学习：</p>

<ul>
<li><a href="https://book.douban.com/subject/25899338/">《引导的秘诀》</a></li>
<li><a href="https://book.douban.com/subject/10433731/">《视觉会议》</a></li>
<li><a href="https://book.douban.com/subject/4051739/">《第五项修炼》</a></li>
<li><a href="https://book.douban.com/subject/1156866/">《系统思考》</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当我们谈论引导时，我们谈些什么？]]></title>
    <link href="http://abruzzi.github.com/2016/01/how-to-facilitate/"/>
    <updated>2016-01-23T23:42:00+11:00</updated>
    <id>http://abruzzi.github.com/2016/01/how-to-facilitate</id>
    <content type="html"><![CDATA[<h2>什么是引导（facilitation）</h2>

<p>引导（facilitation）的词根来源与拉丁语“facil”，意思是“让……更容易”。而负责引导的<code>引导师</code>（facilitator）的核心职责是，通过一系列的活动、技巧，保证引导会议顺畅的进行，并解决整个过程中的问题，使得参与者就问题产生一个共识，达成一个结论。</p>

<p>其中可能涉及很多具体的问题，比如几乎在每个会议中都可能看到的：</p>

<ul>
<li>如果有人尝试将会议变成一言堂，如何处理？</li>
<li>如果参与者不愿意分享自己的观点，如何处理？</li>
<li>过程中，两个参与者产生了争执，如何处理？</li>
<li>如何把握节奏，刺激与会者发散？</li>
<li>如何在收集到足够信息后，进行收敛？</li>
</ul>


<p>显然，这是一个技术活儿。一次好的引导可以将与会者的众多想法，信息聚合起来，形成对团队下一步要做什么有极强指导意义的<code>方案</code>。</p>

<h2>日常的引导活动</h2>

<p>在平时的工作中，我们其实已经在频繁的使用引导活动，但是很少有人将其作为体系来关注，也很少有人能将这个能力应用在其他方面（比如在客户现场咨询，或者参加售前等）。引导是如此的常见，以至于我们对其视而不见。比如在interview完成之后，所有面试官和HR一起做的well/less well的列举；各种社区活动（Open Party，CDConf等）之后的回顾；每个项目在一个迭代结束后的Retro；对于某个问题的头脑风暴等等。</p>

<h3>项目回顾会议</h3>

<p>在开始前，引导师需要保证团队：</p>

<ul>
<li>每个人都有开发的态度</li>
<li>整个过程需要在一个足够安全的环境中进行（Safe Check）</li>
</ul>


<p>有时候，有Team Lead在场，新人可能不愿意对某事（比如最近加班有点过分）发表自己的看法等。这时候需要有<code>Safe Check</code>，比如分为1到5档，大家用不记名投票的方式来表述自己是否觉得安全。如果投票结果显示大部分人都觉得不安全，则需要与会的人中，职位最高的那个人离开会议，然后再做一次<code>Safe Check</code>，直到大家都觉得足够安全。不过，对于已经进行过多轮回顾的团队，我们往往会忽略掉这一步。</p>

<p>Retro过程是，团队坐在一起，回顾上一个迭代（通常是两个星期）做过的事情，有哪些做的比较好，哪些有待改进，有哪些疑惑等等。Retro可以有很多的形式，比如简单的<code>Well/Less Well/Questions</code>，更聚焦在产生<code>Action</code>的海星式等等。</p>

<p><img src="/images/2016/01/pens-resized.png" alt="pens" /></p>

<p>通常的顺序是：</p>

<ol>
<li>引导者请大家用纸笔将想法写在便签（stick）上</li>
<li>Time box这个过程（通常是5分钟）</li>
<li>大家将这些stick贴在墙上</li>
<li>引导者和团队一起过一遍所有的stick</li>
<li>归类相似的stick</li>
<li>引导者促进团队交流，讨论stick上的问题，并形成一些改进点（Action）</li>
</ol>


<p>Action一定要足够具体，并且需要一个所有者，<code>所有者</code>负责确保该<code>Action</code>一定会发生。比如团队发现上一个迭代中<code>Code review</code>做的不够好，一个<code>Action</code>就是每天下午5点有人来提醒大家来进行<code>Code review</code>。</p>

<p>如果这时候发现有太多的问题，团队可以用投票的方式选出本次Retro要讨论的数个stick。</p>

<h3>引导会议</h3>

<p>在日常工作中，我们几乎每天都有会议，而且越来越多的团队已经意识到冗长，无聊的会议有多大的杀伤力了。在很多会议上，与会者要么在刷新朋友圈，要么在对着笔记本电脑写代码或者读新闻，即使强制要求不许带电脑和手机的情况下，也无法限制参加者神游太虚。</p>

<p>根据《引导的秘诀》这本书里的定义，引导会议是</p>

<pre><code>引导会议是一个高度结构化的会议，会议中的领导者（引导者）引导参会人通过预先设定好的步骤达成所有参会人产生，理解并接受的结果。
</code></pre>

<p>引导会议需要充分调用参与者的积极性，每个人都需要足够聚焦，这要求引导者可以有能力使得团队振奋（比如幽默的风格，或者具有挑战性的问题等）。另外，每个人的idea都需要被充分重视（一个细节就是不要随意篡改你听到的内容，这是没有经验的引导者常犯的错误之一）。一旦所有参与者都积极起来，引导者就可以稍微退后一些，将舞台交给团队。</p>

<p>而有时候，情景则相反，大家都不发言，也没有看到明显的发言的趋势，这时候需要一些方法来激励。如果是团队都比较茫然，引导者需要列出一些简单而容易理解的步骤，帮助团队按照预设的节奏来逐步前进。比如，在一开始的时候就将agenda板书在墙上，并通过头脑风暴的方式，鼓励参与者来将自己的idea可视化出来。</p>

<p>一个典型的误区是，引导会议的最后结论是本来就存在与引导者脑海中的想法。如果仅从结果来看，这种情况可能发生，但是只能说是碰巧而已。一个好的引导者需要帮助与会者自己产生，并得出一个可行的，被广泛认可的方案，而不是强加一个自己的给团队。</p>

<p>我们最为专业的引导活动是UX团队在客户现场的<code>inception</code>，<code>inception</code>由一系列相互关联，环环相扣的工作坊组成，这些工作坊基本上都需要采用很多引导的技巧，帮助客户团队将自己的问题描述清楚，并形成一个所有参与者都达成一直的可行方案。</p>

<p><img src="/images/2016/01/sticks-resized.png" alt="sticks" /></p>

<p>如果你不知道如何开始一个引导会议，一个简单而通用的模式是：</p>

<ol>
<li>我们的现状是</li>
<li>我们的目标是</li>
<li>我们如何到达目标</li>
<li>在行进中，如何度量</li>
</ol>


<p>《引导的秘诀》里还提到了一种<code>5P</code>模式：目的(Purpose)，产出(Product)，与会人(Participant)，可能的问题(Probable issues)以及流程(Process)。</p>

<p>5P提示你在准备会议之前，需要尝试回答这几个问题</p>

<ul>
<li>为什么要开这次会议？主要目的是什么？</li>
<li>会议后的产出是什么？</li>
<li>谁需要参与会议？</li>
<li>在会议中，我们可能遇到什么问题？</li>
<li>遇到这些问题是，我们如何解决？</li>
</ul>


<h2>引导中的常用技巧</h2>

<p>在引导活动中，有一些基本的规则，可以保证引导会议的顺畅性，比如</p>

<ul>
<li>引导师需要有足够的权威（可以打断那些长篇大论，保证过程的流畅）</li>
<li>如果人数太多，可以使用token（比如一个玩具考拉，或者一个澳式橄榄球，只有持有token的人可以说话）</li>
<li>保持one conversation（不要交头接耳）</li>
<li>每张stick上只写一条问题/想法</li>
</ul>


<p>引导师必须有控制会话何时结束的能力，否则引导活动将会变成一发不可收拾的冗长会议。坚持<code>one conversation</code>可以保证参与者足够聚焦，也保证所有人都在同一个频道上。如果发现有交头接耳的，引导者可以直接打断并提醒之。</p>

<p>每张便签上只写一条想法，首先可以保证多样性，便于讨论，也便于后续的分类。另外，简洁的描述在一定程度上可以促进与会者进行讨论，而一个冗长的描述则会让人丧失兴趣。</p>

<p>另外还有一些比较基础的技巧：</p>

<ul>
<li>所有讨论都应该对事不对人（特别是一些负面的总结）</li>
<li>如果有人提出与议题并不特别相关，但是又特别重要的点时，可以将这些点记下来（不要轻易打击发言者的积极性）</li>
<li>不定时的总结，以确保参与者都在同一频道，并且有助于大家对进度的了解（是不是快结束了）</li>
</ul>

]]></content>
  </entry>
  
</feed>
