<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | I code it]]></title>
  <link href="http://abruzzi.github.com/category/lisp/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2013-06-14T13:33:00+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[common lisp 里的一些基本概念]]></title>
    <link href="http://abruzzi.github.com/2013/06/common-lisp-basic/"/>
    <updated>2013-06-13T16:15:00+08:00</updated>
    <id>http://abruzzi.github.com/2013/06/common-lisp-basic</id>
    <content type="html"><![CDATA[<h3>Common Lisp</h3>

<p>之前一直说JavaScript是一门被误解很深的语言，现在学习了一段时间Lisp后发现，Lisp才是！Lisp一直为人所诟病的是它虽然很强大，但是有点学院派，难当大用。但是读了七，八章<a href="http://book.douban.com/subject/6859720/">《Practical Common Lisp》</a>和几章<a href="http://book.douban.com/subject/1456906/">《ANSI Common Lisp》</a>之后发现，怎么就学院派了，其他编程语言能处理的，Lisp一样可以处理，其他语言处理不了的（或者很繁琐的，比如java中的循环，map之类），Lisp却能处理。</p>

<p>Lisp本质上是一个抽象语法树（AST）而已，但是又提供了一些操作这个AST的方法（比如强大的宏），这样很容易用Lisp开发出来一个新的DSL。用函数式编程的好处之一就是在编写完一个应用程序之后，通常还可以获得一个新的语言（于业务领域很匹配的语言）。</p>

<p><a href="http://zh.wikipedia.org/wiki/Common_Lisp">Common Lisp</a>本身是Lisp的一个方言，是有一个标准来定义，其目的是为了标准化众多的Lisp分支而定。</p>

<h4>sbcl环境</h4>

<p>上一篇文章已经介绍了如何在Mac下配置Common Lisp的开发环境：</p>

<p><img src="http://abruzzi.github.com/images/2013/06/sbcl.resized.png" alt="image" /></p>

<h4>引用（quote）</h4>

<p>由于在Lisp中，数据和代码都是通过S-expr来表示，所以需要用一种标记法来告诉解释器：这个表达式表示数据/代码。这就是引用的作用：</p>

<p>```</p>

<blockquote><p>(+ 1 2 3 4 5)
15</p>

<p>'(+ 1 2 3 4 5)
(+ 1 2 3 4 5)
```
解释器会将s-expr的第一项作为函数(car)，而将后续的元素(cdr)作为参数传递给第一项来调用，并求值。可以通过引用（quote）来阻止解释器这样解释。</p></blockquote>

<h4>反引号(`)</h4>

<p>与引用对应的，有一个反引号形式的引用(在键盘上1的左边)。一般的用法上，它与<code>quote</code>的含义一样，都是防止解释器解释被引用的列表。</p>

<p>```</p>

<blockquote><p>`(a b c)
(a b c)</p>

<p>`(a b (+ 1 2))
(a b (+ 1 2))
```</p></blockquote>

<p>但是，反引号引用的列表提供了重新启动求值的能力，这……，我的意思是，如上式中，如果想要将<code>(+1 2)</code>这个子列表求值，怎么做到呢？反引号引用提供了这个能力，用逗号(,)作为子列表的前缀即可：</p>

<p>```</p>

<blockquote><p>`(a b ,(+ 1 2))
(a b 3)
```</p></blockquote>

<p>这个当然在此刻看起来毫无用处，或者感觉略有画蛇添足之嫌，但是在宏中，这个操作符却有很广泛的用途，这里有一个有意思的例子：</p>

<p><code>
(defun foo (x)
  (only (&gt; x 10) (format t "big than 10")))
</code></p>

<p>我们可以通过<code>if</code>来实现此处的only，当only之后的条件满足的话，就执行后续的所有语句：</p>

<p><code>
(defmacro only (condition &amp;rest body)
  `(if ,condition (progn ,@body)))
</code></p>

<p>此处可以看到，对于宏代码体中，有部分代码我们不需要引用，如(if, progn)，而另外一部分则需要解释器真实地去解释来获得值。另外，我们需要宏本身返回一个列表(被引用的列表)。</p>

<h4>通用的循环（do）</h4>

<p><code>do</code>是Lisp中通用的处理迭代的操作符，可以在其中创建局部变量：</p>

<p>```
(do ((i 0 (1+ i)))</p>

<pre><code>((&gt;= i 4))
</code></pre>

<p>  (print i))
```</p>

<p><code>do</code>的格式比较复杂：</p>

<p>```
(do (variable-definition*)</p>

<pre><code>(end-test-form result-form*)
statement*)
</code></pre>

<p>```</p>

<p>其中，变量声明部分的格式为：</p>

<p><code>
(variable init-form step-form)
</code></p>

<p>然后是测试，如果测试成功，有一个可选的返回值（上例中为nil），然后是statement部分，如果测试失败，则执行一次statement，然后通过step-from修改变量的值，测试，执行。</p>

<p>上例的代码会打印<strong>0-3</strong>的数字。<code>do</code>的另外一个功用是它支持多个变量并发的循环，这是(dolist, dotimes等无法完成的，所以在很多宏中，do是不二之选)。</p>

<p>```
(do ((n 0 (1+ n))</p>

<pre><code> (cur 0 next)
 (next 1 (+ cur next)))
((= 10 n) cur))
</code></pre>

<p>```</p>

<p>这个例子则没有statement部分，当n等于10这个测试条件成立后，返回cur当前的值。</p>

<h4>apply 和 funcall</h4>

<p><code>apply/call</code> 这两个函数当然是FP编程语言的必备了：</p>

<p>```</p>

<blockquote><p>(apply #'(lambda (x y) (+ x y)) '(3 4))
7</p>

<p>(funcall #'(lambda (x y) (+ x y)) 3 4)
8
```</p></blockquote>

<p>注意这里的<code>#'</code>操作符，它表示对函数对象的引用，就像<code>'</code>是对list的引用一样。</p>

<h4>list的基本操作</h4>

<p>构造列表（cons），<code>cons</code>的作用是将两个对象结合成一个对象（这个新的对象由两部分组成），这两部分分别由<code>car</code>,<code>cdr</code>来引用。</p>

<p>```</p>

<blockquote><p>(cons 'a nil)
(a)</p>

<p>(cons 'a (cons 'b nil))
(a b)
```</p></blockquote>

<p>当然可以用更简洁的方式：使用list函数：</p>

<p>```</p>

<blockquote><p>(list a b)
(a b)
```</p></blockquote>

<p><code>car</code>, <code>cdr</code>的用法如下：</p>

<p>```</p>

<blockquote><p>(setf x '(a b c (d e)))
(a b c (d e))</p>

<p>(car x)
a</p>

<p>(cdr x)
(b c (d e))</p></blockquote>

<p>```</p>

<p>有了<code>car</code>,<code>cdr</code>，对于既定的list，我们总是可以将其遍历（这在宏中非常有用）。</p>
]]></content>
  </entry>
  
</feed>
