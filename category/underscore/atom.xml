<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: underscore | I code it]]></title>
  <link href="http://abruzzi.github.com/category/underscore/atom.xml" rel="self"/>
  <link href="http://abruzzi.github.com/"/>
  <updated>2018-06-18T10:40:40+08:00</updated>
  <id>http://abruzzi.github.com/</id>
  <author>
    <name><![CDATA[Qiu Juntao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用underscore.js构建前端应用]]></title>
    <link href="http://abruzzi.github.com/2015/02/build-sample-application-by-using-underscore-and-jquery/"/>
    <updated>2015-02-21T21:21:00+08:00</updated>
    <id>http://abruzzi.github.com/2015/02/build-sample-application-by-using-underscore-and-jquery</id>
    <content type="html"><![CDATA[<h2>一个监控系统</h2>

<p>我们今天要使用<code>underscore.js</code>和<code>jQuery</code>来构建一个客户端的应用，这个应用是一个监控系统的前端，设计师已经给出了界面设计：</p>

<p><img src="/images/2015/02/alarms-design-resized.png" alt="alarms design" /></p>

<p>而对应的服务器端的API也已经就绪了：</p>

<p><code>sh
$ curl http://localhost:9527/alarms.json -s | jq .
</code></p>

<p>会看到诸如这样的返回值：</p>

<p>```json
[
  {</p>

<pre><code>"proiority": "critical",
"occurrence": "2/12/2015 01:23 AM",
"summary": "heartbeat failure",
"node": "VIQ002"
</code></pre>

<p>  },
  {</p>

<pre><code>"proiority": "major",
"occurrence": "2/12/2015 01:22 AM",
"summary": "packages are rejected",
"node": "VIQ002"
</code></pre>

<p>  },
  {</p>

<pre><code>"proiority": "medium",
"occurrence": "2/11/2015 01:23 AM",
"summary": "connection cannot be established",
"node": "VIQ002"
</code></pre>

<p>  }
]</p>

<p>```</p>

<p>每条告警信息都包含：优先级，发生时间，描述信息，以及发生告警的节点名称。</p>

<p>我们要将这些信息整合，并展示在页面上。</p>

<h3>mockup</h3>

<p>我在<a href="juntao.gitbooks.io/3-web-designs-in-3-weeks/">《3周3页面》</a>中讨论过现代前端开发的方式，你也可以参考<a href="http://icodeit.org/2014/11/modern-ui-development-workflow/">这篇文章</a>以及<a href="http://">这篇文章</a>。我们这里还是采用相同的方式来实现这个<code>mockup</code>，也就是静态页面。</p>

<p>首先我们在<code>index.html</code>中编写HTML：</p>

<p>```html</p>

<div class="container">
    <h1>Active Event List in transmission</h1>
    <ul class="events">
        <li>
            <div class="event critical">
                <h3>heartbeat failure @ VIQ002</h3>
                <span class="date">2/12/2015 01:23 AM</span>
            </div>
        </li>
        <li>
            <div class="event major">
                <h3>packages are rejected</h3>
                <span class="date">2/12/2015 01:23 AM</span>
            </div>
        </li>
        <li>
            <div class="event medium">
                <h3>connection cannot be established</h3>
                <span class="date">2/12/2015 01:23 AM</span>
            </div>
        </li>
        <!-- ... -->
    </ul>

    <ul class="legend">
        <li>
            <div class="count critical">
                <i class="alarm"></i>
                <span>critical: 20</span>
            </div>
        </li>
        <li>
            <div class="count major">
                <i class="alarm"></i>
                <span>major: 13</span>
            </div>
        </li>
        <li>
            <div class="count medium">
                <i class="alarm"></i>
                <span>medium: 20</span>
            </div>
        </li>
        <li>
            <div class="count warning">
                <i class="alarm"></i>
                <span>warning: 30</span>
            </div>
        </li>
        <li>
            <div class="count indeterminate">
                <i class="alarm"></i>
                <span>indeterminate: 6</span>
            </div>
        </li>
    </ul>
</div>


<p>```</p>

<p><code>events</code>中包含了所有告警信息，每一条告警根据等级不同显示了不同的颜色：红色表示严重，橘红表示主要，橘色表示一般等。告警信息包含了一个描述信息，并且包含了一个时间戳，表示告警发生的时间。</p>

<p><code>legend</code>部分是一个图例，其中包含了各个颜色的说明，并且包含了不同级别的告警信息的数目，比如截止目前为止，共有<strong>20</strong>个严重的告警，13个主要告警等。</p>

<p>对应的<code>scss</code>内容如下，首先定义了一些通用的CSS类：</p>

<p>```scss
@import "compass/reset";
@import "compass/css3";</p>

<p>body {</p>

<pre><code>font-size: 62.5%;
font-family: "Open Sans", serif;
text-align: center;
</code></pre>

<p>}</p>

<p>.critical {</p>

<pre><code>background-color: red;
color: white;
</code></pre>

<p>}</p>

<p>.major {</p>

<pre><code>background-color: orangered;
color: white;
</code></pre>

<p>}</p>

<p>.medium {</p>

<pre><code>background-color: orange;
color: white;
</code></pre>

<p>}</p>

<p>.warning {</p>

<pre><code>background-color: #2C75DB;
color: white;
</code></pre>

<p>}</p>

<p>.indeterminate {</p>

<pre><code>background-color: #29D4BA;
color: white;
</code></pre>

<p>}
```</p>

<p>然后定义<code>container</code>中的各个元素的样式：</p>

<p>```scss
.container {</p>

<pre><code>padding: 1em 0;
width: 800px;
margin: 0 auto;

h1 {
    font-size: 3em;
    text-transform: uppercase;
    margin: 1em 0;
}

.event {
    position: relative;

    h3 {
        text-align: left;
        font-size: 1.5em;
        padding: .6em .5em;
        text-transform: capitalize;
    }

    .date {
        position: absolute;
        top: 50%;
        right: 1em;
        font-size: 1em;
        font-style: italic;
        color: #eeeeee;
    }
}

.legend {
    margin: 1em 0;
    li {
        width: 20%;
        float: left;

        .count {
            padding: .6em;
            text-transform: capitalize;
        }
    }
}
</code></pre>

<p>}
```</p>

<h3>应用程序</h3>

<p>首先我们下载<code>underscore.js</code>和<code>jquery.js</code>，并将它们放在当前目录下的<code>scripts/libs</code>下，并在<code>scripts</code>下创建一个<code>app.js</code>文件。</p>

<p>这时候的目录结构如下：</p>

<p>```
├── index.html
├── sass
│   └── style.scss
├── scripts
│   ├── app.js
│   └── libs
│       ├── jquery.min.js
│       └── underscore.js
└── stylesheets</p>

<pre><code>└── style.css
</code></pre>

<p>```</p>

<p>然后我们在<code>index.html</code>中引入上列的文件：</p>

<p>```html</p>

<script src="scripts/libs/jquery.min.js"></script>


<script src="scripts/libs/underscore.js"></script>


<script src="scripts/app.js"></script>


<p>```</p>

<p>我们的应用程序需要做的事情很简单：</p>

<ol>
<li>请求服务器获得数据</li>
<li>处理数据（如果需要的话）</li>
<li>将加工过的数据与模板结合，渲染在页面上</li>
</ol>


<p><code>underscore.js</code>中有一个用来处理模板的函数，叫做<code>template</code>：</p>

<p>```js
var compiled = _.template("<h1>&lt;%= title %></h1>");
compiled({"title": "Heartbeat Failure @ VIQ002"});</p>

<p>//<h1>Heartbeat Failure @ VIQ002</h1>
```</p>

<p>注意上式中的<code>&lt;%= variable %&gt;</code>，这个表达式表示打印<code>variable</code>的值。而如果只是执行JavaScript代码，表达式则为<code>&lt;% expression; %&gt;</code>。</p>

<p>比如我们可以使用<code>for</code>循环：</p>

<p>```js
var template =</p>

<pre><code>"&lt;% _.each(alarms, function(alarm){ %&gt;" +
    "&lt;h3&gt;&lt;%= alarm.summary %&gt;&lt;/h3&gt;" +
"&lt;% }); %&gt;";
</code></pre>

<p>var compilded = _.template(template);
compilded({"alarms": [
  {</p>

<pre><code>"proiority": "critical",
"occurrence": "2/12/2015 01:23 AM",
"summary": "heartbeat failure",
"node": "VIQ002"
</code></pre>

<p>  },
  {</p>

<pre><code>"proiority": "major",
"occurrence": "2/12/2015 01:22 AM",
"summary": "packages are rejected",
"node": "VIQ002"
</code></pre>

<p>  },
  {</p>

<pre><code>"proiority": "medium",
"occurrence": "2/11/2015 01:23 AM",
"summary": "connection cannot be established",
"node": "VIQ002"
</code></pre>

<p>  }
]});</p>

<p>//<h3>heartbeat failure</h3><h3>packages are rejected</h3><h3>connection cannot be established</h3>
```</p>

<p>注意上边代码中的<code>_.each</code>语句。</p>

<h3>实现</h3>

<p>首先我们在页面上定义一个模板，定义在id为<code>events</code>的<code>script</code>标签中，注意这个script的type为<code>template</code>，这样既可以避免浏览器解释它，又可以为我们临时保存一段文本。</p>

<p>```html</p>

<script type="template" id="events">
    <% _.each(alarms, function(alarm) { %>
        <li>
            <div class="event <%= alarm.proiority%>">
                <h3><%= alarm.summary%> @ <%= alarm.node %></h3>
                <span class="date"><%= alarm.occurrence %></span>
            </div>
        </li>
    <% }); %>
</script>


<p>```</p>

<p>然后在<code>app.js</code>中只需要请求<code>alarms.json</code>，然后编译模板，并绑定数据：</p>

<p>```js
$(function() {</p>

<pre><code>$.get("/alarms.json").done(function(alarms) {
    var compiled = _.template($("#events").html());
    var html = compiled({"alarms": alarms});

    $(".events").html(html);
});
</code></pre>

<p>});
```</p>

<p>刷新页面，就可以看到来自于后台的实际数据了（当然，我们这里使用了一个静态的<code>alarms.json</code>来模拟后台的API）：</p>

<p><img src="/images/2015/02/fetch-data-resized.png" alt="fetch data from server" /></p>

<h4>处理数据</h4>

<p>你可能已经看到了，由于后台数据采集的问题，前端请求到的数据不一定每次都是按照日期排好序的，因此我们需要在拿到数据之后先排序在展示。好在我们之前已经学习了如何做到这一点：</p>

<p>```js
$(function() {</p>

<pre><code>$.get("/alarms.json").done(function(alarms) {
    var eventCompiled = _.template($("#events").html());

    var events = _(alarms).sortBy("occurrence").reverse();
    var eventHTML = eventCompiled({"alarms": events});

    $(".events").html(eventHTML);
});
</code></pre>

<p>});
```</p>

<p>剩下的就是页面最底部的图例部分了，这部分会统计各种类型告警的合计信息，这些信息需要进一步的汇总。首先我们将<code>legend</code>封装成模板：</p>

<p>```html</p>

<script type="template" id="legend">
    <% _.each(legends, function(legend) { %>
        <li>
            <div class="count <%= legend.proiority %>">
                <i class="alarm"></i>
                <span><%= legend.proiority %>: <%= legend.count %></span>
            </div>
        </li>
    <% }); %>
</script>


<p>```</p>

<p>也即，我们需要这样一个结果集：</p>

<p>```js</p>

<p>[</p>

<pre><code>{
    "proiority": "critical",
    "count": 3
},
{
    "proiority": "major",
    "count": 2
}
</code></pre>

<p>]
```</p>

<p>不过使用<code>underscore.js</code>，我们可以很容易的得到这个格式的数据：</p>

<p>```js
var legends = _.chain(alarms)</p>

<pre><code>.groupBy("proiority")
.map(function(value, key) {
    return {proiority: key, count: value.length};
}).value();
</code></pre>

<p>```</p>

<p>其中，<code>groupBy</code>是一个新的API，和<code>SQL</code>中的<code>group by</code>子句一样，它可以将符合条件的项目合并为不同的组：</p>

<p>```js
var contacts = [
  {</p>

<pre><code>  "name": "Juntao",
  "age": 29
</code></pre>

<p>  },
  {</p>

<pre><code>  "name": "Abruzzi",
  "age": 30
</code></pre>

<p>  },
  {</p>

<pre><code>  "name": "Sara",
  "age": 29
</code></pre>

<p>  }
];</p>

<p>var result = _(contacts).groupBy("age");
```</p>

<p>会得到这样的结果：</p>

<p>```json
{</p>

<pre><code>"29": [
    {
        "name": "Juntao",
        "age": 29
    },
    {
        "name": "Sara",
        "age": 29
    }
],
"30": [
    {
        "name": "Abruzzi",
        "age": 30
    }
]
</code></pre>

<p>}
```</p>

<p>因此我们通过上面的计算就可以得到需要的结果了：</p>

<p><img src="/images/2015/02/with-legend-resized.png" alt="with legend" /></p>
]]></content>
  </entry>
  
</feed>
